'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (_ref14) {
  var t = _ref14.types;
  var template = _ref14.template;

  /**
   * Binary Operators that can only produce boolean results.
   */
  var BOOLEAN_BINARY_OPERATORS = ['==', '===', '>=', '<=', '>', '<', 'instanceof'];

  if (!(Array.isArray(BOOLEAN_BINARY_OPERATORS) && BOOLEAN_BINARY_OPERATORS.every(function (item) {
    return typeof item === 'string';
  }))) {
    throw new TypeError('Value of variable "BOOLEAN_BINARY_OPERATORS" violates contract, expected string[] got ' + (BOOLEAN_BINARY_OPERATORS === null ? 'null' : (typeof BOOLEAN_BINARY_OPERATORS === 'undefined' ? 'undefined' : _typeof(BOOLEAN_BINARY_OPERATORS)) === 'object' && BOOLEAN_BINARY_OPERATORS.constructor ? BOOLEAN_BINARY_OPERATORS.constructor.name || '[Unknown Object]' : typeof BOOLEAN_BINARY_OPERATORS === 'undefined' ? 'undefined' : _typeof(BOOLEAN_BINARY_OPERATORS)));
  }

  var checks = createChecks();
  var staticChecks = createStaticChecks();

  var checkIsArray = expression('Array.isArray(input)');

  if (!(typeof checkIsArray === 'function')) {
    throw new TypeError('Value of variable "checkIsArray" violates contract, expected () => Node got ' + (checkIsArray === null ? 'null' : (typeof checkIsArray === 'undefined' ? 'undefined' : _typeof(checkIsArray)) === 'object' && checkIsArray.constructor ? checkIsArray.constructor.name || '[Unknown Object]' : typeof checkIsArray === 'undefined' ? 'undefined' : _typeof(checkIsArray)));
  }

  var checkIsMap = expression('input instanceof Map');

  if (!(typeof checkIsMap === 'function')) {
    throw new TypeError('Value of variable "checkIsMap" violates contract, expected () => Node got ' + (checkIsMap === null ? 'null' : (typeof checkIsMap === 'undefined' ? 'undefined' : _typeof(checkIsMap)) === 'object' && checkIsMap.constructor ? checkIsMap.constructor.name || '[Unknown Object]' : typeof checkIsMap === 'undefined' ? 'undefined' : _typeof(checkIsMap)));
  }

  var checkIsSet = expression('input instanceof Set');

  if (!(typeof checkIsSet === 'function')) {
    throw new TypeError('Value of variable "checkIsSet" violates contract, expected () => Node got ' + (checkIsSet === null ? 'null' : (typeof checkIsSet === 'undefined' ? 'undefined' : _typeof(checkIsSet)) === 'object' && checkIsSet.constructor ? checkIsSet.constructor.name || '[Unknown Object]' : typeof checkIsSet === 'undefined' ? 'undefined' : _typeof(checkIsSet)));
  }

  var checkIsObject = expression('input != null && typeof input === \'object\'');

  if (!(typeof checkIsObject === 'function')) {
    throw new TypeError('Value of variable "checkIsObject" violates contract, expected () => Node got ' + (checkIsObject === null ? 'null' : (typeof checkIsObject === 'undefined' ? 'undefined' : _typeof(checkIsObject)) === 'object' && checkIsObject.constructor ? checkIsObject.constructor.name || '[Unknown Object]' : typeof checkIsObject === 'undefined' ? 'undefined' : _typeof(checkIsObject)));
  }

  var checkNotNull = expression('input != null');

  if (!(typeof checkNotNull === 'function')) {
    throw new TypeError('Value of variable "checkNotNull" violates contract, expected () => Node got ' + (checkNotNull === null ? 'null' : (typeof checkNotNull === 'undefined' ? 'undefined' : _typeof(checkNotNull)) === 'object' && checkNotNull.constructor ? checkNotNull.constructor.name || '[Unknown Object]' : typeof checkNotNull === 'undefined' ? 'undefined' : _typeof(checkNotNull)));
  }

  var checkEquals = expression('input === expected');

  if (!(typeof checkEquals === 'function')) {
    throw new TypeError('Value of variable "checkEquals" violates contract, expected () => Node got ' + (checkEquals === null ? 'null' : (typeof checkEquals === 'undefined' ? 'undefined' : _typeof(checkEquals)) === 'object' && checkEquals.constructor ? checkEquals.constructor.name || '[Unknown Object]' : typeof checkEquals === 'undefined' ? 'undefined' : _typeof(checkEquals)));
  }

  var declareTypeChecker = template('\n    const id = function id (input) {\n      return check;\n    };\n  ');

  if (!(typeof declareTypeChecker === 'function')) {
    throw new TypeError('Value of variable "declareTypeChecker" violates contract, expected () => Node got ' + (declareTypeChecker === null ? 'null' : (typeof declareTypeChecker === 'undefined' ? 'undefined' : _typeof(declareTypeChecker)) === 'object' && declareTypeChecker.constructor ? declareTypeChecker.constructor.name || '[Unknown Object]' : typeof declareTypeChecker === 'undefined' ? 'undefined' : _typeof(declareTypeChecker)));
  }

  var guard = template('\n    if (!check) {\n      throw new TypeError(message);\n    }\n  ');

  if (!(typeof guard === 'function')) {
    throw new TypeError('Value of variable "guard" violates contract, expected () => Node got ' + (guard === null ? 'null' : (typeof guard === 'undefined' ? 'undefined' : _typeof(guard)) === 'object' && guard.constructor ? guard.constructor.name || '[Unknown Object]' : typeof guard === 'undefined' ? 'undefined' : _typeof(guard)));
  }

  var thrower = template('\n    if (check) {\n      ret;\n    }\n    else {\n      throw new TypeError(message);\n    }\n  ');

  if (!(typeof thrower === 'function')) {
    throw new TypeError('Value of variable "thrower" violates contract, expected () => Node got ' + (thrower === null ? 'null' : (typeof thrower === 'undefined' ? 'undefined' : _typeof(thrower)) === 'object' && thrower.constructor ? thrower.constructor.name || '[Unknown Object]' : typeof thrower === 'undefined' ? 'undefined' : _typeof(thrower)));
  }

  var readableName = expression('\n    input === null ? \'null\' : typeof input === \'object\' && input.constructor ? input.constructor.name || \'[Unknown Object]\' : typeof input\n  ');

  if (!(typeof readableName === 'function')) {
    throw new TypeError('Value of variable "readableName" violates contract, expected () => Node got ' + (readableName === null ? 'null' : (typeof readableName === 'undefined' ? 'undefined' : _typeof(readableName)) === 'object' && readableName.constructor ? readableName.constructor.name || '[Unknown Object]' : typeof readableName === 'undefined' ? 'undefined' : _typeof(readableName)));
  }

  var checkMapKeys = expression('\n    input instanceof Map && Array.from(input.keys()).every(key => keyCheck)\n  ');

  if (!(typeof checkMapKeys === 'function')) {
    throw new TypeError('Value of variable "checkMapKeys" violates contract, expected () => Node got ' + (checkMapKeys === null ? 'null' : (typeof checkMapKeys === 'undefined' ? 'undefined' : _typeof(checkMapKeys)) === 'object' && checkMapKeys.constructor ? checkMapKeys.constructor.name || '[Unknown Object]' : typeof checkMapKeys === 'undefined' ? 'undefined' : _typeof(checkMapKeys)));
  }

  var checkMapValues = expression('\n    input instanceof Map && Array.from(input.values()).every(value => valueCheck)\n  ');

  if (!(typeof checkMapValues === 'function')) {
    throw new TypeError('Value of variable "checkMapValues" violates contract, expected () => Node got ' + (checkMapValues === null ? 'null' : (typeof checkMapValues === 'undefined' ? 'undefined' : _typeof(checkMapValues)) === 'object' && checkMapValues.constructor ? checkMapValues.constructor.name || '[Unknown Object]' : typeof checkMapValues === 'undefined' ? 'undefined' : _typeof(checkMapValues)));
  }

  var checkMapEntries = expression('\n    input instanceof Map && Array.from(input).every(([key, value]) => keyCheck && valueCheck)\n  ');

  if (!(typeof checkMapEntries === 'function')) {
    throw new TypeError('Value of variable "checkMapEntries" violates contract, expected () => Node got ' + (checkMapEntries === null ? 'null' : (typeof checkMapEntries === 'undefined' ? 'undefined' : _typeof(checkMapEntries)) === 'object' && checkMapEntries.constructor ? checkMapEntries.constructor.name || '[Unknown Object]' : typeof checkMapEntries === 'undefined' ? 'undefined' : _typeof(checkMapEntries)));
  }

  var checkSetEntries = expression('\n    input instanceof Set && Array.from(input).every(value => valueCheck)\n  ');

  if (!(typeof checkSetEntries === 'function')) {
    throw new TypeError('Value of variable "checkSetEntries" violates contract, expected () => Node got ' + (checkSetEntries === null ? 'null' : (typeof checkSetEntries === 'undefined' ? 'undefined' : _typeof(checkSetEntries)) === 'object' && checkSetEntries.constructor ? checkSetEntries.constructor.name || '[Unknown Object]' : typeof checkSetEntries === 'undefined' ? 'undefined' : _typeof(checkSetEntries)));
  }

  var PRAGMA_IGNORE_STATEMENT = /typecheck:\s*ignore\s+statement/i;
  var PRAGMA_IGNORE_FILE = /typecheck:\s*ignore\s+file/i;

  var visitors = {
    Statement: function Statement(path) {
      if (!NodePath(path)) {
        throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
      }

      maybeSkip(path);
    },
    TypeAlias: function TypeAlias(path) {
      if (!NodePath(path)) {
        throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
      }

      if (maybeSkip(path)) {
        return;
      }
      path.replaceWith(createTypeAliasChecks(path));
    },
    InterfaceDeclaration: function InterfaceDeclaration(path) {
      if (!NodePath(path)) {
        throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
      }

      if (maybeSkip(path)) {
        return;
      }
      path.replaceWith(createInterfaceChecks(path));
    },
    ExportNamedDeclaration: function ExportNamedDeclaration(path) {
      if (!NodePath(path)) {
        throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
      }

      if (maybeSkip(path)) {
        return;
      }
      var node = path.node;
      var scope = path.scope;

      if (node.declaration && node.declaration.type === 'TypeAlias') {
        path.replaceWith(t.exportNamedDeclaration(createTypeAliasChecks(path.get('declaration')), [], null));
      }
    },
    ImportDeclaration: function ImportDeclaration(path) {
      if (!NodePath(path)) {
        throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
      }

      if (maybeSkip(path)) {
        return;
      }
      if (path.node.importKind !== 'type') {
        return;
      }

      var _path$get$map$reduce = path.get('specifiers').map(function (specifier) {
        var local = specifier.get('local');
        var tmpId = path.scope.generateUidIdentifierBasedOnNode(local.node);
        var replacement = t.importSpecifier(tmpId, specifier.node.imported);
        var id = t.identifier(local.node.name);

        id.isTypeChecker = true;
        var declarator = t.variableDeclarator(id, tmpId);
        declarator.isTypeChecker = true;
        return [declarator, replacement];
      }).reduce(function (_ref15, _ref16) {
        var _ref18 = _slicedToArray(_ref15, 2);

        var declarators = _ref18[0];
        var specifiers = _ref18[1];

        var _ref17 = _slicedToArray(_ref16, 2);

        var declarator = _ref17[0];
        var specifier = _ref17[1];

        declarators.push(declarator);
        specifiers.push(specifier);
        return [declarators, specifiers];
      }, [[], []]);

      var _path$get$map$reduce2 = _slicedToArray(_path$get$map$reduce, 2);

      var declarators = _path$get$map$reduce2[0];
      var specifiers = _path$get$map$reduce2[1];

      var declaration = t.variableDeclaration('var', declarators);
      declaration.isTypeChecker = true;

      path.replaceWithMultiple([t.importDeclaration(specifiers, path.node.source), declaration]);
    },

    Function: {
      enter: function enter(path) {
        var _node$body$body;

        if (!NodePath(path)) {
          throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
        }

        if (maybeSkip(path)) {
          return;
        }

        var node = path.node;
        var scope = path.scope;

        var paramChecks = collectParamChecks(path);
        if (node.type === "ArrowFunctionExpression" && node.expression) {
          node.expression = false;
          node.body = t.blockStatement([t.returnStatement(node.body)]);
        }
        (_node$body$body = node.body.body).unshift.apply(_node$body$body, _toConsumableArray(paramChecks));
        node.savedTypeAnnotation = node.returnType;
        node.returnCount = 0;
      },
      exit: function exit(path) {
        if (!NodePath(path)) {
          throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
        }

        var node = path.node;
        var scope = path.scope;

        var isVoid = node.savedTypeAnnotation ? maybeNullableAnnotation(node.savedTypeAnnotation) : null;
        if (!node.returnCount && isVoid === false) {
          throw path.buildCodeFrameError('Function ' + (node.id ? '"' + node.id.name + '" ' : '') + 'did not return a value, expected ' + humanReadableType(node.savedTypeAnnotation));
        }
      }
    },

    ReturnStatement: function ReturnStatement(path) {
      if (!NodePath(path)) {
        throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
      }

      if (maybeSkip(path)) {
        return;
      }
      var node = path.node;
      var parent = path.parent;
      var scope = path.scope;

      var fn = path.getFunctionParent();
      if (!fn) {
        return;
      }
      fn.node.returnCount++;
      if (node.isTypeChecked) {
        return;
      }
      var returnType = fn.node.returnType;

      if (!returnType) {
        return;
      }
      if (!node.argument) {
        if (maybeNullableAnnotation(returnType) === false) {
          throw path.buildCodeFrameError('Function ' + (fn.node.id ? '"' + fn.node.id.name + '" ' : '') + 'did not return a value, expected ' + humanReadableType(returnType));
        }
        return;
      }
      var id = undefined;
      if (node.argument.type === 'Identifier' || t.isLiteral(node.argument)) {
        id = node.argument;
      } else {
        id = scope.generateUidIdentifierBasedOnNode(node.argument);
      }
      var ok = staticCheckAnnotation(path.get("argument"), returnType);
      if (ok === true) {
        return;
      } else if (ok === false) {
        throw path.buildCodeFrameError('Invalid return type, expected ' + humanReadableType(returnType) + ' got ' + humanReadableType(getAnnotation(path.get('argument'))));
      }
      var check = checkAnnotation(id, returnType, scope);
      if (!check) {
        return;
      }
      if (parent.type !== 'BlockStatement' && parent.type !== 'Program') {
        var block = [];
        if (node.argument.type !== 'Identifier' && !t.isLiteral(node.argument)) {
          scope.push({ id: id });
          block.push(t.expressionStatement(t.assignmentExpression('=', id, node.argument)));
        }
        var ret = t.returnStatement(id);
        ret.isTypeChecked = true;
        block.push(thrower({
          check: check,
          ret: ret,
          message: returnTypeErrorMessage(path, fn.node, id)
        }));
        path.replaceWith(t.blockStatement(block));
      } else {
        if (node.argument.type !== 'Identifier' && !t.isLiteral(node.argument)) {
          scope.push({ id: id });
          path.insertBefore(t.expressionStatement(t.assignmentExpression('=', id, node.argument)));
        }
        var ret = t.returnStatement(id);
        ret.isTypeChecked = true;
        path.replaceWith(thrower({
          check: check,
          ret: ret,
          message: returnTypeErrorMessage(path, fn.node, id)
        }));
      }
    },
    VariableDeclaration: function VariableDeclaration(path) {
      if (!NodePath(path)) {
        throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
      }

      if (maybeSkip(path)) {
        return;
      }
      var node = path.node;
      var scope = path.scope;

      var collected = [];
      var declarations = path.get("declarations");
      for (var i = 0; i < node.declarations.length; i++) {
        var declaration = node.declarations[i];
        var _id = declaration.id;
        var init = declaration.init;

        if (!_id.typeAnnotation || _id.hasBeenTypeChecked) {
          continue;
        }
        _id.savedTypeAnnotation = _id.typeAnnotation;
        _id.hasBeenTypeChecked = true;
        var ok = staticCheckAnnotation(declarations[i], _id.typeAnnotation);
        if (ok === true) {
          continue;
        } else if (ok === false) {
          throw path.buildCodeFrameError('Invalid assignment value, expected ' + humanReadableType(_id.typeAnnotation) + ' got ' + humanReadableType(getAnnotation(declarations[i])));
        }
        var check = checkAnnotation(_id, _id.typeAnnotation, scope);
        if (check) {
          collected.push(guard({
            check: check,
            message: varTypeErrorMessage(_id, scope)
          }));
        }
      }
      if (collected.length > 0) {
        var check = collected.reduce(function (check, branch) {
          branch.alternate = check;
          return branch;
        });
        if (path.parent.type === 'Program' || path.parent.type === 'BlockStatement') {
          path.insertAfter(check);
        } else if (path.parentPath.isForXStatement() || path.parentPath.isForStatement() || path.parentPath.isForInStatement()) {
          var body = path.parentPath.get('body');
          if (body.type !== 'BlockStatement') {
            var block = t.blockStatement([body.node]);
            body.replaceWith(block);
            body = path.parentPath.get('body');
          }
          var children = body.get('body');
          if (children.length === 0) {
            body.replaceWith(check);
          } else {
            children[0].insertBefore(check);
          }
        } else if (path.parent.type === 'ExportNamedDeclaration' || path.parent.type === 'ExportDefaultDeclaration' || path.parent.type === 'ExportAllDeclaration') {
          path.parentPath.insertAfter(check);
        } else {
          path.replaceWith(t.blockStatement([node, check]));
        }
      }
    },
    AssignmentExpression: function AssignmentExpression(path) {
      if (!NodePath(path)) {
        throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
      }

      if (maybeSkip(path)) {
        return;
      }
      var node = path.node;
      var scope = path.scope;

      var left = path.get('left');
      var annotation = undefined;
      if (node.hasBeenTypeChecked || node.left.hasBeenTypeChecked) {
        return;
      } else if (left.isMemberExpression()) {
        annotation = getAnnotation(left);

        if (!TypeAnnotation(annotation)) {
          throw new TypeError('Value of variable "annotation" violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
        }
      } else if (t.isIdentifier(node.left)) {
        var binding = scope.getBinding(node.left.name);
        if (!binding) {
          return;
        } else if (binding.path.type !== 'VariableDeclarator') {
          return;
        }
        annotation = left.getTypeAnnotation();
        if (annotation.type === 'AnyTypeAnnotation') {
          var item = binding.path.get('id');
          annotation = item.node.savedTypeAnnotation || item.getTypeAnnotation();
        }
      } else {
        return;
      }

      node.hasBeenTypeChecked = true;
      node.left.hasBeenTypeChecked = true;
      var id = node.left;
      var right = path.get('right');
      if (annotation.type === 'AnyTypeAnnotation') {
        annotation = getAnnotation(right);

        if (!TypeAnnotation(annotation)) {
          throw new TypeError('Value of variable "annotation" violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
        }

        if (allowsAny(annotation)) {
          return;
        }
      }
      var ok = staticCheckAnnotation(right, annotation);
      if (ok === true) {
        return;
      } else if (ok === false) {
        throw path.buildCodeFrameError('Invalid assignment value, expected ' + humanReadableType(annotation) + ' got ' + humanReadableType(getAnnotation(right)));
      }
      var check = checkAnnotation(id, annotation, scope);
      if (!id.typeAnnotation) {
        id.typeAnnotation = annotation;
      }
      id.hasBeenTypeChecked = true;
      if (check) {
        var parent = path.getStatementParent();
        parent.insertAfter(guard({
          check: check,
          message: varTypeErrorMessage(id, scope)
        }));
      }
    },
    TypeCastExpression: function TypeCastExpression(path) {
      if (!NodePath(path)) {
        throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
      }

      var node = path.node;

      var target = undefined;
      switch (node.expression.type) {
        case 'Identifier':
          target = node.expression;
          break;
        case 'AssignmentExpression':
          target = node.expression.left;
          break;
        default:
          // unsupported.
          return;
      }
      var id = path.scope.getBindingIdentifier(target.name);
      if (!id) {
        return;
      }
      id.savedTypeAnnotation = path.getTypeAnnotation();
    }
  };

  return {
    visitor: {
      Program: function Program(path) {
        if (!NodePath(path)) {
          throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
        }

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = path.get('body')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var child = _step.value;

            if (maybeSkipFile(child)) {
              return;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        path.traverse(visitors);
      }
    }
  };

  function isThisMemberExpression(path) {
    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var node = path.node;

    if (node.type === 'ThisExpression') {
      return true;
    } else if (node.type === 'MemberExpression') {
      return isThisMemberExpression(path.get('object'));
    } else {
      return false;
    }
  }

  function createChecks() {
    return {
      number: expression('typeof input === \'number\''),
      numericLiteral: checkNumericLiteral,
      boolean: expression('typeof input === \'boolean\''),
      booleanLiteral: checkBooleanLiteral,
      function: expression('typeof input === \'function\''),
      string: expression('typeof input === \'string\''),
      stringLiteral: checkStringLiteral,
      symbol: expression('typeof input === \'symbol\''),
      undefined: expression('input === undefined'),
      null: expression('input === null'),
      void: expression('input == null'),
      instanceof: expression('input instanceof type'),
      type: expression('type(input)'),
      mixed: function mixed() {
        return null;
      },
      any: function any() {
        return null;
      },
      union: checkUnion,
      intersection: checkIntersection,
      array: checkArray,
      map: checkMap,
      set: checkSet,
      tuple: checkTuple,
      object: checkObject,
      nullable: checkNullable,
      typeof: checkTypeof
    };
  }

  function createStaticChecks() {
    return {
      symbol: function symbol(path) {
        var _maybeSymbolAnnotatio;

        if (!NodePath(path)) {
          throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
        }

        _maybeSymbolAnnotatio = maybeSymbolAnnotation(getAnnotation(path));

        if (!(_maybeSymbolAnnotatio == null || typeof _maybeSymbolAnnotatio === 'boolean')) {
          throw new TypeError('Value of variable "_maybeSymbolAnnotatio" violates contract, expected ?bool got ' + (_maybeSymbolAnnotatio === null ? 'null' : (typeof _maybeSymbolAnnotatio === 'undefined' ? 'undefined' : _typeof(_maybeSymbolAnnotatio)) === 'object' && _maybeSymbolAnnotatio.constructor ? _maybeSymbolAnnotatio.constructor.name || '[Unknown Object]' : typeof _maybeSymbolAnnotatio === 'undefined' ? 'undefined' : _typeof(_maybeSymbolAnnotatio)));
        }

        if (_maybeSymbolAnnotatio == null || typeof _maybeSymbolAnnotatio === 'boolean') {
          return _maybeSymbolAnnotatio;
        } else {
          throw new TypeError('Function return value violates contract, expected ?bool got ' + (_maybeSymbolAnnotatio === null ? 'null' : (typeof _maybeSymbolAnnotatio === 'undefined' ? 'undefined' : _typeof(_maybeSymbolAnnotatio)) === 'object' && _maybeSymbolAnnotatio.constructor ? _maybeSymbolAnnotatio.constructor.name || '[Unknown Object]' : typeof _maybeSymbolAnnotatio === 'undefined' ? 'undefined' : _typeof(_maybeSymbolAnnotatio)));
        }
      },
      instanceof: function _instanceof(_ref19) {
        var _maybeInstanceOfAnnot;

        var path = _ref19.path;
        var type = _ref19.type;
        var node = path.node;
        var scope = path.scope;

        if (type.name === 'Object' && node.type === 'ObjectExpression' && !scope.hasBinding('Object')) {
          return true;
        } else if (type.name === 'Map' && !scope.hasBinding('Map')) {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        } else if (type.name === 'Set' && !scope.hasBinding('Set')) {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }
        _maybeInstanceOfAnnot = maybeInstanceOfAnnotation(getAnnotation(path), type);

        if (!(_maybeInstanceOfAnnot == null || typeof _maybeInstanceOfAnnot === 'boolean')) {
          throw new TypeError('Value of variable "_maybeInstanceOfAnnot" violates contract, expected ?bool got ' + (_maybeInstanceOfAnnot === null ? 'null' : (typeof _maybeInstanceOfAnnot === 'undefined' ? 'undefined' : _typeof(_maybeInstanceOfAnnot)) === 'object' && _maybeInstanceOfAnnot.constructor ? _maybeInstanceOfAnnot.constructor.name || '[Unknown Object]' : typeof _maybeInstanceOfAnnot === 'undefined' ? 'undefined' : _typeof(_maybeInstanceOfAnnot)));
        }

        if (_maybeInstanceOfAnnot == null || typeof _maybeInstanceOfAnnot === 'boolean') {
          return _maybeInstanceOfAnnot;
        } else {
          throw new TypeError('Function return value violates contract, expected ?bool got ' + (_maybeInstanceOfAnnot === null ? 'null' : (typeof _maybeInstanceOfAnnot === 'undefined' ? 'undefined' : _typeof(_maybeInstanceOfAnnot)) === 'object' && _maybeInstanceOfAnnot.constructor ? _maybeInstanceOfAnnot.constructor.name || '[Unknown Object]' : typeof _maybeInstanceOfAnnot === 'undefined' ? 'undefined' : _typeof(_maybeInstanceOfAnnot)));
        }
      },
      type: (function (_type) {
        function type(_x) {
          return _type.apply(this, arguments);
        }

        type.toString = function () {
          return _type.toString();
        };

        return type;
      })(function (_ref20) {
        var path = _ref20.path;
        var type = _ref20.type;

        if (null == null || typeof null === 'boolean') {
          return null;
        } else {
          throw new TypeError('Function return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
        }
      })
    };
  }

  function compareAnnotations(a, b) {
    var _maybeStringAnnotatio, _compareStringLiteral, _maybeNumberAnnotatio, _compareNumericLitera, _maybeBooleanAnnotati, _compareBooleanLitera, _maybeFunctionAnnotat, _compareObjectAnnotat, _compareArrayAnnotati, _compareGenericAnnota, _compareTupleAnnotati, _compareUnionAnnotati, _compareIntersectionA, _compareNullableAnnot;

    if (!TypeAnnotation(a)) {
      throw new TypeError('Value of argument "a" violates contract, expected TypeAnnotation got ' + (a === null ? 'null' : (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' && a.constructor ? a.constructor.name || '[Unknown Object]' : typeof a === 'undefined' ? 'undefined' : _typeof(a)));
    }

    if (!TypeAnnotation(b)) {
      throw new TypeError('Value of argument "b" violates contract, expected TypeAnnotation got ' + (b === null ? 'null' : (typeof b === 'undefined' ? 'undefined' : _typeof(b)) === 'object' && b.constructor ? b.constructor.name || '[Unknown Object]' : typeof b === 'undefined' ? 'undefined' : _typeof(b)));
    }

    if (a.type === 'TypeAnnotation') {
      a = a.typeAnnotation;
    }
    if (b.type === 'TypeAnnotation') {
      b = b.typeAnnotation;
    }
    switch (a.type) {
      case 'StringTypeAnnotation':
        {
          _maybeStringAnnotatio = maybeStringAnnotation(b);

          if (!(_maybeStringAnnotatio == null || typeof _maybeStringAnnotatio === 'boolean')) {
            throw new TypeError('Value of variable "_maybeStringAnnotatio" violates contract, expected ?bool got ' + (_maybeStringAnnotatio === null ? 'null' : (typeof _maybeStringAnnotatio === 'undefined' ? 'undefined' : _typeof(_maybeStringAnnotatio)) === 'object' && _maybeStringAnnotatio.constructor ? _maybeStringAnnotatio.constructor.name || '[Unknown Object]' : typeof _maybeStringAnnotatio === 'undefined' ? 'undefined' : _typeof(_maybeStringAnnotatio)));
          }

          if (_maybeStringAnnotatio == null || typeof _maybeStringAnnotatio === 'boolean') {
            return _maybeStringAnnotatio;
          } else {
            throw new TypeError('Function "compareAnnotations" return value violates contract, expected ?bool got ' + (_maybeStringAnnotatio === null ? 'null' : (typeof _maybeStringAnnotatio === 'undefined' ? 'undefined' : _typeof(_maybeStringAnnotatio)) === 'object' && _maybeStringAnnotatio.constructor ? _maybeStringAnnotatio.constructor.name || '[Unknown Object]' : typeof _maybeStringAnnotatio === 'undefined' ? 'undefined' : _typeof(_maybeStringAnnotatio)));
          }
        }

      case 'StringLiteralTypeAnnotation':
        {
          _compareStringLiteral = compareStringLiteralAnnotations(a, b);

          if (!(_compareStringLiteral == null || typeof _compareStringLiteral === 'boolean')) {
            throw new TypeError('Value of variable "_compareStringLiteral" violates contract, expected ?bool got ' + (_compareStringLiteral === null ? 'null' : (typeof _compareStringLiteral === 'undefined' ? 'undefined' : _typeof(_compareStringLiteral)) === 'object' && _compareStringLiteral.constructor ? _compareStringLiteral.constructor.name || '[Unknown Object]' : typeof _compareStringLiteral === 'undefined' ? 'undefined' : _typeof(_compareStringLiteral)));
          }

          if (_compareStringLiteral == null || typeof _compareStringLiteral === 'boolean') {
            return _compareStringLiteral;
          } else {
            throw new TypeError('Function "compareAnnotations" return value violates contract, expected ?bool got ' + (_compareStringLiteral === null ? 'null' : (typeof _compareStringLiteral === 'undefined' ? 'undefined' : _typeof(_compareStringLiteral)) === 'object' && _compareStringLiteral.constructor ? _compareStringLiteral.constructor.name || '[Unknown Object]' : typeof _compareStringLiteral === 'undefined' ? 'undefined' : _typeof(_compareStringLiteral)));
          }
        }

      case 'NumberTypeAnnotation':
        {
          _maybeNumberAnnotatio = maybeNumberAnnotation(b);

          if (!(_maybeNumberAnnotatio == null || typeof _maybeNumberAnnotatio === 'boolean')) {
            throw new TypeError('Value of variable "_maybeNumberAnnotatio" violates contract, expected ?bool got ' + (_maybeNumberAnnotatio === null ? 'null' : (typeof _maybeNumberAnnotatio === 'undefined' ? 'undefined' : _typeof(_maybeNumberAnnotatio)) === 'object' && _maybeNumberAnnotatio.constructor ? _maybeNumberAnnotatio.constructor.name || '[Unknown Object]' : typeof _maybeNumberAnnotatio === 'undefined' ? 'undefined' : _typeof(_maybeNumberAnnotatio)));
          }

          if (_maybeNumberAnnotatio == null || typeof _maybeNumberAnnotatio === 'boolean') {
            return _maybeNumberAnnotatio;
          } else {
            throw new TypeError('Function "compareAnnotations" return value violates contract, expected ?bool got ' + (_maybeNumberAnnotatio === null ? 'null' : (typeof _maybeNumberAnnotatio === 'undefined' ? 'undefined' : _typeof(_maybeNumberAnnotatio)) === 'object' && _maybeNumberAnnotatio.constructor ? _maybeNumberAnnotatio.constructor.name || '[Unknown Object]' : typeof _maybeNumberAnnotatio === 'undefined' ? 'undefined' : _typeof(_maybeNumberAnnotatio)));
          }
        }

      case 'NumericLiteralTypeAnnotation':
        {
          _compareNumericLitera = compareNumericLiteralAnnotations(a, b);

          if (!(_compareNumericLitera == null || typeof _compareNumericLitera === 'boolean')) {
            throw new TypeError('Value of variable "_compareNumericLitera" violates contract, expected ?bool got ' + (_compareNumericLitera === null ? 'null' : (typeof _compareNumericLitera === 'undefined' ? 'undefined' : _typeof(_compareNumericLitera)) === 'object' && _compareNumericLitera.constructor ? _compareNumericLitera.constructor.name || '[Unknown Object]' : typeof _compareNumericLitera === 'undefined' ? 'undefined' : _typeof(_compareNumericLitera)));
          }

          if (_compareNumericLitera == null || typeof _compareNumericLitera === 'boolean') {
            return _compareNumericLitera;
          } else {
            throw new TypeError('Function "compareAnnotations" return value violates contract, expected ?bool got ' + (_compareNumericLitera === null ? 'null' : (typeof _compareNumericLitera === 'undefined' ? 'undefined' : _typeof(_compareNumericLitera)) === 'object' && _compareNumericLitera.constructor ? _compareNumericLitera.constructor.name || '[Unknown Object]' : typeof _compareNumericLitera === 'undefined' ? 'undefined' : _typeof(_compareNumericLitera)));
          }
        }

      case 'BooleanTypeAnnotation':
        {
          _maybeBooleanAnnotati = maybeBooleanAnnotation(b);

          if (!(_maybeBooleanAnnotati == null || typeof _maybeBooleanAnnotati === 'boolean')) {
            throw new TypeError('Value of variable "_maybeBooleanAnnotati" violates contract, expected ?bool got ' + (_maybeBooleanAnnotati === null ? 'null' : (typeof _maybeBooleanAnnotati === 'undefined' ? 'undefined' : _typeof(_maybeBooleanAnnotati)) === 'object' && _maybeBooleanAnnotati.constructor ? _maybeBooleanAnnotati.constructor.name || '[Unknown Object]' : typeof _maybeBooleanAnnotati === 'undefined' ? 'undefined' : _typeof(_maybeBooleanAnnotati)));
          }

          if (_maybeBooleanAnnotati == null || typeof _maybeBooleanAnnotati === 'boolean') {
            return _maybeBooleanAnnotati;
          } else {
            throw new TypeError('Function "compareAnnotations" return value violates contract, expected ?bool got ' + (_maybeBooleanAnnotati === null ? 'null' : (typeof _maybeBooleanAnnotati === 'undefined' ? 'undefined' : _typeof(_maybeBooleanAnnotati)) === 'object' && _maybeBooleanAnnotati.constructor ? _maybeBooleanAnnotati.constructor.name || '[Unknown Object]' : typeof _maybeBooleanAnnotati === 'undefined' ? 'undefined' : _typeof(_maybeBooleanAnnotati)));
          }
        }

      case 'BooleanLiteralTypeAnnotation':
        {
          _compareBooleanLitera = compareBooleanLiteralAnnotations(a, b);

          if (!(_compareBooleanLitera == null || typeof _compareBooleanLitera === 'boolean')) {
            throw new TypeError('Value of variable "_compareBooleanLitera" violates contract, expected ?bool got ' + (_compareBooleanLitera === null ? 'null' : (typeof _compareBooleanLitera === 'undefined' ? 'undefined' : _typeof(_compareBooleanLitera)) === 'object' && _compareBooleanLitera.constructor ? _compareBooleanLitera.constructor.name || '[Unknown Object]' : typeof _compareBooleanLitera === 'undefined' ? 'undefined' : _typeof(_compareBooleanLitera)));
          }

          if (_compareBooleanLitera == null || typeof _compareBooleanLitera === 'boolean') {
            return _compareBooleanLitera;
          } else {
            throw new TypeError('Function "compareAnnotations" return value violates contract, expected ?bool got ' + (_compareBooleanLitera === null ? 'null' : (typeof _compareBooleanLitera === 'undefined' ? 'undefined' : _typeof(_compareBooleanLitera)) === 'object' && _compareBooleanLitera.constructor ? _compareBooleanLitera.constructor.name || '[Unknown Object]' : typeof _compareBooleanLitera === 'undefined' ? 'undefined' : _typeof(_compareBooleanLitera)));
          }
        }

      case 'FunctionTypeAnnotation':
        {
          _maybeFunctionAnnotat = maybeFunctionAnnotation(b);

          if (!(_maybeFunctionAnnotat == null || typeof _maybeFunctionAnnotat === 'boolean')) {
            throw new TypeError('Value of variable "_maybeFunctionAnnotat" violates contract, expected ?bool got ' + (_maybeFunctionAnnotat === null ? 'null' : (typeof _maybeFunctionAnnotat === 'undefined' ? 'undefined' : _typeof(_maybeFunctionAnnotat)) === 'object' && _maybeFunctionAnnotat.constructor ? _maybeFunctionAnnotat.constructor.name || '[Unknown Object]' : typeof _maybeFunctionAnnotat === 'undefined' ? 'undefined' : _typeof(_maybeFunctionAnnotat)));
          }

          if (_maybeFunctionAnnotat == null || typeof _maybeFunctionAnnotat === 'boolean') {
            return _maybeFunctionAnnotat;
          } else {
            throw new TypeError('Function "compareAnnotations" return value violates contract, expected ?bool got ' + (_maybeFunctionAnnotat === null ? 'null' : (typeof _maybeFunctionAnnotat === 'undefined' ? 'undefined' : _typeof(_maybeFunctionAnnotat)) === 'object' && _maybeFunctionAnnotat.constructor ? _maybeFunctionAnnotat.constructor.name || '[Unknown Object]' : typeof _maybeFunctionAnnotat === 'undefined' ? 'undefined' : _typeof(_maybeFunctionAnnotat)));
          }
        }

      case 'AnyTypeAnnotation':
        {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "compareAnnotations" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }

      case 'MixedTypeAnnotation':
        {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "compareAnnotations" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }

      case 'ObjectTypeAnnotation':
        {
          _compareObjectAnnotat = compareObjectAnnotation(a, b);

          if (!(_compareObjectAnnotat == null || typeof _compareObjectAnnotat === 'boolean')) {
            throw new TypeError('Value of variable "_compareObjectAnnotat" violates contract, expected ?bool got ' + (_compareObjectAnnotat === null ? 'null' : (typeof _compareObjectAnnotat === 'undefined' ? 'undefined' : _typeof(_compareObjectAnnotat)) === 'object' && _compareObjectAnnotat.constructor ? _compareObjectAnnotat.constructor.name || '[Unknown Object]' : typeof _compareObjectAnnotat === 'undefined' ? 'undefined' : _typeof(_compareObjectAnnotat)));
          }

          if (_compareObjectAnnotat == null || typeof _compareObjectAnnotat === 'boolean') {
            return _compareObjectAnnotat;
          } else {
            throw new TypeError('Function "compareAnnotations" return value violates contract, expected ?bool got ' + (_compareObjectAnnotat === null ? 'null' : (typeof _compareObjectAnnotat === 'undefined' ? 'undefined' : _typeof(_compareObjectAnnotat)) === 'object' && _compareObjectAnnotat.constructor ? _compareObjectAnnotat.constructor.name || '[Unknown Object]' : typeof _compareObjectAnnotat === 'undefined' ? 'undefined' : _typeof(_compareObjectAnnotat)));
          }
        }

      case 'ArrayTypeAnnotation':
        {
          _compareArrayAnnotati = compareArrayAnnotation(a, b);

          if (!(_compareArrayAnnotati == null || typeof _compareArrayAnnotati === 'boolean')) {
            throw new TypeError('Value of variable "_compareArrayAnnotati" violates contract, expected ?bool got ' + (_compareArrayAnnotati === null ? 'null' : (typeof _compareArrayAnnotati === 'undefined' ? 'undefined' : _typeof(_compareArrayAnnotati)) === 'object' && _compareArrayAnnotati.constructor ? _compareArrayAnnotati.constructor.name || '[Unknown Object]' : typeof _compareArrayAnnotati === 'undefined' ? 'undefined' : _typeof(_compareArrayAnnotati)));
          }

          if (_compareArrayAnnotati == null || typeof _compareArrayAnnotati === 'boolean') {
            return _compareArrayAnnotati;
          } else {
            throw new TypeError('Function "compareAnnotations" return value violates contract, expected ?bool got ' + (_compareArrayAnnotati === null ? 'null' : (typeof _compareArrayAnnotati === 'undefined' ? 'undefined' : _typeof(_compareArrayAnnotati)) === 'object' && _compareArrayAnnotati.constructor ? _compareArrayAnnotati.constructor.name || '[Unknown Object]' : typeof _compareArrayAnnotati === 'undefined' ? 'undefined' : _typeof(_compareArrayAnnotati)));
          }
        }

      case 'GenericTypeAnnotation':
        {
          _compareGenericAnnota = compareGenericAnnotation(a, b);

          if (!(_compareGenericAnnota == null || typeof _compareGenericAnnota === 'boolean')) {
            throw new TypeError('Value of variable "_compareGenericAnnota" violates contract, expected ?bool got ' + (_compareGenericAnnota === null ? 'null' : (typeof _compareGenericAnnota === 'undefined' ? 'undefined' : _typeof(_compareGenericAnnota)) === 'object' && _compareGenericAnnota.constructor ? _compareGenericAnnota.constructor.name || '[Unknown Object]' : typeof _compareGenericAnnota === 'undefined' ? 'undefined' : _typeof(_compareGenericAnnota)));
          }

          if (_compareGenericAnnota == null || typeof _compareGenericAnnota === 'boolean') {
            return _compareGenericAnnota;
          } else {
            throw new TypeError('Function "compareAnnotations" return value violates contract, expected ?bool got ' + (_compareGenericAnnota === null ? 'null' : (typeof _compareGenericAnnota === 'undefined' ? 'undefined' : _typeof(_compareGenericAnnota)) === 'object' && _compareGenericAnnota.constructor ? _compareGenericAnnota.constructor.name || '[Unknown Object]' : typeof _compareGenericAnnota === 'undefined' ? 'undefined' : _typeof(_compareGenericAnnota)));
          }
        }

      case 'TupleTypeAnnotation':
        {
          _compareTupleAnnotati = compareTupleAnnotation(a, b);

          if (!(_compareTupleAnnotati == null || typeof _compareTupleAnnotati === 'boolean')) {
            throw new TypeError('Value of variable "_compareTupleAnnotati" violates contract, expected ?bool got ' + (_compareTupleAnnotati === null ? 'null' : (typeof _compareTupleAnnotati === 'undefined' ? 'undefined' : _typeof(_compareTupleAnnotati)) === 'object' && _compareTupleAnnotati.constructor ? _compareTupleAnnotati.constructor.name || '[Unknown Object]' : typeof _compareTupleAnnotati === 'undefined' ? 'undefined' : _typeof(_compareTupleAnnotati)));
          }

          if (_compareTupleAnnotati == null || typeof _compareTupleAnnotati === 'boolean') {
            return _compareTupleAnnotati;
          } else {
            throw new TypeError('Function "compareAnnotations" return value violates contract, expected ?bool got ' + (_compareTupleAnnotati === null ? 'null' : (typeof _compareTupleAnnotati === 'undefined' ? 'undefined' : _typeof(_compareTupleAnnotati)) === 'object' && _compareTupleAnnotati.constructor ? _compareTupleAnnotati.constructor.name || '[Unknown Object]' : typeof _compareTupleAnnotati === 'undefined' ? 'undefined' : _typeof(_compareTupleAnnotati)));
          }
        }

      case 'UnionTypeAnnotation':
        {
          _compareUnionAnnotati = compareUnionAnnotation(a, b);

          if (!(_compareUnionAnnotati == null || typeof _compareUnionAnnotati === 'boolean')) {
            throw new TypeError('Value of variable "_compareUnionAnnotati" violates contract, expected ?bool got ' + (_compareUnionAnnotati === null ? 'null' : (typeof _compareUnionAnnotati === 'undefined' ? 'undefined' : _typeof(_compareUnionAnnotati)) === 'object' && _compareUnionAnnotati.constructor ? _compareUnionAnnotati.constructor.name || '[Unknown Object]' : typeof _compareUnionAnnotati === 'undefined' ? 'undefined' : _typeof(_compareUnionAnnotati)));
          }

          if (_compareUnionAnnotati == null || typeof _compareUnionAnnotati === 'boolean') {
            return _compareUnionAnnotati;
          } else {
            throw new TypeError('Function "compareAnnotations" return value violates contract, expected ?bool got ' + (_compareUnionAnnotati === null ? 'null' : (typeof _compareUnionAnnotati === 'undefined' ? 'undefined' : _typeof(_compareUnionAnnotati)) === 'object' && _compareUnionAnnotati.constructor ? _compareUnionAnnotati.constructor.name || '[Unknown Object]' : typeof _compareUnionAnnotati === 'undefined' ? 'undefined' : _typeof(_compareUnionAnnotati)));
          }
        }

      case 'IntersectionTypeAnnotation':
        {
          _compareIntersectionA = compareIntersectionAnnotation(a, b);

          if (_compareIntersectionA == null || typeof _compareIntersectionA === 'boolean') {
            return _compareIntersectionA;
          } else {
            throw new TypeError('Function "compareAnnotations" return value violates contract, expected ?bool got ' + (_compareIntersectionA === null ? 'null' : (typeof _compareIntersectionA === 'undefined' ? 'undefined' : _typeof(_compareIntersectionA)) === 'object' && _compareIntersectionA.constructor ? _compareIntersectionA.constructor.name || '[Unknown Object]' : typeof _compareIntersectionA === 'undefined' ? 'undefined' : _typeof(_compareIntersectionA)));
          }
        }

      case 'NullableTypeAnnotation':
        {
          _compareNullableAnnot = compareNullableAnnotation(a, b);

          if (!(_compareNullableAnnot == null || typeof _compareNullableAnnot === 'boolean')) {
            throw new TypeError('Value of variable "_compareNullableAnnot" violates contract, expected ?bool got ' + (_compareNullableAnnot === null ? 'null' : (typeof _compareNullableAnnot === 'undefined' ? 'undefined' : _typeof(_compareNullableAnnot)) === 'object' && _compareNullableAnnot.constructor ? _compareNullableAnnot.constructor.name || '[Unknown Object]' : typeof _compareNullableAnnot === 'undefined' ? 'undefined' : _typeof(_compareNullableAnnot)));
          }

          if (_compareNullableAnnot == null || typeof _compareNullableAnnot === 'boolean') {
            return _compareNullableAnnot;
          } else {
            throw new TypeError('Function "compareAnnotations" return value violates contract, expected ?bool got ' + (_compareNullableAnnot === null ? 'null' : (typeof _compareNullableAnnot === 'undefined' ? 'undefined' : _typeof(_compareNullableAnnot)) === 'object' && _compareNullableAnnot.constructor ? _compareNullableAnnot.constructor.name || '[Unknown Object]' : typeof _compareNullableAnnot === 'undefined' ? 'undefined' : _typeof(_compareNullableAnnot)));
          }
        }

      default:
        {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "compareAnnotations" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }

    }
  }

  function compareStringLiteralAnnotations(a, b) {
    if (!StringLiteralTypeAnnotation(a)) {
      throw new TypeError('Value of argument "a" violates contract, expected StringLiteralTypeAnnotation got ' + (a === null ? 'null' : (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' && a.constructor ? a.constructor.name || '[Unknown Object]' : typeof a === 'undefined' ? 'undefined' : _typeof(a)));
    }

    if (!TypeAnnotation(b)) {
      throw new TypeError('Value of argument "b" violates contract, expected TypeAnnotation got ' + (b === null ? 'null' : (typeof b === 'undefined' ? 'undefined' : _typeof(b)) === 'object' && b.constructor ? b.constructor.name || '[Unknown Object]' : typeof b === 'undefined' ? 'undefined' : _typeof(b)));
    }

    if (b.type === 'StringLiteralTypeAnnotation') {
      return a.value === b.value;
    } else {
      var _maybeStringAnnotatio2;

      _maybeStringAnnotatio2 = maybeStringAnnotation(b);

      if (!(_maybeStringAnnotatio2 == null || typeof _maybeStringAnnotatio2 === 'boolean')) {
        throw new TypeError('Value of variable "_maybeStringAnnotatio2" violates contract, expected ?bool got ' + (_maybeStringAnnotatio2 === null ? 'null' : (typeof _maybeStringAnnotatio2 === 'undefined' ? 'undefined' : _typeof(_maybeStringAnnotatio2)) === 'object' && _maybeStringAnnotatio2.constructor ? _maybeStringAnnotatio2.constructor.name || '[Unknown Object]' : typeof _maybeStringAnnotatio2 === 'undefined' ? 'undefined' : _typeof(_maybeStringAnnotatio2)));
      }

      if (_maybeStringAnnotatio2 == null || typeof _maybeStringAnnotatio2 === 'boolean') {
        return _maybeStringAnnotatio2;
      } else {
        throw new TypeError('Function "compareStringLiteralAnnotations" return value violates contract, expected ?bool got ' + (_maybeStringAnnotatio2 === null ? 'null' : (typeof _maybeStringAnnotatio2 === 'undefined' ? 'undefined' : _typeof(_maybeStringAnnotatio2)) === 'object' && _maybeStringAnnotatio2.constructor ? _maybeStringAnnotatio2.constructor.name || '[Unknown Object]' : typeof _maybeStringAnnotatio2 === 'undefined' ? 'undefined' : _typeof(_maybeStringAnnotatio2)));
      }
    }
  }

  function compareBooleanLiteralAnnotations(a, b) {
    if (!BooleanLiteralTypeAnnotation(a)) {
      throw new TypeError('Value of argument "a" violates contract, expected BooleanLiteralTypeAnnotation got ' + (a === null ? 'null' : (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' && a.constructor ? a.constructor.name || '[Unknown Object]' : typeof a === 'undefined' ? 'undefined' : _typeof(a)));
    }

    if (!TypeAnnotation(b)) {
      throw new TypeError('Value of argument "b" violates contract, expected TypeAnnotation got ' + (b === null ? 'null' : (typeof b === 'undefined' ? 'undefined' : _typeof(b)) === 'object' && b.constructor ? b.constructor.name || '[Unknown Object]' : typeof b === 'undefined' ? 'undefined' : _typeof(b)));
    }

    if (b.type === 'BooleanLiteralTypeAnnotation') {
      return a.value === b.value;
    } else {
      var _maybeBooleanAnnotati2;

      _maybeBooleanAnnotati2 = maybeBooleanAnnotation(b);

      if (!(_maybeBooleanAnnotati2 == null || typeof _maybeBooleanAnnotati2 === 'boolean')) {
        throw new TypeError('Value of variable "_maybeBooleanAnnotati2" violates contract, expected ?bool got ' + (_maybeBooleanAnnotati2 === null ? 'null' : (typeof _maybeBooleanAnnotati2 === 'undefined' ? 'undefined' : _typeof(_maybeBooleanAnnotati2)) === 'object' && _maybeBooleanAnnotati2.constructor ? _maybeBooleanAnnotati2.constructor.name || '[Unknown Object]' : typeof _maybeBooleanAnnotati2 === 'undefined' ? 'undefined' : _typeof(_maybeBooleanAnnotati2)));
      }

      if (_maybeBooleanAnnotati2 == null || typeof _maybeBooleanAnnotati2 === 'boolean') {
        return _maybeBooleanAnnotati2;
      } else {
        throw new TypeError('Function "compareBooleanLiteralAnnotations" return value violates contract, expected ?bool got ' + (_maybeBooleanAnnotati2 === null ? 'null' : (typeof _maybeBooleanAnnotati2 === 'undefined' ? 'undefined' : _typeof(_maybeBooleanAnnotati2)) === 'object' && _maybeBooleanAnnotati2.constructor ? _maybeBooleanAnnotati2.constructor.name || '[Unknown Object]' : typeof _maybeBooleanAnnotati2 === 'undefined' ? 'undefined' : _typeof(_maybeBooleanAnnotati2)));
      }
    }
  }

  function compareNumericLiteralAnnotations(a, b) {
    if (!NumericLiteralTypeAnnotation(a)) {
      throw new TypeError('Value of argument "a" violates contract, expected NumericLiteralTypeAnnotation got ' + (a === null ? 'null' : (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' && a.constructor ? a.constructor.name || '[Unknown Object]' : typeof a === 'undefined' ? 'undefined' : _typeof(a)));
    }

    if (!TypeAnnotation(b)) {
      throw new TypeError('Value of argument "b" violates contract, expected TypeAnnotation got ' + (b === null ? 'null' : (typeof b === 'undefined' ? 'undefined' : _typeof(b)) === 'object' && b.constructor ? b.constructor.name || '[Unknown Object]' : typeof b === 'undefined' ? 'undefined' : _typeof(b)));
    }

    if (b.type === 'NumericLiteralTypeAnnotation') {
      return a.value === b.value;
    } else {
      var _maybeNumberAnnotatio2;

      _maybeNumberAnnotatio2 = maybeNumberAnnotation(b);

      if (!(_maybeNumberAnnotatio2 == null || typeof _maybeNumberAnnotatio2 === 'boolean')) {
        throw new TypeError('Value of variable "_maybeNumberAnnotatio2" violates contract, expected ?bool got ' + (_maybeNumberAnnotatio2 === null ? 'null' : (typeof _maybeNumberAnnotatio2 === 'undefined' ? 'undefined' : _typeof(_maybeNumberAnnotatio2)) === 'object' && _maybeNumberAnnotatio2.constructor ? _maybeNumberAnnotatio2.constructor.name || '[Unknown Object]' : typeof _maybeNumberAnnotatio2 === 'undefined' ? 'undefined' : _typeof(_maybeNumberAnnotatio2)));
      }

      if (_maybeNumberAnnotatio2 == null || typeof _maybeNumberAnnotatio2 === 'boolean') {
        return _maybeNumberAnnotatio2;
      } else {
        throw new TypeError('Function "compareNumericLiteralAnnotations" return value violates contract, expected ?bool got ' + (_maybeNumberAnnotatio2 === null ? 'null' : (typeof _maybeNumberAnnotatio2 === 'undefined' ? 'undefined' : _typeof(_maybeNumberAnnotatio2)) === 'object' && _maybeNumberAnnotatio2.constructor ? _maybeNumberAnnotatio2.constructor.name || '[Unknown Object]' : typeof _maybeNumberAnnotatio2 === 'undefined' ? 'undefined' : _typeof(_maybeNumberAnnotatio2)));
      }
    }
  }

  function unionComparer(a, b, comparator) {
    if (!TypeAnnotation(a)) {
      throw new TypeError('Value of argument "a" violates contract, expected TypeAnnotation got ' + (a === null ? 'null' : (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' && a.constructor ? a.constructor.name || '[Unknown Object]' : typeof a === 'undefined' ? 'undefined' : _typeof(a)));
    }

    if (!TypeAnnotation(b)) {
      throw new TypeError('Value of argument "b" violates contract, expected TypeAnnotation got ' + (b === null ? 'null' : (typeof b === 'undefined' ? 'undefined' : _typeof(b)) === 'object' && b.constructor ? b.constructor.name || '[Unknown Object]' : typeof b === 'undefined' ? 'undefined' : _typeof(b)));
    }

    if (!(typeof comparator === 'function')) {
      throw new TypeError('Value of argument "comparator" violates contract, expected (a: TypeAnnotation, b: TypeAnnotation) => ?bool got ' + (comparator === null ? 'null' : (typeof comparator === 'undefined' ? 'undefined' : _typeof(comparator)) === 'object' && comparator.constructor ? comparator.constructor.name || '[Unknown Object]' : typeof comparator === 'undefined' ? 'undefined' : _typeof(comparator)));
    }

    var falseCount = 0;
    var trueCount = 0;
    if (!a.types) {
      if (null == null || typeof null === 'boolean') {
        return null;
      } else {
        throw new TypeError('Function "unionComparer" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
      }
    }
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = a.types[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _type2 = _step2.value;

        var result = comparator(_type2, b);
        if (result === true) {
          if (b.type !== 'UnionTypeAnnotation') {
            return true;
          }
          trueCount++;
        } else if (result === false) {
          if (b.type === 'UnionTypeAnnotation') {
            return false;
          }
          falseCount++;
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    if (falseCount === a.types.length) {
      return false;
    } else if (trueCount === a.types.length) {
      return true;
    } else {
      if (null == null || typeof null === 'boolean') {
        return null;
      } else {
        throw new TypeError('Function "unionComparer" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
      }
    }
  }

  function intersectionComparer(a, b, comparator) {
    if (!TypeAnnotation(a)) {
      throw new TypeError('Value of argument "a" violates contract, expected TypeAnnotation got ' + (a === null ? 'null' : (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' && a.constructor ? a.constructor.name || '[Unknown Object]' : typeof a === 'undefined' ? 'undefined' : _typeof(a)));
    }

    if (!TypeAnnotation(b)) {
      throw new TypeError('Value of argument "b" violates contract, expected TypeAnnotation got ' + (b === null ? 'null' : (typeof b === 'undefined' ? 'undefined' : _typeof(b)) === 'object' && b.constructor ? b.constructor.name || '[Unknown Object]' : typeof b === 'undefined' ? 'undefined' : _typeof(b)));
    }

    if (!(typeof comparator === 'function')) {
      throw new TypeError('Value of argument "comparator" violates contract, expected (a: TypeAnnotation, b: TypeAnnotation) => ?bool got ' + (comparator === null ? 'null' : (typeof comparator === 'undefined' ? 'undefined' : _typeof(comparator)) === 'object' && comparator.constructor ? comparator.constructor.name || '[Unknown Object]' : typeof comparator === 'undefined' ? 'undefined' : _typeof(comparator)));
    }

    var falseCount = 0;
    var trueCount = 0;
    if (!a.types) {
      if (null == null || typeof null === 'boolean') {
        return null;
      } else {
        throw new TypeError('Function "intersectionComparer" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
      }
    }
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = a.types[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var _type3 = _step3.value;

        var result = comparator(_type3, b);
        if (result === true) {
          trueCount++;
        } else if (result === false) {
          return false;
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    if (trueCount === a.types.length) {
      return true;
    } else {
      if (null == null || typeof null === 'boolean') {
        return null;
      } else {
        throw new TypeError('Function "intersectionComparer" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
      }
    }
  }

  function compareObjectAnnotation(a, b) {
    var _compareObjectAnnotat2, _unionComparer, _intersectionComparer;

    if (!Node(a)) {
      throw new TypeError('Value of argument "a" violates contract, expected Node got ' + (a === null ? 'null' : (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' && a.constructor ? a.constructor.name || '[Unknown Object]' : typeof a === 'undefined' ? 'undefined' : _typeof(a)));
    }

    if (!Node(b)) {
      throw new TypeError('Value of argument "b" violates contract, expected Node got ' + (b === null ? 'null' : (typeof b === 'undefined' ? 'undefined' : _typeof(b)) === 'object' && b.constructor ? b.constructor.name || '[Unknown Object]' : typeof b === 'undefined' ? 'undefined' : _typeof(b)));
    }

    switch (b.type) {
      case 'ObjectTypeAnnotation':
        break;
      case 'TypeAnnotation':
      case 'FunctonTypeParam':
      case 'NullableTypeAnnotation':
        {
          _compareObjectAnnotat2 = compareObjectAnnotation(a, b.typeAnnotation);

          if (!(_compareObjectAnnotat2 == null || typeof _compareObjectAnnotat2 === 'boolean')) {
            throw new TypeError('Value of variable "_compareObjectAnnotat2" violates contract, expected ?bool got ' + (_compareObjectAnnotat2 === null ? 'null' : (typeof _compareObjectAnnotat2 === 'undefined' ? 'undefined' : _typeof(_compareObjectAnnotat2)) === 'object' && _compareObjectAnnotat2.constructor ? _compareObjectAnnotat2.constructor.name || '[Unknown Object]' : typeof _compareObjectAnnotat2 === 'undefined' ? 'undefined' : _typeof(_compareObjectAnnotat2)));
          }

          if (_compareObjectAnnotat2 == null || typeof _compareObjectAnnotat2 === 'boolean') {
            return _compareObjectAnnotat2;
          } else {
            throw new TypeError('Function "compareObjectAnnotation" return value violates contract, expected ?bool got ' + (_compareObjectAnnotat2 === null ? 'null' : (typeof _compareObjectAnnotat2 === 'undefined' ? 'undefined' : _typeof(_compareObjectAnnotat2)) === 'object' && _compareObjectAnnotat2.constructor ? _compareObjectAnnotat2.constructor.name || '[Unknown Object]' : typeof _compareObjectAnnotat2 === 'undefined' ? 'undefined' : _typeof(_compareObjectAnnotat2)));
          }
        }

      case 'UnionTypeAnnotation':
        {
          _unionComparer = unionComparer(a, b, compareObjectAnnotation);

          if (!(_unionComparer == null || typeof _unionComparer === 'boolean')) {
            throw new TypeError('Value of variable "_unionComparer" violates contract, expected ?bool got ' + (_unionComparer === null ? 'null' : (typeof _unionComparer === 'undefined' ? 'undefined' : _typeof(_unionComparer)) === 'object' && _unionComparer.constructor ? _unionComparer.constructor.name || '[Unknown Object]' : typeof _unionComparer === 'undefined' ? 'undefined' : _typeof(_unionComparer)));
          }

          if (_unionComparer == null || typeof _unionComparer === 'boolean') {
            return _unionComparer;
          } else {
            throw new TypeError('Function "compareObjectAnnotation" return value violates contract, expected ?bool got ' + (_unionComparer === null ? 'null' : (typeof _unionComparer === 'undefined' ? 'undefined' : _typeof(_unionComparer)) === 'object' && _unionComparer.constructor ? _unionComparer.constructor.name || '[Unknown Object]' : typeof _unionComparer === 'undefined' ? 'undefined' : _typeof(_unionComparer)));
          }
        }

      case 'IntersectionTypeAnnotation':
        {
          _intersectionComparer = intersectionComparer(a, b, compareObjectAnnotation);

          if (!(_intersectionComparer == null || typeof _intersectionComparer === 'boolean')) {
            throw new TypeError('Value of variable "_intersectionComparer" violates contract, expected ?bool got ' + (_intersectionComparer === null ? 'null' : (typeof _intersectionComparer === 'undefined' ? 'undefined' : _typeof(_intersectionComparer)) === 'object' && _intersectionComparer.constructor ? _intersectionComparer.constructor.name || '[Unknown Object]' : typeof _intersectionComparer === 'undefined' ? 'undefined' : _typeof(_intersectionComparer)));
          }

          if (_intersectionComparer == null || typeof _intersectionComparer === 'boolean') {
            return _intersectionComparer;
          } else {
            throw new TypeError('Function "compareObjectAnnotation" return value violates contract, expected ?bool got ' + (_intersectionComparer === null ? 'null' : (typeof _intersectionComparer === 'undefined' ? 'undefined' : _typeof(_intersectionComparer)) === 'object' && _intersectionComparer.constructor ? _intersectionComparer.constructor.name || '[Unknown Object]' : typeof _intersectionComparer === 'undefined' ? 'undefined' : _typeof(_intersectionComparer)));
          }
        }

      case 'VoidTypeAnnotation':
      case 'BooleanTypeAnnotation':
      case 'BooleanLiteralTypeAnnotation':
      case 'StringTypeAnnotation':
      case 'StringLiteralTypeAnnotation':
      case 'NumberTypeAnnotation':
      case 'NumericLiteralTypeAnnotation':
      case 'FunctionTypeAnnotation':
        return false;
      default:
        {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "compareObjectAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }

    }

    // We're comparing two object annotations.
    var allTrue = true;
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = a.properties[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var aprop = _step4.value;

        var found = false;
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = b.properties[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var bprop = _step5.value;

            if (bprop.key.name === aprop.key.name) {
              var result = compareAnnotations(aprop.value, bprop.value);
              if (result === false) {
                return false;
              } else {
                found = result;

                if (!(found == null || typeof found === 'boolean')) {
                  throw new TypeError('Value of variable "found" violates contract, expected ?bool got ' + (found === null ? 'null' : (typeof found === 'undefined' ? 'undefined' : _typeof(found)) === 'object' && found.constructor ? found.constructor.name || '[Unknown Object]' : typeof found === 'undefined' ? 'undefined' : _typeof(found)));
                }
              }
              break;
            }
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5.return) {
              _iterator5.return();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }

        if (found === false) {
          return false;
        }
        allTrue = allTrue && found === true;
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    return allTrue ? true : null;
  }

  function compareArrayAnnotation(a, b) {
    var _compareArrayAnnotati2, _unionComparer2, _intersectionComparer2;

    if (!Node(a)) {
      throw new TypeError('Value of argument "a" violates contract, expected Node got ' + (a === null ? 'null' : (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' && a.constructor ? a.constructor.name || '[Unknown Object]' : typeof a === 'undefined' ? 'undefined' : _typeof(a)));
    }

    if (!Node(b)) {
      throw new TypeError('Value of argument "b" violates contract, expected Node got ' + (b === null ? 'null' : (typeof b === 'undefined' ? 'undefined' : _typeof(b)) === 'object' && b.constructor ? b.constructor.name || '[Unknown Object]' : typeof b === 'undefined' ? 'undefined' : _typeof(b)));
    }

    switch (b.type) {
      case 'TypeAnnotation':
      case 'FunctonTypeParam':
      case 'NullableTypeAnnotation':
        {
          _compareArrayAnnotati2 = compareArrayAnnotation(a, b.typeAnnotation);

          if (!(_compareArrayAnnotati2 == null || typeof _compareArrayAnnotati2 === 'boolean')) {
            throw new TypeError('Value of variable "_compareArrayAnnotati2" violates contract, expected ?bool got ' + (_compareArrayAnnotati2 === null ? 'null' : (typeof _compareArrayAnnotati2 === 'undefined' ? 'undefined' : _typeof(_compareArrayAnnotati2)) === 'object' && _compareArrayAnnotati2.constructor ? _compareArrayAnnotati2.constructor.name || '[Unknown Object]' : typeof _compareArrayAnnotati2 === 'undefined' ? 'undefined' : _typeof(_compareArrayAnnotati2)));
          }

          if (_compareArrayAnnotati2 == null || typeof _compareArrayAnnotati2 === 'boolean') {
            return _compareArrayAnnotati2;
          } else {
            throw new TypeError('Function "compareArrayAnnotation" return value violates contract, expected ?bool got ' + (_compareArrayAnnotati2 === null ? 'null' : (typeof _compareArrayAnnotati2 === 'undefined' ? 'undefined' : _typeof(_compareArrayAnnotati2)) === 'object' && _compareArrayAnnotati2.constructor ? _compareArrayAnnotati2.constructor.name || '[Unknown Object]' : typeof _compareArrayAnnotati2 === 'undefined' ? 'undefined' : _typeof(_compareArrayAnnotati2)));
          }
        }

      case 'UnionTypeAnnotation':
        {
          _unionComparer2 = unionComparer(a, b, compareArrayAnnotation);

          if (!(_unionComparer2 == null || typeof _unionComparer2 === 'boolean')) {
            throw new TypeError('Value of variable "_unionComparer2" violates contract, expected ?bool got ' + (_unionComparer2 === null ? 'null' : (typeof _unionComparer2 === 'undefined' ? 'undefined' : _typeof(_unionComparer2)) === 'object' && _unionComparer2.constructor ? _unionComparer2.constructor.name || '[Unknown Object]' : typeof _unionComparer2 === 'undefined' ? 'undefined' : _typeof(_unionComparer2)));
          }

          if (_unionComparer2 == null || typeof _unionComparer2 === 'boolean') {
            return _unionComparer2;
          } else {
            throw new TypeError('Function "compareArrayAnnotation" return value violates contract, expected ?bool got ' + (_unionComparer2 === null ? 'null' : (typeof _unionComparer2 === 'undefined' ? 'undefined' : _typeof(_unionComparer2)) === 'object' && _unionComparer2.constructor ? _unionComparer2.constructor.name || '[Unknown Object]' : typeof _unionComparer2 === 'undefined' ? 'undefined' : _typeof(_unionComparer2)));
          }
        }

      case 'IntersectionTypeAnnotation':
        {
          _intersectionComparer2 = intersectionComparer(a, b, compareArrayAnnotation);

          if (!(_intersectionComparer2 == null || typeof _intersectionComparer2 === 'boolean')) {
            throw new TypeError('Value of variable "_intersectionComparer2" violates contract, expected ?bool got ' + (_intersectionComparer2 === null ? 'null' : (typeof _intersectionComparer2 === 'undefined' ? 'undefined' : _typeof(_intersectionComparer2)) === 'object' && _intersectionComparer2.constructor ? _intersectionComparer2.constructor.name || '[Unknown Object]' : typeof _intersectionComparer2 === 'undefined' ? 'undefined' : _typeof(_intersectionComparer2)));
          }

          if (_intersectionComparer2 == null || typeof _intersectionComparer2 === 'boolean') {
            return _intersectionComparer2;
          } else {
            throw new TypeError('Function "compareArrayAnnotation" return value violates contract, expected ?bool got ' + (_intersectionComparer2 === null ? 'null' : (typeof _intersectionComparer2 === 'undefined' ? 'undefined' : _typeof(_intersectionComparer2)) === 'object' && _intersectionComparer2.constructor ? _intersectionComparer2.constructor.name || '[Unknown Object]' : typeof _intersectionComparer2 === 'undefined' ? 'undefined' : _typeof(_intersectionComparer2)));
          }
        }

      case 'VoidTypeAnnotation':
      case 'BooleanTypeAnnotation':
      case 'BooleanLiteralTypeAnnotation':
      case 'StringTypeAnnotation':
      case 'StringLiteralTypeAnnotation':
      case 'NumberTypeAnnotation':
      case 'NumericLiteralTypeAnnotation':
      case 'FunctionTypeAnnotation':
        return false;
      default:
        {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "compareArrayAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }

    }
  }

  function compareGenericAnnotation(a, b) {
    var _compareGenericAnnota2, _unionComparer3, _intersectionComparer3;

    if (!Node(a)) {
      throw new TypeError('Value of argument "a" violates contract, expected Node got ' + (a === null ? 'null' : (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' && a.constructor ? a.constructor.name || '[Unknown Object]' : typeof a === 'undefined' ? 'undefined' : _typeof(a)));
    }

    if (!Node(b)) {
      throw new TypeError('Value of argument "b" violates contract, expected Node got ' + (b === null ? 'null' : (typeof b === 'undefined' ? 'undefined' : _typeof(b)) === 'object' && b.constructor ? b.constructor.name || '[Unknown Object]' : typeof b === 'undefined' ? 'undefined' : _typeof(b)));
    }

    switch (b.type) {
      case 'TypeAnnotation':
      case 'FunctonTypeParam':
      case 'NullableTypeAnnotation':
        {
          _compareGenericAnnota2 = compareGenericAnnotation(a, b.typeAnnotation);

          if (!(_compareGenericAnnota2 == null || typeof _compareGenericAnnota2 === 'boolean')) {
            throw new TypeError('Value of variable "_compareGenericAnnota2" violates contract, expected ?bool got ' + (_compareGenericAnnota2 === null ? 'null' : (typeof _compareGenericAnnota2 === 'undefined' ? 'undefined' : _typeof(_compareGenericAnnota2)) === 'object' && _compareGenericAnnota2.constructor ? _compareGenericAnnota2.constructor.name || '[Unknown Object]' : typeof _compareGenericAnnota2 === 'undefined' ? 'undefined' : _typeof(_compareGenericAnnota2)));
          }

          if (_compareGenericAnnota2 == null || typeof _compareGenericAnnota2 === 'boolean') {
            return _compareGenericAnnota2;
          } else {
            throw new TypeError('Function "compareGenericAnnotation" return value violates contract, expected ?bool got ' + (_compareGenericAnnota2 === null ? 'null' : (typeof _compareGenericAnnota2 === 'undefined' ? 'undefined' : _typeof(_compareGenericAnnota2)) === 'object' && _compareGenericAnnota2.constructor ? _compareGenericAnnota2.constructor.name || '[Unknown Object]' : typeof _compareGenericAnnota2 === 'undefined' ? 'undefined' : _typeof(_compareGenericAnnota2)));
          }
        }

      case 'GenericTypeAnnotation':
        if (b.id.name === a.id.name) {
          return true;
        } else {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "compareGenericAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }
      case 'UnionTypeAnnotation':
        {
          _unionComparer3 = unionComparer(a, b, compareGenericAnnotation);

          if (!(_unionComparer3 == null || typeof _unionComparer3 === 'boolean')) {
            throw new TypeError('Value of variable "_unionComparer3" violates contract, expected ?bool got ' + (_unionComparer3 === null ? 'null' : (typeof _unionComparer3 === 'undefined' ? 'undefined' : _typeof(_unionComparer3)) === 'object' && _unionComparer3.constructor ? _unionComparer3.constructor.name || '[Unknown Object]' : typeof _unionComparer3 === 'undefined' ? 'undefined' : _typeof(_unionComparer3)));
          }

          if (_unionComparer3 == null || typeof _unionComparer3 === 'boolean') {
            return _unionComparer3;
          } else {
            throw new TypeError('Function "compareGenericAnnotation" return value violates contract, expected ?bool got ' + (_unionComparer3 === null ? 'null' : (typeof _unionComparer3 === 'undefined' ? 'undefined' : _typeof(_unionComparer3)) === 'object' && _unionComparer3.constructor ? _unionComparer3.constructor.name || '[Unknown Object]' : typeof _unionComparer3 === 'undefined' ? 'undefined' : _typeof(_unionComparer3)));
          }
        }

      case 'IntersectionTypeAnnotation':
        {
          _intersectionComparer3 = intersectionComparer(a, b, compareGenericAnnotation);

          if (!(_intersectionComparer3 == null || typeof _intersectionComparer3 === 'boolean')) {
            throw new TypeError('Value of variable "_intersectionComparer3" violates contract, expected ?bool got ' + (_intersectionComparer3 === null ? 'null' : (typeof _intersectionComparer3 === 'undefined' ? 'undefined' : _typeof(_intersectionComparer3)) === 'object' && _intersectionComparer3.constructor ? _intersectionComparer3.constructor.name || '[Unknown Object]' : typeof _intersectionComparer3 === 'undefined' ? 'undefined' : _typeof(_intersectionComparer3)));
          }

          if (_intersectionComparer3 == null || typeof _intersectionComparer3 === 'boolean') {
            return _intersectionComparer3;
          } else {
            throw new TypeError('Function "compareGenericAnnotation" return value violates contract, expected ?bool got ' + (_intersectionComparer3 === null ? 'null' : (typeof _intersectionComparer3 === 'undefined' ? 'undefined' : _typeof(_intersectionComparer3)) === 'object' && _intersectionComparer3.constructor ? _intersectionComparer3.constructor.name || '[Unknown Object]' : typeof _intersectionComparer3 === 'undefined' ? 'undefined' : _typeof(_intersectionComparer3)));
          }
        }

      default:
        {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "compareGenericAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }

    }
  }

  function compareTupleAnnotation(a, b) {
    var _compareTupleAnnotati2, _unionComparer4, _intersectionComparer4;

    if (!Node(a)) {
      throw new TypeError('Value of argument "a" violates contract, expected Node got ' + (a === null ? 'null' : (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' && a.constructor ? a.constructor.name || '[Unknown Object]' : typeof a === 'undefined' ? 'undefined' : _typeof(a)));
    }

    if (!Node(b)) {
      throw new TypeError('Value of argument "b" violates contract, expected Node got ' + (b === null ? 'null' : (typeof b === 'undefined' ? 'undefined' : _typeof(b)) === 'object' && b.constructor ? b.constructor.name || '[Unknown Object]' : typeof b === 'undefined' ? 'undefined' : _typeof(b)));
    }

    if (b.type === 'TupleTypeAnnotation') {
      var _a$types$every;

      if (b.types.length === 0) {
        if (null == null || typeof null === 'boolean') {
          return null;
        } else {
          throw new TypeError('Function "compareTupleAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
        }
      } else if (b.types.length < a.types.length) {
        return false;
      }
      _a$types$every = a.types.every(function (type, index) {
        return compareAnnotations(type, b.types[index]);
      });

      if (_a$types$every == null || typeof _a$types$every === 'boolean') {
        return _a$types$every;
      } else {
        throw new TypeError('Function "compareTupleAnnotation" return value violates contract, expected ?bool got ' + (_a$types$every === null ? 'null' : (typeof _a$types$every === 'undefined' ? 'undefined' : _typeof(_a$types$every)) === 'object' && _a$types$every.constructor ? _a$types$every.constructor.name || '[Unknown Object]' : typeof _a$types$every === 'undefined' ? 'undefined' : _typeof(_a$types$every)));
      }
    }
    switch (b.type) {
      case 'TypeAnnotation':
      case 'FunctonTypeParam':
      case 'NullableTypeAnnotation':
        {
          _compareTupleAnnotati2 = compareTupleAnnotation(a, b.typeAnnotation);

          if (!(_compareTupleAnnotati2 == null || typeof _compareTupleAnnotati2 === 'boolean')) {
            throw new TypeError('Value of variable "_compareTupleAnnotati2" violates contract, expected ?bool got ' + (_compareTupleAnnotati2 === null ? 'null' : (typeof _compareTupleAnnotati2 === 'undefined' ? 'undefined' : _typeof(_compareTupleAnnotati2)) === 'object' && _compareTupleAnnotati2.constructor ? _compareTupleAnnotati2.constructor.name || '[Unknown Object]' : typeof _compareTupleAnnotati2 === 'undefined' ? 'undefined' : _typeof(_compareTupleAnnotati2)));
          }

          if (_compareTupleAnnotati2 == null || typeof _compareTupleAnnotati2 === 'boolean') {
            return _compareTupleAnnotati2;
          } else {
            throw new TypeError('Function "compareTupleAnnotation" return value violates contract, expected ?bool got ' + (_compareTupleAnnotati2 === null ? 'null' : (typeof _compareTupleAnnotati2 === 'undefined' ? 'undefined' : _typeof(_compareTupleAnnotati2)) === 'object' && _compareTupleAnnotati2.constructor ? _compareTupleAnnotati2.constructor.name || '[Unknown Object]' : typeof _compareTupleAnnotati2 === 'undefined' ? 'undefined' : _typeof(_compareTupleAnnotati2)));
          }
        }

      case 'UnionTypeAnnotation':
        {
          _unionComparer4 = unionComparer(a, b, compareTupleAnnotation);

          if (!(_unionComparer4 == null || typeof _unionComparer4 === 'boolean')) {
            throw new TypeError('Value of variable "_unionComparer4" violates contract, expected ?bool got ' + (_unionComparer4 === null ? 'null' : (typeof _unionComparer4 === 'undefined' ? 'undefined' : _typeof(_unionComparer4)) === 'object' && _unionComparer4.constructor ? _unionComparer4.constructor.name || '[Unknown Object]' : typeof _unionComparer4 === 'undefined' ? 'undefined' : _typeof(_unionComparer4)));
          }

          if (_unionComparer4 == null || typeof _unionComparer4 === 'boolean') {
            return _unionComparer4;
          } else {
            throw new TypeError('Function "compareTupleAnnotation" return value violates contract, expected ?bool got ' + (_unionComparer4 === null ? 'null' : (typeof _unionComparer4 === 'undefined' ? 'undefined' : _typeof(_unionComparer4)) === 'object' && _unionComparer4.constructor ? _unionComparer4.constructor.name || '[Unknown Object]' : typeof _unionComparer4 === 'undefined' ? 'undefined' : _typeof(_unionComparer4)));
          }
        }

      case 'IntersectionTypeAnnotation':
        {
          _intersectionComparer4 = intersectionComparer(a, b, compareTupleAnnotation);

          if (!(_intersectionComparer4 == null || typeof _intersectionComparer4 === 'boolean')) {
            throw new TypeError('Value of variable "_intersectionComparer4" violates contract, expected ?bool got ' + (_intersectionComparer4 === null ? 'null' : (typeof _intersectionComparer4 === 'undefined' ? 'undefined' : _typeof(_intersectionComparer4)) === 'object' && _intersectionComparer4.constructor ? _intersectionComparer4.constructor.name || '[Unknown Object]' : typeof _intersectionComparer4 === 'undefined' ? 'undefined' : _typeof(_intersectionComparer4)));
          }

          if (_intersectionComparer4 == null || typeof _intersectionComparer4 === 'boolean') {
            return _intersectionComparer4;
          } else {
            throw new TypeError('Function "compareTupleAnnotation" return value violates contract, expected ?bool got ' + (_intersectionComparer4 === null ? 'null' : (typeof _intersectionComparer4 === 'undefined' ? 'undefined' : _typeof(_intersectionComparer4)) === 'object' && _intersectionComparer4.constructor ? _intersectionComparer4.constructor.name || '[Unknown Object]' : typeof _intersectionComparer4 === 'undefined' ? 'undefined' : _typeof(_intersectionComparer4)));
          }
        }

      case 'VoidTypeAnnotation':
      case 'BooleanTypeAnnotation':
      case 'BooleanLiteralTypeAnnotation':
      case 'StringTypeAnnotation':
      case 'StringLiteralTypeAnnotation':
      case 'NumberTypeAnnotation':
      case 'NumericLiteralTypeAnnotation':
      case 'FunctionTypeAnnotation':
        return false;
      default:
        {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "compareTupleAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }

    }
  }

  function compareUnionAnnotation(a, b) {
    var _compareUnionAnnotati2, _unionComparer5;

    if (!Node(a)) {
      throw new TypeError('Value of argument "a" violates contract, expected Node got ' + (a === null ? 'null' : (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' && a.constructor ? a.constructor.name || '[Unknown Object]' : typeof a === 'undefined' ? 'undefined' : _typeof(a)));
    }

    if (!Node(b)) {
      throw new TypeError('Value of argument "b" violates contract, expected Node got ' + (b === null ? 'null' : (typeof b === 'undefined' ? 'undefined' : _typeof(b)) === 'object' && b.constructor ? b.constructor.name || '[Unknown Object]' : typeof b === 'undefined' ? 'undefined' : _typeof(b)));
    }

    switch (b.type) {
      case 'NullableTypeAnnotation':
        {
          _compareUnionAnnotati2 = compareUnionAnnotation(a, b.typeAnnotation);

          if (!(_compareUnionAnnotati2 == null || typeof _compareUnionAnnotati2 === 'boolean')) {
            throw new TypeError('Value of variable "_compareUnionAnnotati2" violates contract, expected ?bool got ' + (_compareUnionAnnotati2 === null ? 'null' : (typeof _compareUnionAnnotati2 === 'undefined' ? 'undefined' : _typeof(_compareUnionAnnotati2)) === 'object' && _compareUnionAnnotati2.constructor ? _compareUnionAnnotati2.constructor.name || '[Unknown Object]' : typeof _compareUnionAnnotati2 === 'undefined' ? 'undefined' : _typeof(_compareUnionAnnotati2)));
          }

          if (_compareUnionAnnotati2 == null || typeof _compareUnionAnnotati2 === 'boolean') {
            return _compareUnionAnnotati2;
          } else {
            throw new TypeError('Function "compareUnionAnnotation" return value violates contract, expected ?bool got ' + (_compareUnionAnnotati2 === null ? 'null' : (typeof _compareUnionAnnotati2 === 'undefined' ? 'undefined' : _typeof(_compareUnionAnnotati2)) === 'object' && _compareUnionAnnotati2.constructor ? _compareUnionAnnotati2.constructor.name || '[Unknown Object]' : typeof _compareUnionAnnotati2 === 'undefined' ? 'undefined' : _typeof(_compareUnionAnnotati2)));
          }
        }

      case 'AnyTypeAnnotation':
      case 'MixedTypeAnnotation':
        {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "compareUnionAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }

      default:
        {
          _unionComparer5 = unionComparer(a, b, compareAnnotations);

          if (!(_unionComparer5 == null || typeof _unionComparer5 === 'boolean')) {
            throw new TypeError('Value of variable "_unionComparer5" violates contract, expected ?bool got ' + (_unionComparer5 === null ? 'null' : (typeof _unionComparer5 === 'undefined' ? 'undefined' : _typeof(_unionComparer5)) === 'object' && _unionComparer5.constructor ? _unionComparer5.constructor.name || '[Unknown Object]' : typeof _unionComparer5 === 'undefined' ? 'undefined' : _typeof(_unionComparer5)));
          }

          if (_unionComparer5 == null || typeof _unionComparer5 === 'boolean') {
            return _unionComparer5;
          } else {
            throw new TypeError('Function "compareUnionAnnotation" return value violates contract, expected ?bool got ' + (_unionComparer5 === null ? 'null' : (typeof _unionComparer5 === 'undefined' ? 'undefined' : _typeof(_unionComparer5)) === 'object' && _unionComparer5.constructor ? _unionComparer5.constructor.name || '[Unknown Object]' : typeof _unionComparer5 === 'undefined' ? 'undefined' : _typeof(_unionComparer5)));
          }
        }

    }
  }

  function compareNullableAnnotation(a, b) {
    var _compareNullableAnnot2;

    if (!Node(a)) {
      throw new TypeError('Value of argument "a" violates contract, expected Node got ' + (a === null ? 'null' : (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' && a.constructor ? a.constructor.name || '[Unknown Object]' : typeof a === 'undefined' ? 'undefined' : _typeof(a)));
    }

    if (!Node(b)) {
      throw new TypeError('Value of argument "b" violates contract, expected Node got ' + (b === null ? 'null' : (typeof b === 'undefined' ? 'undefined' : _typeof(b)) === 'object' && b.constructor ? b.constructor.name || '[Unknown Object]' : typeof b === 'undefined' ? 'undefined' : _typeof(b)));
    }

    switch (b.type) {
      case 'TypeAnnotation':
      case 'FunctonTypeParam':
        {
          _compareNullableAnnot2 = compareNullableAnnotation(a, b.typeAnnotation);

          if (!(_compareNullableAnnot2 == null || typeof _compareNullableAnnot2 === 'boolean')) {
            throw new TypeError('Value of variable "_compareNullableAnnot2" violates contract, expected ?bool got ' + (_compareNullableAnnot2 === null ? 'null' : (typeof _compareNullableAnnot2 === 'undefined' ? 'undefined' : _typeof(_compareNullableAnnot2)) === 'object' && _compareNullableAnnot2.constructor ? _compareNullableAnnot2.constructor.name || '[Unknown Object]' : typeof _compareNullableAnnot2 === 'undefined' ? 'undefined' : _typeof(_compareNullableAnnot2)));
          }

          if (_compareNullableAnnot2 == null || typeof _compareNullableAnnot2 === 'boolean') {
            return _compareNullableAnnot2;
          } else {
            throw new TypeError('Function "compareNullableAnnotation" return value violates contract, expected ?bool got ' + (_compareNullableAnnot2 === null ? 'null' : (typeof _compareNullableAnnot2 === 'undefined' ? 'undefined' : _typeof(_compareNullableAnnot2)) === 'object' && _compareNullableAnnot2.constructor ? _compareNullableAnnot2.constructor.name || '[Unknown Object]' : typeof _compareNullableAnnot2 === 'undefined' ? 'undefined' : _typeof(_compareNullableAnnot2)));
          }
        }

      case 'NullableTypeAnnotation':
      case 'VoidTypeAnnotation':
        {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "compareNullableAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }

    }
    if (compareAnnotations(a.typeAnnotation, b) === true) {
      return true;
    } else {
      if (null == null || typeof null === 'boolean') {
        return null;
      } else {
        throw new TypeError('Function "compareNullableAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
      }
    }
  }

  function arrayExpressionToTupleAnnotation(path) {
    var _t$tupleTypeAnnotatio;

    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var elements = path.get('elements');
    _t$tupleTypeAnnotatio = t.tupleTypeAnnotation(elements.map(function (element) {
      return getAnnotation(element);
    }));

    if (TypeAnnotation(_t$tupleTypeAnnotatio)) {
      return _t$tupleTypeAnnotatio;
    } else {
      throw new TypeError('Function "arrayExpressionToTupleAnnotation" return value violates contract, expected TypeAnnotation got ' + (_t$tupleTypeAnnotatio === null ? 'null' : (typeof _t$tupleTypeAnnotatio === 'undefined' ? 'undefined' : _typeof(_t$tupleTypeAnnotatio)) === 'object' && _t$tupleTypeAnnotatio.constructor ? _t$tupleTypeAnnotatio.constructor.name || '[Unknown Object]' : typeof _t$tupleTypeAnnotatio === 'undefined' ? 'undefined' : _typeof(_t$tupleTypeAnnotatio)));
    }
  }

  function checkNullable(_ref21) {
    var _t$logicalExpression;

    var input = _ref21.input;
    var type = _ref21.type;
    var scope = _ref21.scope;

    var check = checkAnnotation(input, type, scope);
    if (!check) {
      return;
    }
    _t$logicalExpression = t.logicalExpression("||", checks.void({ input: input }), check);

    if (_t$logicalExpression == null || Node(_t$logicalExpression)) {
      return _t$logicalExpression;
    } else {
      throw new TypeError('Function "checkNullable" return value violates contract, expected ?Node got ' + (_t$logicalExpression === null ? 'null' : (typeof _t$logicalExpression === 'undefined' ? 'undefined' : _typeof(_t$logicalExpression)) === 'object' && _t$logicalExpression.constructor ? _t$logicalExpression.constructor.name || '[Unknown Object]' : typeof _t$logicalExpression === 'undefined' ? 'undefined' : _typeof(_t$logicalExpression)));
    }
  }

  function checkTypeof(_ref22) {
    var _checkAnnotation, _checkAnnotation2;

    var input = _ref22.input;
    var annotation = _ref22.annotation;
    var scope = _ref22.scope;

    switch (annotation.type) {
      case 'GenericTypeAnnotation':
        var id = annotation.id;

        var path = Object.assign({}, input, { type: id.type, node: id, scope: scope });
        {
          _checkAnnotation = checkAnnotation(input, getAnnotation(path), scope);

          if (!(_checkAnnotation == null || Node(_checkAnnotation))) {
            throw new TypeError('Value of variable "_checkAnnotation" violates contract, expected ?Node got ' + (_checkAnnotation === null ? 'null' : (typeof _checkAnnotation === 'undefined' ? 'undefined' : _typeof(_checkAnnotation)) === 'object' && _checkAnnotation.constructor ? _checkAnnotation.constructor.name || '[Unknown Object]' : typeof _checkAnnotation === 'undefined' ? 'undefined' : _typeof(_checkAnnotation)));
          }

          if (_checkAnnotation == null || Node(_checkAnnotation)) {
            return _checkAnnotation;
          } else {
            throw new TypeError('Function "checkTypeof" return value violates contract, expected ?Node got ' + (_checkAnnotation === null ? 'null' : (typeof _checkAnnotation === 'undefined' ? 'undefined' : _typeof(_checkAnnotation)) === 'object' && _checkAnnotation.constructor ? _checkAnnotation.constructor.name || '[Unknown Object]' : typeof _checkAnnotation === 'undefined' ? 'undefined' : _typeof(_checkAnnotation)));
          }
        }

      default:
        {
          _checkAnnotation2 = checkAnnotation(input, annotation, scope);

          if (!(_checkAnnotation2 == null || Node(_checkAnnotation2))) {
            throw new TypeError('Value of variable "_checkAnnotation2" violates contract, expected ?Node got ' + (_checkAnnotation2 === null ? 'null' : (typeof _checkAnnotation2 === 'undefined' ? 'undefined' : _typeof(_checkAnnotation2)) === 'object' && _checkAnnotation2.constructor ? _checkAnnotation2.constructor.name || '[Unknown Object]' : typeof _checkAnnotation2 === 'undefined' ? 'undefined' : _typeof(_checkAnnotation2)));
          }

          if (_checkAnnotation2 == null || Node(_checkAnnotation2)) {
            return _checkAnnotation2;
          } else {
            throw new TypeError('Function "checkTypeof" return value violates contract, expected ?Node got ' + (_checkAnnotation2 === null ? 'null' : (typeof _checkAnnotation2 === 'undefined' ? 'undefined' : _typeof(_checkAnnotation2)) === 'object' && _checkAnnotation2.constructor ? _checkAnnotation2.constructor.name || '[Unknown Object]' : typeof _checkAnnotation2 === 'undefined' ? 'undefined' : _typeof(_checkAnnotation2)));
          }
        }

    }
  }

  function checkStringLiteral(_ref23) {
    var _checkEquals;

    var input = _ref23.input;
    var annotation = _ref23.annotation;
    _checkEquals = checkEquals({ input: input, expected: t.stringLiteral(annotation.value) });

    if (_checkEquals == null || Node(_checkEquals)) {
      return _checkEquals;
    } else {
      throw new TypeError('Function "checkStringLiteral" return value violates contract, expected ?Node got ' + (_checkEquals === null ? 'null' : (typeof _checkEquals === 'undefined' ? 'undefined' : _typeof(_checkEquals)) === 'object' && _checkEquals.constructor ? _checkEquals.constructor.name || '[Unknown Object]' : typeof _checkEquals === 'undefined' ? 'undefined' : _typeof(_checkEquals)));
    }
  }

  function checkNumericLiteral(_ref24) {
    var _checkEquals2;

    var input = _ref24.input;
    var annotation = _ref24.annotation;
    _checkEquals2 = checkEquals({ input: input, expected: t.numericLiteral(annotation.value) });

    if (_checkEquals2 == null || Node(_checkEquals2)) {
      return _checkEquals2;
    } else {
      throw new TypeError('Function "checkNumericLiteral" return value violates contract, expected ?Node got ' + (_checkEquals2 === null ? 'null' : (typeof _checkEquals2 === 'undefined' ? 'undefined' : _typeof(_checkEquals2)) === 'object' && _checkEquals2.constructor ? _checkEquals2.constructor.name || '[Unknown Object]' : typeof _checkEquals2 === 'undefined' ? 'undefined' : _typeof(_checkEquals2)));
    }
  }

  function checkBooleanLiteral(_ref25) {
    var _checkEquals3;

    var input = _ref25.input;
    var annotation = _ref25.annotation;
    _checkEquals3 = checkEquals({ input: input, expected: t.booleanLiteral(annotation.value) });

    if (_checkEquals3 == null || Node(_checkEquals3)) {
      return _checkEquals3;
    } else {
      throw new TypeError('Function "checkBooleanLiteral" return value violates contract, expected ?Node got ' + (_checkEquals3 === null ? 'null' : (typeof _checkEquals3 === 'undefined' ? 'undefined' : _typeof(_checkEquals3)) === 'object' && _checkEquals3.constructor ? _checkEquals3.constructor.name || '[Unknown Object]' : typeof _checkEquals3 === 'undefined' ? 'undefined' : _typeof(_checkEquals3)));
    }
  }

  function checkUnion(_ref26) {
    var _checks$reduce;

    var input = _ref26.input;
    var types = _ref26.types;
    var scope = _ref26.scope;

    var checks = types.map(function (type) {
      return checkAnnotation(input, type, scope);
    }).filter(identity);
    _checks$reduce = checks.reduce(function (last, check, index) {
      if (last == null) {
        return check;
      }
      return t.logicalExpression("||", last, check);
    }, null);

    if (_checks$reduce == null || Node(_checks$reduce)) {
      return _checks$reduce;
    } else {
      throw new TypeError('Function "checkUnion" return value violates contract, expected ?Node got ' + (_checks$reduce === null ? 'null' : (typeof _checks$reduce === 'undefined' ? 'undefined' : _typeof(_checks$reduce)) === 'object' && _checks$reduce.constructor ? _checks$reduce.constructor.name || '[Unknown Object]' : typeof _checks$reduce === 'undefined' ? 'undefined' : _typeof(_checks$reduce)));
    }
  }

  function checkIntersection(_ref27) {
    var _checks$reduce2;

    var input = _ref27.input;
    var types = _ref27.types;
    var scope = _ref27.scope;

    var checks = types.map(function (type) {
      return checkAnnotation(input, type, scope);
    }).filter(identity);
    _checks$reduce2 = checks.reduce(function (last, check, index) {
      if (last == null) {
        return check;
      }
      return t.logicalExpression("&&", last, check);
    }, null);

    if (_checks$reduce2 == null || Node(_checks$reduce2)) {
      return _checks$reduce2;
    } else {
      throw new TypeError('Function "checkIntersection" return value violates contract, expected ?Node got ' + (_checks$reduce2 === null ? 'null' : (typeof _checks$reduce2 === 'undefined' ? 'undefined' : _typeof(_checks$reduce2)) === 'object' && _checks$reduce2.constructor ? _checks$reduce2.constructor.name || '[Unknown Object]' : typeof _checks$reduce2 === 'undefined' ? 'undefined' : _typeof(_checks$reduce2)));
    }
  }

  function checkMap(_ref28) {
    var input = _ref28.input;
    var types = _ref28.types;
    var scope = _ref28.scope;

    var _types = _slicedToArray(types, 2);

    var keyType = _types[0];
    var valueType = _types[1];

    var key = t.identifier('key');
    var value = t.identifier('value');
    var keyCheck = keyType ? checkAnnotation(key, keyType, scope) : null;
    var valueCheck = valueType ? checkAnnotation(value, valueType, scope) : null;
    if (!keyCheck) {
      if (!valueCheck) {
        var _checkIsMap;

        _checkIsMap = checkIsMap({ input: input });

        if (Node(_checkIsMap)) {
          return _checkIsMap;
        } else {
          throw new TypeError('Function "checkMap" return value violates contract, expected Node got ' + (_checkIsMap === null ? 'null' : (typeof _checkIsMap === 'undefined' ? 'undefined' : _typeof(_checkIsMap)) === 'object' && _checkIsMap.constructor ? _checkIsMap.constructor.name || '[Unknown Object]' : typeof _checkIsMap === 'undefined' ? 'undefined' : _typeof(_checkIsMap)));
        }
      } else {
        var _checkMapValues;

        _checkMapValues = checkMapValues({ input: input, value: value, valueCheck: valueCheck });

        if (Node(_checkMapValues)) {
          return _checkMapValues;
        } else {
          throw new TypeError('Function "checkMap" return value violates contract, expected Node got ' + (_checkMapValues === null ? 'null' : (typeof _checkMapValues === 'undefined' ? 'undefined' : _typeof(_checkMapValues)) === 'object' && _checkMapValues.constructor ? _checkMapValues.constructor.name || '[Unknown Object]' : typeof _checkMapValues === 'undefined' ? 'undefined' : _typeof(_checkMapValues)));
        }
      }
    } else {
      if (!valueCheck) {
        var _checkMapKeys;

        _checkMapKeys = checkMapKeys({ input: input, key: key, keyCheck: keyCheck });

        if (Node(_checkMapKeys)) {
          return _checkMapKeys;
        } else {
          throw new TypeError('Function "checkMap" return value violates contract, expected Node got ' + (_checkMapKeys === null ? 'null' : (typeof _checkMapKeys === 'undefined' ? 'undefined' : _typeof(_checkMapKeys)) === 'object' && _checkMapKeys.constructor ? _checkMapKeys.constructor.name || '[Unknown Object]' : typeof _checkMapKeys === 'undefined' ? 'undefined' : _typeof(_checkMapKeys)));
        }
      } else {
        var _checkMapEntries;

        _checkMapEntries = checkMapEntries({ input: input, key: key, value: value, keyCheck: keyCheck, valueCheck: valueCheck });

        if (Node(_checkMapEntries)) {
          return _checkMapEntries;
        } else {
          throw new TypeError('Function "checkMap" return value violates contract, expected Node got ' + (_checkMapEntries === null ? 'null' : (typeof _checkMapEntries === 'undefined' ? 'undefined' : _typeof(_checkMapEntries)) === 'object' && _checkMapEntries.constructor ? _checkMapEntries.constructor.name || '[Unknown Object]' : typeof _checkMapEntries === 'undefined' ? 'undefined' : _typeof(_checkMapEntries)));
        }
      }
    }
  }

  function checkSet(_ref29) {
    var input = _ref29.input;
    var types = _ref29.types;
    var scope = _ref29.scope;

    var _types2 = _slicedToArray(types, 1);

    var valueType = _types2[0];

    var value = t.identifier('value');
    var valueCheck = valueType ? checkAnnotation(value, valueType, scope) : null;
    if (!valueCheck) {
      var _checkIsSet;

      _checkIsSet = checkIsSet({ input: input });

      if (Node(_checkIsSet)) {
        return _checkIsSet;
      } else {
        throw new TypeError('Function "checkSet" return value violates contract, expected Node got ' + (_checkIsSet === null ? 'null' : (typeof _checkIsSet === 'undefined' ? 'undefined' : _typeof(_checkIsSet)) === 'object' && _checkIsSet.constructor ? _checkIsSet.constructor.name || '[Unknown Object]' : typeof _checkIsSet === 'undefined' ? 'undefined' : _typeof(_checkIsSet)));
      }
    } else {
      var _checkSetEntries;

      _checkSetEntries = checkSetEntries({ input: input, value: value, valueCheck: valueCheck });

      if (Node(_checkSetEntries)) {
        return _checkSetEntries;
      } else {
        throw new TypeError('Function "checkSet" return value violates contract, expected Node got ' + (_checkSetEntries === null ? 'null' : (typeof _checkSetEntries === 'undefined' ? 'undefined' : _typeof(_checkSetEntries)) === 'object' && _checkSetEntries.constructor ? _checkSetEntries.constructor.name || '[Unknown Object]' : typeof _checkSetEntries === 'undefined' ? 'undefined' : _typeof(_checkSetEntries)));
      }
    }
  }

  function checkArray(_ref30) {
    var input = _ref30.input;
    var types = _ref30.types;
    var scope = _ref30.scope;

    if (!types || types.length === 0) {
      var _checkIsArray;

      _checkIsArray = checkIsArray({ input: input });

      if (Node(_checkIsArray)) {
        return _checkIsArray;
      } else {
        throw new TypeError('Function "checkArray" return value violates contract, expected Node got ' + (_checkIsArray === null ? 'null' : (typeof _checkIsArray === 'undefined' ? 'undefined' : _typeof(_checkIsArray)) === 'object' && _checkIsArray.constructor ? _checkIsArray.constructor.name || '[Unknown Object]' : typeof _checkIsArray === 'undefined' ? 'undefined' : _typeof(_checkIsArray)));
      }
    } else if (types.length === 1) {
      var _t$logicalExpression2;

      var item = t.identifier('item');
      var _type4 = types[0];
      var check = checkAnnotation(item, _type4, scope);
      if (!check) {
        var _checkIsArray2;

        _checkIsArray2 = checkIsArray({ input: input });

        if (Node(_checkIsArray2)) {
          return _checkIsArray2;
        } else {
          throw new TypeError('Function "checkArray" return value violates contract, expected Node got ' + (_checkIsArray2 === null ? 'null' : (typeof _checkIsArray2 === 'undefined' ? 'undefined' : _typeof(_checkIsArray2)) === 'object' && _checkIsArray2.constructor ? _checkIsArray2.constructor.name || '[Unknown Object]' : typeof _checkIsArray2 === 'undefined' ? 'undefined' : _typeof(_checkIsArray2)));
        }
      }
      _t$logicalExpression2 = t.logicalExpression('&&', checkIsArray({ input: input }), t.callExpression(t.memberExpression(input, t.identifier('every')), [t.functionExpression(null, [item], t.blockStatement([t.returnStatement(check)]))]));

      if (Node(_t$logicalExpression2)) {
        return _t$logicalExpression2;
      } else {
        throw new TypeError('Function "checkArray" return value violates contract, expected Node got ' + (_t$logicalExpression2 === null ? 'null' : (typeof _t$logicalExpression2 === 'undefined' ? 'undefined' : _typeof(_t$logicalExpression2)) === 'object' && _t$logicalExpression2.constructor ? _t$logicalExpression2.constructor.name || '[Unknown Object]' : typeof _t$logicalExpression2 === 'undefined' ? 'undefined' : _typeof(_t$logicalExpression2)));
      }
    } else {
      var _checks$reduce3;

      // This is a tuple
      var _checks = types.map(function (type, index) {
        return checkAnnotation(t.memberExpression(input, t.numericLiteral(index), true), type, scope);
      }).filter(identity);

      var checkLength = t.binaryExpression('>=', t.memberExpression(input, t.identifier('length')), t.numericLiteral(types.length));

      _checks$reduce3 = _checks.reduce(function (last, check, index) {
        return t.logicalExpression("&&", last, check);
      }, t.logicalExpression('&&', checkIsArray({ input: input }), checkLength));

      if (Node(_checks$reduce3)) {
        return _checks$reduce3;
      } else {
        throw new TypeError('Function "checkArray" return value violates contract, expected Node got ' + (_checks$reduce3 === null ? 'null' : (typeof _checks$reduce3 === 'undefined' ? 'undefined' : _typeof(_checks$reduce3)) === 'object' && _checks$reduce3.constructor ? _checks$reduce3.constructor.name || '[Unknown Object]' : typeof _checks$reduce3 === 'undefined' ? 'undefined' : _typeof(_checks$reduce3)));
      }
    }
  }

  function checkTuple(_ref31) {
    var _checks$reduce4;

    var input = _ref31.input;
    var types = _ref31.types;
    var scope = _ref31.scope;

    if (types.length === 0) {
      var _checkIsArray3;

      _checkIsArray3 = checkIsArray({ input: input });

      if (Node(_checkIsArray3)) {
        return _checkIsArray3;
      } else {
        throw new TypeError('Function "checkTuple" return value violates contract, expected Node got ' + (_checkIsArray3 === null ? 'null' : (typeof _checkIsArray3 === 'undefined' ? 'undefined' : _typeof(_checkIsArray3)) === 'object' && _checkIsArray3.constructor ? _checkIsArray3.constructor.name || '[Unknown Object]' : typeof _checkIsArray3 === 'undefined' ? 'undefined' : _typeof(_checkIsArray3)));
      }
    }

    // This is a tuple
    var checks = types.map(function (type, index) {
      return checkAnnotation(t.memberExpression(input, t.numericLiteral(index), true), type, scope);
    }).filter(identity);

    var checkLength = t.binaryExpression('>=', t.memberExpression(input, t.identifier('length')), t.numericLiteral(types.length));

    _checks$reduce4 = checks.reduce(function (last, check, index) {
      return t.logicalExpression("&&", last, check);
    }, t.logicalExpression('&&', checkIsArray({ input: input }), checkLength));

    if (Node(_checks$reduce4)) {
      return _checks$reduce4;
    } else {
      throw new TypeError('Function "checkTuple" return value violates contract, expected Node got ' + (_checks$reduce4 === null ? 'null' : (typeof _checks$reduce4 === 'undefined' ? 'undefined' : _typeof(_checks$reduce4)) === 'object' && _checks$reduce4.constructor ? _checks$reduce4.constructor.name || '[Unknown Object]' : typeof _checks$reduce4 === 'undefined' ? 'undefined' : _typeof(_checks$reduce4)));
    }
  }

  function checkObject(_ref32) {
    var input = _ref32.input;
    var properties = _ref32.properties;
    var scope = _ref32.scope;

    var check = properties.reduce(function (expr, prop, index) {
      var target = t.memberExpression(input, prop.key);
      var check = checkAnnotation(target, prop.value, scope);
      if (check) {
        if (prop.optional) {
          check = t.logicalExpression('||', checks.undefined({ input: target }), check);
        }
        return t.logicalExpression("&&", expr, check);
      } else {
        return expr;
      }
    }, checkIsObject({ input: input }));

    if (Node(check)) {
      return check;
    } else {
      throw new TypeError('Function "checkObject" return value violates contract, expected Node got ' + (check === null ? 'null' : (typeof check === 'undefined' ? 'undefined' : _typeof(check)) === 'object' && check.constructor ? check.constructor.name || '[Unknown Object]' : typeof check === 'undefined' ? 'undefined' : _typeof(check)));
    }
  }

  function createTypeAliasChecks(path) {
    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var node = path.node;
    var scope = path.scope;
    var id = node.id;
    var annotation = node.right;

    var input = t.identifier('input');
    var check = checkAnnotation(input, annotation, scope) || t.booleanLiteral(true);
    var declaration = declareTypeChecker({ id: id, check: check });
    declaration.isTypeChecker = true;
    declaration.savedTypeAnnotation = annotation;
    declaration.declarations[0].savedTypeAnnotation = annotation;

    if (Node(declaration)) {
      return declaration;
    } else {
      throw new TypeError('Function "createTypeAliasChecks" return value violates contract, expected Node got ' + (declaration === null ? 'null' : (typeof declaration === 'undefined' ? 'undefined' : _typeof(declaration)) === 'object' && declaration.constructor ? declaration.constructor.name || '[Unknown Object]' : typeof declaration === 'undefined' ? 'undefined' : _typeof(declaration)));
    }
  }

  function createInterfaceChecks(path) {
    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var node = path.node;
    var scope = path.scope;
    var id = node.id;
    var annotation = node.body;

    var input = t.identifier('input');
    var check = node.extends.reduce(function (check, extender) {
      return t.logicalExpression('&&', check, checkAnnotation(input, t.genericTypeAnnotation(extender.id), path.scope));
      return check;
    }, checkAnnotation(input, annotation, scope) || t.booleanLiteral(true));

    var declaration = declareTypeChecker({ id: id, check: check });
    declaration.isTypeChecker = true;

    if (Node(declaration)) {
      return declaration;
    } else {
      throw new TypeError('Function "createInterfaceChecks" return value violates contract, expected Node got ' + (declaration === null ? 'null' : (typeof declaration === 'undefined' ? 'undefined' : _typeof(declaration)) === 'object' && declaration.constructor ? declaration.constructor.name || '[Unknown Object]' : typeof declaration === 'undefined' ? 'undefined' : _typeof(declaration)));
    }
  }

  function checkAnnotation(input, annotation, scope) {
    var _checkAnnotation3, _checks$typeof, _checks$tuple, _checks$number, _checks$numericLitera, _checks$boolean, _checks$booleanLitera, _checks$string, _checks$stringLiteral, _checks$union, _checks$intersection, _checks$object, _checks$array2, _checks$function2, _checks$mixed, _checks$any, _checks$nullable, _checks$void;

    if (!Node(input)) {
      throw new TypeError('Value of argument "input" violates contract, expected Node got ' + (input === null ? 'null' : (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && input.constructor ? input.constructor.name || '[Unknown Object]' : typeof input === 'undefined' ? 'undefined' : _typeof(input)));
    }

    if (!TypeAnnotation(annotation)) {
      throw new TypeError('Value of argument "annotation" violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
    }

    if (!Scope(scope)) {
      throw new TypeError('Value of argument "scope" violates contract, expected Scope got ' + (scope === null ? 'null' : (typeof scope === 'undefined' ? 'undefined' : _typeof(scope)) === 'object' && scope.constructor ? scope.constructor.name || '[Unknown Object]' : typeof scope === 'undefined' ? 'undefined' : _typeof(scope)));
    }

    switch (annotation.type) {
      case 'TypeAnnotation':
      case 'FunctonTypeParam':
        {
          _checkAnnotation3 = checkAnnotation(input, annotation.typeAnnotation, scope);

          if (!(_checkAnnotation3 == null || Node(_checkAnnotation3))) {
            throw new TypeError('Value of variable "_checkAnnotation3" violates contract, expected ?Node got ' + (_checkAnnotation3 === null ? 'null' : (typeof _checkAnnotation3 === 'undefined' ? 'undefined' : _typeof(_checkAnnotation3)) === 'object' && _checkAnnotation3.constructor ? _checkAnnotation3.constructor.name || '[Unknown Object]' : typeof _checkAnnotation3 === 'undefined' ? 'undefined' : _typeof(_checkAnnotation3)));
          }

          if (_checkAnnotation3 == null || Node(_checkAnnotation3)) {
            return _checkAnnotation3;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checkAnnotation3 === null ? 'null' : (typeof _checkAnnotation3 === 'undefined' ? 'undefined' : _typeof(_checkAnnotation3)) === 'object' && _checkAnnotation3.constructor ? _checkAnnotation3.constructor.name || '[Unknown Object]' : typeof _checkAnnotation3 === 'undefined' ? 'undefined' : _typeof(_checkAnnotation3)));
          }
        }

      case 'TypeofTypeAnnotation':
        {
          _checks$typeof = checks.typeof({ input: input, annotation: annotation.argument, scope: scope });

          if (_checks$typeof == null || Node(_checks$typeof)) {
            return _checks$typeof;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$typeof === null ? 'null' : (typeof _checks$typeof === 'undefined' ? 'undefined' : _typeof(_checks$typeof)) === 'object' && _checks$typeof.constructor ? _checks$typeof.constructor.name || '[Unknown Object]' : typeof _checks$typeof === 'undefined' ? 'undefined' : _typeof(_checks$typeof)));
          }
        }

      case 'GenericTypeAnnotation':
        if (annotation.id.name === 'Array') {
          var _checks$array;

          _checks$array = checks.array({ input: input, types: annotation.typeParameters ? annotation.typeParameters.params : [], scope: scope });

          if (_checks$array == null || Node(_checks$array)) {
            return _checks$array;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$array === null ? 'null' : (typeof _checks$array === 'undefined' ? 'undefined' : _typeof(_checks$array)) === 'object' && _checks$array.constructor ? _checks$array.constructor.name || '[Unknown Object]' : typeof _checks$array === 'undefined' ? 'undefined' : _typeof(_checks$array)));
          }
        } else if (annotation.id.name === 'Map' && !scope.hasBinding('Map')) {
          var _checks$map;

          _checks$map = checks.map({ input: input, types: annotation.typeParameters ? annotation.typeParameters.params : [], scope: scope });

          if (_checks$map == null || Node(_checks$map)) {
            return _checks$map;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$map === null ? 'null' : (typeof _checks$map === 'undefined' ? 'undefined' : _typeof(_checks$map)) === 'object' && _checks$map.constructor ? _checks$map.constructor.name || '[Unknown Object]' : typeof _checks$map === 'undefined' ? 'undefined' : _typeof(_checks$map)));
          }
        } else if (annotation.id.name === 'Set' && !scope.hasBinding('Set')) {
          var _checks$set;

          _checks$set = checks.set({ input: input, types: annotation.typeParameters ? annotation.typeParameters.params : [], scope: scope });

          if (_checks$set == null || Node(_checks$set)) {
            return _checks$set;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$set === null ? 'null' : (typeof _checks$set === 'undefined' ? 'undefined' : _typeof(_checks$set)) === 'object' && _checks$set.constructor ? _checks$set.constructor.name || '[Unknown Object]' : typeof _checks$set === 'undefined' ? 'undefined' : _typeof(_checks$set)));
          }
        } else if (annotation.id.name === 'Function') {
          var _checks$function;

          _checks$function = checks.function({ input: input });

          if (_checks$function == null || Node(_checks$function)) {
            return _checks$function;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$function === null ? 'null' : (typeof _checks$function === 'undefined' ? 'undefined' : _typeof(_checks$function)) === 'object' && _checks$function.constructor ? _checks$function.constructor.name || '[Unknown Object]' : typeof _checks$function === 'undefined' ? 'undefined' : _typeof(_checks$function)));
          }
        } else if (annotation.id.name === 'Symbol') {
          var _checks$symbol;

          _checks$symbol = checks.symbol({ input: input });

          if (_checks$symbol == null || Node(_checks$symbol)) {
            return _checks$symbol;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$symbol === null ? 'null' : (typeof _checks$symbol === 'undefined' ? 'undefined' : _typeof(_checks$symbol)) === 'object' && _checks$symbol.constructor ? _checks$symbol.constructor.name || '[Unknown Object]' : typeof _checks$symbol === 'undefined' ? 'undefined' : _typeof(_checks$symbol)));
          }
        } else if (isTypeChecker(annotation.id, scope)) {
          var _checks$type;

          _checks$type = checks.type({ input: input, type: annotation.id });

          if (_checks$type == null || Node(_checks$type)) {
            return _checks$type;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$type === null ? 'null' : (typeof _checks$type === 'undefined' ? 'undefined' : _typeof(_checks$type)) === 'object' && _checks$type.constructor ? _checks$type.constructor.name || '[Unknown Object]' : typeof _checks$type === 'undefined' ? 'undefined' : _typeof(_checks$type)));
          }
        } else if (isPolymorphicType(annotation.id, scope)) {
          return;
        } else {
          var _checks$instanceof;

          _checks$instanceof = checks.instanceof({ input: input, type: createTypeExpression(annotation.id) });

          if (_checks$instanceof == null || Node(_checks$instanceof)) {
            return _checks$instanceof;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$instanceof === null ? 'null' : (typeof _checks$instanceof === 'undefined' ? 'undefined' : _typeof(_checks$instanceof)) === 'object' && _checks$instanceof.constructor ? _checks$instanceof.constructor.name || '[Unknown Object]' : typeof _checks$instanceof === 'undefined' ? 'undefined' : _typeof(_checks$instanceof)));
          }
        }
      case 'TupleTypeAnnotation':
        {
          _checks$tuple = checks.tuple({ input: input, types: annotation.types, scope: scope });

          if (_checks$tuple == null || Node(_checks$tuple)) {
            return _checks$tuple;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$tuple === null ? 'null' : (typeof _checks$tuple === 'undefined' ? 'undefined' : _typeof(_checks$tuple)) === 'object' && _checks$tuple.constructor ? _checks$tuple.constructor.name || '[Unknown Object]' : typeof _checks$tuple === 'undefined' ? 'undefined' : _typeof(_checks$tuple)));
          }
        }

      case 'NumberTypeAnnotation':
        {
          _checks$number = checks.number({ input: input });

          if (_checks$number == null || Node(_checks$number)) {
            return _checks$number;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$number === null ? 'null' : (typeof _checks$number === 'undefined' ? 'undefined' : _typeof(_checks$number)) === 'object' && _checks$number.constructor ? _checks$number.constructor.name || '[Unknown Object]' : typeof _checks$number === 'undefined' ? 'undefined' : _typeof(_checks$number)));
          }
        }

      case 'NumericLiteralTypeAnnotation':
        {
          _checks$numericLitera = checks.numericLiteral({ input: input, annotation: annotation });

          if (_checks$numericLitera == null || Node(_checks$numericLitera)) {
            return _checks$numericLitera;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$numericLitera === null ? 'null' : (typeof _checks$numericLitera === 'undefined' ? 'undefined' : _typeof(_checks$numericLitera)) === 'object' && _checks$numericLitera.constructor ? _checks$numericLitera.constructor.name || '[Unknown Object]' : typeof _checks$numericLitera === 'undefined' ? 'undefined' : _typeof(_checks$numericLitera)));
          }
        }

      case 'BooleanTypeAnnotation':
        {
          _checks$boolean = checks.boolean({ input: input });

          if (_checks$boolean == null || Node(_checks$boolean)) {
            return _checks$boolean;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$boolean === null ? 'null' : (typeof _checks$boolean === 'undefined' ? 'undefined' : _typeof(_checks$boolean)) === 'object' && _checks$boolean.constructor ? _checks$boolean.constructor.name || '[Unknown Object]' : typeof _checks$boolean === 'undefined' ? 'undefined' : _typeof(_checks$boolean)));
          }
        }

      case 'BooleanLiteralTypeAnnotation':
        {
          _checks$booleanLitera = checks.booleanLiteral({ input: input, annotation: annotation });

          if (_checks$booleanLitera == null || Node(_checks$booleanLitera)) {
            return _checks$booleanLitera;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$booleanLitera === null ? 'null' : (typeof _checks$booleanLitera === 'undefined' ? 'undefined' : _typeof(_checks$booleanLitera)) === 'object' && _checks$booleanLitera.constructor ? _checks$booleanLitera.constructor.name || '[Unknown Object]' : typeof _checks$booleanLitera === 'undefined' ? 'undefined' : _typeof(_checks$booleanLitera)));
          }
        }

      case 'StringTypeAnnotation':
        {
          _checks$string = checks.string({ input: input });

          if (_checks$string == null || Node(_checks$string)) {
            return _checks$string;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$string === null ? 'null' : (typeof _checks$string === 'undefined' ? 'undefined' : _typeof(_checks$string)) === 'object' && _checks$string.constructor ? _checks$string.constructor.name || '[Unknown Object]' : typeof _checks$string === 'undefined' ? 'undefined' : _typeof(_checks$string)));
          }
        }

      case 'StringLiteralTypeAnnotation':
        {
          _checks$stringLiteral = checks.stringLiteral({ input: input, annotation: annotation });

          if (_checks$stringLiteral == null || Node(_checks$stringLiteral)) {
            return _checks$stringLiteral;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$stringLiteral === null ? 'null' : (typeof _checks$stringLiteral === 'undefined' ? 'undefined' : _typeof(_checks$stringLiteral)) === 'object' && _checks$stringLiteral.constructor ? _checks$stringLiteral.constructor.name || '[Unknown Object]' : typeof _checks$stringLiteral === 'undefined' ? 'undefined' : _typeof(_checks$stringLiteral)));
          }
        }

      case 'UnionTypeAnnotation':
        {
          _checks$union = checks.union({ input: input, types: annotation.types, scope: scope });

          if (_checks$union == null || Node(_checks$union)) {
            return _checks$union;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$union === null ? 'null' : (typeof _checks$union === 'undefined' ? 'undefined' : _typeof(_checks$union)) === 'object' && _checks$union.constructor ? _checks$union.constructor.name || '[Unknown Object]' : typeof _checks$union === 'undefined' ? 'undefined' : _typeof(_checks$union)));
          }
        }

      case 'IntersectionTypeAnnotation':
        {
          _checks$intersection = checks.intersection({ input: input, types: annotation.types, scope: scope });

          if (_checks$intersection == null || Node(_checks$intersection)) {
            return _checks$intersection;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$intersection === null ? 'null' : (typeof _checks$intersection === 'undefined' ? 'undefined' : _typeof(_checks$intersection)) === 'object' && _checks$intersection.constructor ? _checks$intersection.constructor.name || '[Unknown Object]' : typeof _checks$intersection === 'undefined' ? 'undefined' : _typeof(_checks$intersection)));
          }
        }

      case 'ObjectTypeAnnotation':
        {
          _checks$object = checks.object({ input: input, properties: annotation.properties || [], indexers: annotation.indexers, scope: scope });

          if (_checks$object == null || Node(_checks$object)) {
            return _checks$object;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$object === null ? 'null' : (typeof _checks$object === 'undefined' ? 'undefined' : _typeof(_checks$object)) === 'object' && _checks$object.constructor ? _checks$object.constructor.name || '[Unknown Object]' : typeof _checks$object === 'undefined' ? 'undefined' : _typeof(_checks$object)));
          }
        }

      case 'ArrayTypeAnnotation':
        {
          _checks$array2 = checks.array({ input: input, types: [annotation.elementType || t.anyTypeAnnotation()], scope: scope });

          if (_checks$array2 == null || Node(_checks$array2)) {
            return _checks$array2;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$array2 === null ? 'null' : (typeof _checks$array2 === 'undefined' ? 'undefined' : _typeof(_checks$array2)) === 'object' && _checks$array2.constructor ? _checks$array2.constructor.name || '[Unknown Object]' : typeof _checks$array2 === 'undefined' ? 'undefined' : _typeof(_checks$array2)));
          }
        }

      case 'FunctionTypeAnnotation':
        {
          _checks$function2 = checks.function({ input: input, params: annotation.params, returnType: annotation.returnType });

          if (_checks$function2 == null || Node(_checks$function2)) {
            return _checks$function2;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$function2 === null ? 'null' : (typeof _checks$function2 === 'undefined' ? 'undefined' : _typeof(_checks$function2)) === 'object' && _checks$function2.constructor ? _checks$function2.constructor.name || '[Unknown Object]' : typeof _checks$function2 === 'undefined' ? 'undefined' : _typeof(_checks$function2)));
          }
        }

      case 'MixedTypeAnnotation':
        {
          _checks$mixed = checks.mixed({ input: input });

          if (_checks$mixed == null || Node(_checks$mixed)) {
            return _checks$mixed;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$mixed === null ? 'null' : (typeof _checks$mixed === 'undefined' ? 'undefined' : _typeof(_checks$mixed)) === 'object' && _checks$mixed.constructor ? _checks$mixed.constructor.name || '[Unknown Object]' : typeof _checks$mixed === 'undefined' ? 'undefined' : _typeof(_checks$mixed)));
          }
        }

      case 'AnyTypeAnnotation':
      case 'ExistentialTypeParam':
        {
          _checks$any = checks.any({ input: input });

          if (_checks$any == null || Node(_checks$any)) {
            return _checks$any;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$any === null ? 'null' : (typeof _checks$any === 'undefined' ? 'undefined' : _typeof(_checks$any)) === 'object' && _checks$any.constructor ? _checks$any.constructor.name || '[Unknown Object]' : typeof _checks$any === 'undefined' ? 'undefined' : _typeof(_checks$any)));
          }
        }

      case 'NullableTypeAnnotation':
        {
          _checks$nullable = checks.nullable({ input: input, type: annotation.typeAnnotation, scope: scope });

          if (_checks$nullable == null || Node(_checks$nullable)) {
            return _checks$nullable;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$nullable === null ? 'null' : (typeof _checks$nullable === 'undefined' ? 'undefined' : _typeof(_checks$nullable)) === 'object' && _checks$nullable.constructor ? _checks$nullable.constructor.name || '[Unknown Object]' : typeof _checks$nullable === 'undefined' ? 'undefined' : _typeof(_checks$nullable)));
          }
        }

      case 'VoidTypeAnnotation':
        {
          _checks$void = checks.void({ input: input });

          if (_checks$void == null || Node(_checks$void)) {
            return _checks$void;
          } else {
            throw new TypeError('Function "checkAnnotation" return value violates contract, expected ?Node got ' + (_checks$void === null ? 'null' : (typeof _checks$void === 'undefined' ? 'undefined' : _typeof(_checks$void)) === 'object' && _checks$void.constructor ? _checks$void.constructor.name || '[Unknown Object]' : typeof _checks$void === 'undefined' ? 'undefined' : _typeof(_checks$void)));
          }
        }

    }
  }

  function staticCheckAnnotation(path, annotation) {
    var _staticCheckAnnotatio, _compareAnnotations;

    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    if (!TypeAnnotation(annotation)) {
      throw new TypeError('Value of argument "annotation" violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
    }

    var other = getAnnotation(path);
    switch (annotation.type) {
      case 'TypeAnnotation':
      case 'FunctonTypeParam':
        {
          _staticCheckAnnotatio = staticCheckAnnotation(path, annotation.typeAnnotation);

          if (!(_staticCheckAnnotatio == null || typeof _staticCheckAnnotatio === 'boolean')) {
            throw new TypeError('Value of variable "_staticCheckAnnotatio" violates contract, expected ?bool got ' + (_staticCheckAnnotatio === null ? 'null' : (typeof _staticCheckAnnotatio === 'undefined' ? 'undefined' : _typeof(_staticCheckAnnotatio)) === 'object' && _staticCheckAnnotatio.constructor ? _staticCheckAnnotatio.constructor.name || '[Unknown Object]' : typeof _staticCheckAnnotatio === 'undefined' ? 'undefined' : _typeof(_staticCheckAnnotatio)));
          }

          if (_staticCheckAnnotatio == null || typeof _staticCheckAnnotatio === 'boolean') {
            return _staticCheckAnnotatio;
          } else {
            throw new TypeError('Function "staticCheckAnnotation" return value violates contract, expected ?bool got ' + (_staticCheckAnnotatio === null ? 'null' : (typeof _staticCheckAnnotatio === 'undefined' ? 'undefined' : _typeof(_staticCheckAnnotatio)) === 'object' && _staticCheckAnnotatio.constructor ? _staticCheckAnnotatio.constructor.name || '[Unknown Object]' : typeof _staticCheckAnnotatio === 'undefined' ? 'undefined' : _typeof(_staticCheckAnnotatio)));
          }
        }

      case 'GenericTypeAnnotation':
        if (isTypeChecker(annotation.id, path.scope)) {
          var _staticChecks$type;

          _staticChecks$type = staticChecks.type({ path: path, type: annotation.id });

          if (_staticChecks$type == null || typeof _staticChecks$type === 'boolean') {
            return _staticChecks$type;
          } else {
            throw new TypeError('Function "staticCheckAnnotation" return value violates contract, expected ?bool got ' + (_staticChecks$type === null ? 'null' : (typeof _staticChecks$type === 'undefined' ? 'undefined' : _typeof(_staticChecks$type)) === 'object' && _staticChecks$type.constructor ? _staticChecks$type.constructor.name || '[Unknown Object]' : typeof _staticChecks$type === 'undefined' ? 'undefined' : _typeof(_staticChecks$type)));
          }
        } else if (isPolymorphicType(annotation.id, path.scope)) {
          return;
        } else if (annotation.id.name === 'Symbol') {
          var _staticChecks$symbol;

          _staticChecks$symbol = staticChecks.symbol(path);

          if (_staticChecks$symbol == null || typeof _staticChecks$symbol === 'boolean') {
            return _staticChecks$symbol;
          } else {
            throw new TypeError('Function "staticCheckAnnotation" return value violates contract, expected ?bool got ' + (_staticChecks$symbol === null ? 'null' : (typeof _staticChecks$symbol === 'undefined' ? 'undefined' : _typeof(_staticChecks$symbol)) === 'object' && _staticChecks$symbol.constructor ? _staticChecks$symbol.constructor.name || '[Unknown Object]' : typeof _staticChecks$symbol === 'undefined' ? 'undefined' : _typeof(_staticChecks$symbol)));
          }
        } else {
          var _staticChecks$instanc;

          _staticChecks$instanc = staticChecks.instanceof({ path: path, type: createTypeExpression(annotation.id) });

          if (_staticChecks$instanc == null || typeof _staticChecks$instanc === 'boolean') {
            return _staticChecks$instanc;
          } else {
            throw new TypeError('Function "staticCheckAnnotation" return value violates contract, expected ?bool got ' + (_staticChecks$instanc === null ? 'null' : (typeof _staticChecks$instanc === 'undefined' ? 'undefined' : _typeof(_staticChecks$instanc)) === 'object' && _staticChecks$instanc.constructor ? _staticChecks$instanc.constructor.name || '[Unknown Object]' : typeof _staticChecks$instanc === 'undefined' ? 'undefined' : _typeof(_staticChecks$instanc)));
          }
        }
    }

    _compareAnnotations = compareAnnotations(annotation, other);

    if (!(_compareAnnotations == null || typeof _compareAnnotations === 'boolean')) {
      throw new TypeError('Value of variable "_compareAnnotations" violates contract, expected ?bool got ' + (_compareAnnotations === null ? 'null' : (typeof _compareAnnotations === 'undefined' ? 'undefined' : _typeof(_compareAnnotations)) === 'object' && _compareAnnotations.constructor ? _compareAnnotations.constructor.name || '[Unknown Object]' : typeof _compareAnnotations === 'undefined' ? 'undefined' : _typeof(_compareAnnotations)));
    }

    if (_compareAnnotations == null || typeof _compareAnnotations === 'boolean') {
      return _compareAnnotations;
    } else {
      throw new TypeError('Function "staticCheckAnnotation" return value violates contract, expected ?bool got ' + (_compareAnnotations === null ? 'null' : (typeof _compareAnnotations === 'undefined' ? 'undefined' : _typeof(_compareAnnotations)) === 'object' && _compareAnnotations.constructor ? _compareAnnotations.constructor.name || '[Unknown Object]' : typeof _compareAnnotations === 'undefined' ? 'undefined' : _typeof(_compareAnnotations)));
    }
  }

  /**
   * Get the type annotation for a given node.
   */
  function getAnnotation(path) {
    var _ref5;

    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var annotation = undefined;
    try {
      annotation = getAnnotationShallow(path);

      if (!(annotation == null || TypeAnnotation(annotation))) {
        throw new TypeError('Value of variable "annotation" violates contract, expected ?TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
      }
    } catch (e) {
      if (e instanceof SyntaxError) {
        throw e;
      } else {
        console.error(e.stack);
      }
    }
    while (annotation && annotation.type === 'TypeAnnotation') {
      annotation = annotation.typeAnnotation;
    }
    _ref5 = annotation || t.anyTypeAnnotation();

    if (TypeAnnotation(_ref5)) {
      return _ref5;
    } else {
      throw new TypeError('Function "getAnnotation" return value violates contract, expected TypeAnnotation got ' + (_ref5 === null ? 'null' : (typeof _ref5 === 'undefined' ? 'undefined' : _typeof(_ref5)) === 'object' && _ref5.constructor ? _ref5.constructor.name || '[Unknown Object]' : typeof _ref5 === 'undefined' ? 'undefined' : _typeof(_ref5)));
    }
  }

  function getAnnotationShallow(path) {
    var _path$getTypeAnnotati, _createLiteralTypeAnn, _getThisExpressionAnn, _getAssignmentExpress, _getObjectMethodAnnot2, _getObjectPropertyAnn2, _getClassDeclarationA, _getClassMethodAnnota2, _getClassPropertyAnno2, _path$getTypeAnnotati2, _ref6;

    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var node = path.node;
    var scope = path.scope;

    if (node.type === 'TypeAlias') {
      var _node$right;

      _node$right = node.right;

      if (_node$right == null || TypeAnnotation(_node$right)) {
        return _node$right;
      } else {
        throw new TypeError('Function "getAnnotationShallow" return value violates contract, expected ?TypeAnnotation got ' + (_node$right === null ? 'null' : (typeof _node$right === 'undefined' ? 'undefined' : _typeof(_node$right)) === 'object' && _node$right.constructor ? _node$right.constructor.name || '[Unknown Object]' : typeof _node$right === 'undefined' ? 'undefined' : _typeof(_node$right)));
      }
    } else if (node.type === 'ClassProperty' && node.typeAnnotation) {
      var _getClassPropertyAnno;

      _getClassPropertyAnno = getClassPropertyAnnotation(path);

      if (!(_getClassPropertyAnno == null || TypeAnnotation(_getClassPropertyAnno))) {
        throw new TypeError('Value of variable "_getClassPropertyAnno" violates contract, expected ?TypeAnnotation got ' + (_getClassPropertyAnno === null ? 'null' : (typeof _getClassPropertyAnno === 'undefined' ? 'undefined' : _typeof(_getClassPropertyAnno)) === 'object' && _getClassPropertyAnno.constructor ? _getClassPropertyAnno.constructor.name || '[Unknown Object]' : typeof _getClassPropertyAnno === 'undefined' ? 'undefined' : _typeof(_getClassPropertyAnno)));
      }

      if (_getClassPropertyAnno == null || TypeAnnotation(_getClassPropertyAnno)) {
        return _getClassPropertyAnno;
      } else {
        throw new TypeError('Function "getAnnotationShallow" return value violates contract, expected ?TypeAnnotation got ' + (_getClassPropertyAnno === null ? 'null' : (typeof _getClassPropertyAnno === 'undefined' ? 'undefined' : _typeof(_getClassPropertyAnno)) === 'object' && _getClassPropertyAnno.constructor ? _getClassPropertyAnno.constructor.name || '[Unknown Object]' : typeof _getClassPropertyAnno === 'undefined' ? 'undefined' : _typeof(_getClassPropertyAnno)));
      }
    } else if (node.type === 'ClassMethod' && node.returnType) {
      var _getClassMethodAnnota;

      _getClassMethodAnnota = getClassMethodAnnotation(path);

      if (!(_getClassMethodAnnota == null || TypeAnnotation(_getClassMethodAnnota))) {
        throw new TypeError('Value of variable "_getClassMethodAnnota" violates contract, expected ?TypeAnnotation got ' + (_getClassMethodAnnota === null ? 'null' : (typeof _getClassMethodAnnota === 'undefined' ? 'undefined' : _typeof(_getClassMethodAnnota)) === 'object' && _getClassMethodAnnota.constructor ? _getClassMethodAnnota.constructor.name || '[Unknown Object]' : typeof _getClassMethodAnnota === 'undefined' ? 'undefined' : _typeof(_getClassMethodAnnota)));
      }

      if (_getClassMethodAnnota == null || TypeAnnotation(_getClassMethodAnnota)) {
        return _getClassMethodAnnota;
      } else {
        throw new TypeError('Function "getAnnotationShallow" return value violates contract, expected ?TypeAnnotation got ' + (_getClassMethodAnnota === null ? 'null' : (typeof _getClassMethodAnnota === 'undefined' ? 'undefined' : _typeof(_getClassMethodAnnota)) === 'object' && _getClassMethodAnnota.constructor ? _getClassMethodAnnota.constructor.name || '[Unknown Object]' : typeof _getClassMethodAnnota === 'undefined' ? 'undefined' : _typeof(_getClassMethodAnnota)));
      }
    } else if (node.type === 'ObjectProperty' && node.typeAnnotation) {
      var _getObjectPropertyAnn;

      _getObjectPropertyAnn = getObjectPropertyAnnotation(path);

      if (!(_getObjectPropertyAnn == null || TypeAnnotation(_getObjectPropertyAnn))) {
        throw new TypeError('Value of variable "_getObjectPropertyAnn" violates contract, expected ?TypeAnnotation got ' + (_getObjectPropertyAnn === null ? 'null' : (typeof _getObjectPropertyAnn === 'undefined' ? 'undefined' : _typeof(_getObjectPropertyAnn)) === 'object' && _getObjectPropertyAnn.constructor ? _getObjectPropertyAnn.constructor.name || '[Unknown Object]' : typeof _getObjectPropertyAnn === 'undefined' ? 'undefined' : _typeof(_getObjectPropertyAnn)));
      }

      if (_getObjectPropertyAnn == null || TypeAnnotation(_getObjectPropertyAnn)) {
        return _getObjectPropertyAnn;
      } else {
        throw new TypeError('Function "getAnnotationShallow" return value violates contract, expected ?TypeAnnotation got ' + (_getObjectPropertyAnn === null ? 'null' : (typeof _getObjectPropertyAnn === 'undefined' ? 'undefined' : _typeof(_getObjectPropertyAnn)) === 'object' && _getObjectPropertyAnn.constructor ? _getObjectPropertyAnn.constructor.name || '[Unknown Object]' : typeof _getObjectPropertyAnn === 'undefined' ? 'undefined' : _typeof(_getObjectPropertyAnn)));
      }
    } else if (node.type === 'ObjectMethod' && node.returnType) {
      var _getObjectMethodAnnot;

      _getObjectMethodAnnot = getObjectMethodAnnotation(path);

      if (!(_getObjectMethodAnnot == null || TypeAnnotation(_getObjectMethodAnnot))) {
        throw new TypeError('Value of variable "_getObjectMethodAnnot" violates contract, expected ?TypeAnnotation got ' + (_getObjectMethodAnnot === null ? 'null' : (typeof _getObjectMethodAnnot === 'undefined' ? 'undefined' : _typeof(_getObjectMethodAnnot)) === 'object' && _getObjectMethodAnnot.constructor ? _getObjectMethodAnnot.constructor.name || '[Unknown Object]' : typeof _getObjectMethodAnnot === 'undefined' ? 'undefined' : _typeof(_getObjectMethodAnnot)));
      }

      if (_getObjectMethodAnnot == null || TypeAnnotation(_getObjectMethodAnnot)) {
        return _getObjectMethodAnnot;
      } else {
        throw new TypeError('Function "getAnnotationShallow" return value violates contract, expected ?TypeAnnotation got ' + (_getObjectMethodAnnot === null ? 'null' : (typeof _getObjectMethodAnnot === 'undefined' ? 'undefined' : _typeof(_getObjectMethodAnnot)) === 'object' && _getObjectMethodAnnot.constructor ? _getObjectMethodAnnot.constructor.name || '[Unknown Object]' : typeof _getObjectMethodAnnot === 'undefined' ? 'undefined' : _typeof(_getObjectMethodAnnot)));
      }
    } else if (!node.typeAnnotation && !node.savedTypeAnnotation && !node.returnType) {
      switch (path.type) {
        case 'Identifier':
          var id = scope.getBindingIdentifier(node.name);
          if (!id) {
            break;
          }
          if (id.savedTypeAnnotation) {
            var _id$savedTypeAnnotati;

            _id$savedTypeAnnotati = id.savedTypeAnnotation;

            if (_id$savedTypeAnnotati == null || TypeAnnotation(_id$savedTypeAnnotati)) {
              return _id$savedTypeAnnotati;
            } else {
              throw new TypeError('Function "getAnnotationShallow" return value violates contract, expected ?TypeAnnotation got ' + (_id$savedTypeAnnotati === null ? 'null' : (typeof _id$savedTypeAnnotati === 'undefined' ? 'undefined' : _typeof(_id$savedTypeAnnotati)) === 'object' && _id$savedTypeAnnotati.constructor ? _id$savedTypeAnnotati.constructor.name || '[Unknown Object]' : typeof _id$savedTypeAnnotati === 'undefined' ? 'undefined' : _typeof(_id$savedTypeAnnotati)));
            }
          } else if (id.returnType) {
            var _id$returnType;

            _id$returnType = id.returnType;

            if (_id$returnType == null || TypeAnnotation(_id$returnType)) {
              return _id$returnType;
            } else {
              throw new TypeError('Function "getAnnotationShallow" return value violates contract, expected ?TypeAnnotation got ' + (_id$returnType === null ? 'null' : (typeof _id$returnType === 'undefined' ? 'undefined' : _typeof(_id$returnType)) === 'object' && _id$returnType.constructor ? _id$returnType.constructor.name || '[Unknown Object]' : typeof _id$returnType === 'undefined' ? 'undefined' : _typeof(_id$returnType)));
            }
          } else if (id.typeAnnotation) {
            var _id$typeAnnotation;

            _id$typeAnnotation = id.typeAnnotation;

            if (_id$typeAnnotation == null || TypeAnnotation(_id$typeAnnotation)) {
              return _id$typeAnnotation;
            } else {
              throw new TypeError('Function "getAnnotationShallow" return value violates contract, expected ?TypeAnnotation got ' + (_id$typeAnnotation === null ? 'null' : (typeof _id$typeAnnotation === 'undefined' ? 'undefined' : _typeof(_id$typeAnnotation)) === 'object' && _id$typeAnnotation.constructor ? _id$typeAnnotation.constructor.name || '[Unknown Object]' : typeof _id$typeAnnotation === 'undefined' ? 'undefined' : _typeof(_id$typeAnnotation)));
            }
          } else if (isPolymorphicType(id, scope)) {
            var _t$anyTypeAnnotation;

            _t$anyTypeAnnotation = t.anyTypeAnnotation();

            if (_t$anyTypeAnnotation == null || TypeAnnotation(_t$anyTypeAnnotation)) {
              return _t$anyTypeAnnotation;
            } else {
              throw new TypeError('Function "getAnnotationShallow" return value violates contract, expected ?TypeAnnotation got ' + (_t$anyTypeAnnotation === null ? 'null' : (typeof _t$anyTypeAnnotation === 'undefined' ? 'undefined' : _typeof(_t$anyTypeAnnotation)) === 'object' && _t$anyTypeAnnotation.constructor ? _t$anyTypeAnnotation.constructor.name || '[Unknown Object]' : typeof _t$anyTypeAnnotation === 'undefined' ? 'undefined' : _typeof(_t$anyTypeAnnotation)));
            }
          }
          {
            _path$getTypeAnnotati = path.getTypeAnnotation();

            if (_path$getTypeAnnotati == null || TypeAnnotation(_path$getTypeAnnotati)) {
              return _path$getTypeAnnotati;
            } else {
              throw new TypeError('Function "getAnnotationShallow" return value violates contract, expected ?TypeAnnotation got ' + (_path$getTypeAnnotati === null ? 'null' : (typeof _path$getTypeAnnotati === 'undefined' ? 'undefined' : _typeof(_path$getTypeAnnotati)) === 'object' && _path$getTypeAnnotati.constructor ? _path$getTypeAnnotati.constructor.name || '[Unknown Object]' : typeof _path$getTypeAnnotati === 'undefined' ? 'undefined' : _typeof(_path$getTypeAnnotati)));
            }
          }

        case 'StringLiteral':
        case 'NumericLiteral':
        case 'BooleanLiteral':
          {
            _createLiteralTypeAnn = createLiteralTypeAnnotation(path);

            if (!(_createLiteralTypeAnn == null || TypeAnnotation(_createLiteralTypeAnn))) {
              throw new TypeError('Value of variable "_createLiteralTypeAnn" violates contract, expected ?TypeAnnotation got ' + (_createLiteralTypeAnn === null ? 'null' : (typeof _createLiteralTypeAnn === 'undefined' ? 'undefined' : _typeof(_createLiteralTypeAnn)) === 'object' && _createLiteralTypeAnn.constructor ? _createLiteralTypeAnn.constructor.name || '[Unknown Object]' : typeof _createLiteralTypeAnn === 'undefined' ? 'undefined' : _typeof(_createLiteralTypeAnn)));
            }

            if (_createLiteralTypeAnn == null || TypeAnnotation(_createLiteralTypeAnn)) {
              return _createLiteralTypeAnn;
            } else {
              throw new TypeError('Function "getAnnotationShallow" return value violates contract, expected ?TypeAnnotation got ' + (_createLiteralTypeAnn === null ? 'null' : (typeof _createLiteralTypeAnn === 'undefined' ? 'undefined' : _typeof(_createLiteralTypeAnn)) === 'object' && _createLiteralTypeAnn.constructor ? _createLiteralTypeAnn.constructor.name || '[Unknown Object]' : typeof _createLiteralTypeAnn === 'undefined' ? 'undefined' : _typeof(_createLiteralTypeAnn)));
            }
          }

        case 'CallExpression':
          var callee = path.get('callee');
          if (callee.type === 'Identifier') {
            if (callee.name === 'Symbol') {
              var _t$genericTypeAnnotat;

              _t$genericTypeAnnotat = t.genericTypeAnnotation('Symbol');

              if (_t$genericTypeAnnotat == null || TypeAnnotation(_t$genericTypeAnnotat)) {
                return _t$genericTypeAnnotat;
              } else {
                throw new TypeError('Function "getAnnotationShallow" return value violates contract, expected ?TypeAnnotation got ' + (_t$genericTypeAnnotat === null ? 'null' : (typeof _t$genericTypeAnnotat === 'undefined' ? 'undefined' : _typeof(_t$genericTypeAnnotat)) === 'object' && _t$genericTypeAnnotat.constructor ? _t$genericTypeAnnotat.constructor.name || '[Unknown Object]' : typeof _t$genericTypeAnnotat === 'undefined' ? 'undefined' : _typeof(_t$genericTypeAnnotat)));
              }
            }
            var fn = getFunctionForIdentifier(callee);
            if (fn) {
              return getAnnotation(fn);
            }
          }
          break;
        case 'ThisExpression':
          {
            _getThisExpressionAnn = getThisExpressionAnnotation(path);

            if (!(_getThisExpressionAnn == null || TypeAnnotation(_getThisExpressionAnn))) {
              throw new TypeError('Value of variable "_getThisExpressionAnn" violates contract, expected ?TypeAnnotation got ' + (_getThisExpressionAnn === null ? 'null' : (typeof _getThisExpressionAnn === 'undefined' ? 'undefined' : _typeof(_getThisExpressionAnn)) === 'object' && _getThisExpressionAnn.constructor ? _getThisExpressionAnn.constructor.name || '[Unknown Object]' : typeof _getThisExpressionAnn === 'undefined' ? 'undefined' : _typeof(_getThisExpressionAnn)));
            }

            if (_getThisExpressionAnn == null || TypeAnnotation(_getThisExpressionAnn)) {
              return _getThisExpressionAnn;
            } else {
              throw new TypeError('Function "getAnnotationShallow" return value violates contract, expected ?TypeAnnotation got ' + (_getThisExpressionAnn === null ? 'null' : (typeof _getThisExpressionAnn === 'undefined' ? 'undefined' : _typeof(_getThisExpressionAnn)) === 'object' && _getThisExpressionAnn.constructor ? _getThisExpressionAnn.constructor.name || '[Unknown Object]' : typeof _getThisExpressionAnn === 'undefined' ? 'undefined' : _typeof(_getThisExpressionAnn)));
            }
          }

        case 'AssignmentExpression':
          {
            _getAssignmentExpress = getAssignmentExpressionAnnotation(path);

            if (!(_getAssignmentExpress == null || TypeAnnotation(_getAssignmentExpress))) {
              throw new TypeError('Value of variable "_getAssignmentExpress" violates contract, expected ?TypeAnnotation got ' + (_getAssignmentExpress === null ? 'null' : (typeof _getAssignmentExpress === 'undefined' ? 'undefined' : _typeof(_getAssignmentExpress)) === 'object' && _getAssignmentExpress.constructor ? _getAssignmentExpress.constructor.name || '[Unknown Object]' : typeof _getAssignmentExpress === 'undefined' ? 'undefined' : _typeof(_getAssignmentExpress)));
            }

            if (_getAssignmentExpress == null || TypeAnnotation(_getAssignmentExpress)) {
              return _getAssignmentExpress;
            } else {
              throw new TypeError('Function "getAnnotationShallow" return value violates contract, expected ?TypeAnnotation got ' + (_getAssignmentExpress === null ? 'null' : (typeof _getAssignmentExpress === 'undefined' ? 'undefined' : _typeof(_getAssignmentExpress)) === 'object' && _getAssignmentExpress.constructor ? _getAssignmentExpress.constructor.name || '[Unknown Object]' : typeof _getAssignmentExpress === 'undefined' ? 'undefined' : _typeof(_getAssignmentExpress)));
            }
          }

        case 'MemberExpression':
          return getMemberExpressionAnnotation(path);
        case 'ArrayExpression':
          return getArrayExpressionAnnotation(path);
        case 'ObjectExpression':
          return getObjectExpressionAnnotation(path);
        case 'BinaryExpression':
          return getBinaryExpressionAnnotation(path);
        case 'BinaryExpression':
          return getBinaryExpressionAnnotation(path);
        case 'LogicalExpression':
          return getLogicalExpressionAnnotation(path);
        case 'ConditionalExpression':
          return getConditionalExpressionAnnotation(path);
        case 'ObjectMethod':
          {
            _getObjectMethodAnnot2 = getObjectMethodAnnotation(path);

            if (!(_getObjectMethodAnnot2 == null || TypeAnnotation(_getObjectMethodAnnot2))) {
              throw new TypeError('Value of variable "_getObjectMethodAnnot2" violates contract, expected ?TypeAnnotation got ' + (_getObjectMethodAnnot2 === null ? 'null' : (typeof _getObjectMethodAnnot2 === 'undefined' ? 'undefined' : _typeof(_getObjectMethodAnnot2)) === 'object' && _getObjectMethodAnnot2.constructor ? _getObjectMethodAnnot2.constructor.name || '[Unknown Object]' : typeof _getObjectMethodAnnot2 === 'undefined' ? 'undefined' : _typeof(_getObjectMethodAnnot2)));
            }

            if (_getObjectMethodAnnot2 == null || TypeAnnotation(_getObjectMethodAnnot2)) {
              return _getObjectMethodAnnot2;
            } else {
              throw new TypeError('Function "getAnnotationShallow" return value violates contract, expected ?TypeAnnotation got ' + (_getObjectMethodAnnot2 === null ? 'null' : (typeof _getObjectMethodAnnot2 === 'undefined' ? 'undefined' : _typeof(_getObjectMethodAnnot2)) === 'object' && _getObjectMethodAnnot2.constructor ? _getObjectMethodAnnot2.constructor.name || '[Unknown Object]' : typeof _getObjectMethodAnnot2 === 'undefined' ? 'undefined' : _typeof(_getObjectMethodAnnot2)));
            }
          }

        case 'ObjectProperty':
          {
            _getObjectPropertyAnn2 = getObjectPropertyAnnotation(path);

            if (!(_getObjectPropertyAnn2 == null || TypeAnnotation(_getObjectPropertyAnn2))) {
              throw new TypeError('Value of variable "_getObjectPropertyAnn2" violates contract, expected ?TypeAnnotation got ' + (_getObjectPropertyAnn2 === null ? 'null' : (typeof _getObjectPropertyAnn2 === 'undefined' ? 'undefined' : _typeof(_getObjectPropertyAnn2)) === 'object' && _getObjectPropertyAnn2.constructor ? _getObjectPropertyAnn2.constructor.name || '[Unknown Object]' : typeof _getObjectPropertyAnn2 === 'undefined' ? 'undefined' : _typeof(_getObjectPropertyAnn2)));
            }

            if (_getObjectPropertyAnn2 == null || TypeAnnotation(_getObjectPropertyAnn2)) {
              return _getObjectPropertyAnn2;
            } else {
              throw new TypeError('Function "getAnnotationShallow" return value violates contract, expected ?TypeAnnotation got ' + (_getObjectPropertyAnn2 === null ? 'null' : (typeof _getObjectPropertyAnn2 === 'undefined' ? 'undefined' : _typeof(_getObjectPropertyAnn2)) === 'object' && _getObjectPropertyAnn2.constructor ? _getObjectPropertyAnn2.constructor.name || '[Unknown Object]' : typeof _getObjectPropertyAnn2 === 'undefined' ? 'undefined' : _typeof(_getObjectPropertyAnn2)));
            }
          }

        case 'ClassDeclaration':
          {
            _getClassDeclarationA = getClassDeclarationAnnotation(path);

            if (!(_getClassDeclarationA == null || TypeAnnotation(_getClassDeclarationA))) {
              throw new TypeError('Value of variable "_getClassDeclarationA" violates contract, expected ?TypeAnnotation got ' + (_getClassDeclarationA === null ? 'null' : (typeof _getClassDeclarationA === 'undefined' ? 'undefined' : _typeof(_getClassDeclarationA)) === 'object' && _getClassDeclarationA.constructor ? _getClassDeclarationA.constructor.name || '[Unknown Object]' : typeof _getClassDeclarationA === 'undefined' ? 'undefined' : _typeof(_getClassDeclarationA)));
            }

            if (_getClassDeclarationA == null || TypeAnnotation(_getClassDeclarationA)) {
              return _getClassDeclarationA;
            } else {
              throw new TypeError('Function "getAnnotationShallow" return value violates contract, expected ?TypeAnnotation got ' + (_getClassDeclarationA === null ? 'null' : (typeof _getClassDeclarationA === 'undefined' ? 'undefined' : _typeof(_getClassDeclarationA)) === 'object' && _getClassDeclarationA.constructor ? _getClassDeclarationA.constructor.name || '[Unknown Object]' : typeof _getClassDeclarationA === 'undefined' ? 'undefined' : _typeof(_getClassDeclarationA)));
            }
          }

        case 'ClassMethod':
          {
            _getClassMethodAnnota2 = getClassMethodAnnotation(path);

            if (!(_getClassMethodAnnota2 == null || TypeAnnotation(_getClassMethodAnnota2))) {
              throw new TypeError('Value of variable "_getClassMethodAnnota2" violates contract, expected ?TypeAnnotation got ' + (_getClassMethodAnnota2 === null ? 'null' : (typeof _getClassMethodAnnota2 === 'undefined' ? 'undefined' : _typeof(_getClassMethodAnnota2)) === 'object' && _getClassMethodAnnota2.constructor ? _getClassMethodAnnota2.constructor.name || '[Unknown Object]' : typeof _getClassMethodAnnota2 === 'undefined' ? 'undefined' : _typeof(_getClassMethodAnnota2)));
            }

            if (_getClassMethodAnnota2 == null || TypeAnnotation(_getClassMethodAnnota2)) {
              return _getClassMethodAnnota2;
            } else {
              throw new TypeError('Function "getAnnotationShallow" return value violates contract, expected ?TypeAnnotation got ' + (_getClassMethodAnnota2 === null ? 'null' : (typeof _getClassMethodAnnota2 === 'undefined' ? 'undefined' : _typeof(_getClassMethodAnnota2)) === 'object' && _getClassMethodAnnota2.constructor ? _getClassMethodAnnota2.constructor.name || '[Unknown Object]' : typeof _getClassMethodAnnota2 === 'undefined' ? 'undefined' : _typeof(_getClassMethodAnnota2)));
            }
          }

        case 'ClassProperty':
          {
            _getClassPropertyAnno2 = getClassPropertyAnnotation(path);

            if (!(_getClassPropertyAnno2 == null || TypeAnnotation(_getClassPropertyAnno2))) {
              throw new TypeError('Value of variable "_getClassPropertyAnno2" violates contract, expected ?TypeAnnotation got ' + (_getClassPropertyAnno2 === null ? 'null' : (typeof _getClassPropertyAnno2 === 'undefined' ? 'undefined' : _typeof(_getClassPropertyAnno2)) === 'object' && _getClassPropertyAnno2.constructor ? _getClassPropertyAnno2.constructor.name || '[Unknown Object]' : typeof _getClassPropertyAnno2 === 'undefined' ? 'undefined' : _typeof(_getClassPropertyAnno2)));
            }

            if (_getClassPropertyAnno2 == null || TypeAnnotation(_getClassPropertyAnno2)) {
              return _getClassPropertyAnno2;
            } else {
              throw new TypeError('Function "getAnnotationShallow" return value violates contract, expected ?TypeAnnotation got ' + (_getClassPropertyAnno2 === null ? 'null' : (typeof _getClassPropertyAnno2 === 'undefined' ? 'undefined' : _typeof(_getClassPropertyAnno2)) === 'object' && _getClassPropertyAnno2.constructor ? _getClassPropertyAnno2.constructor.name || '[Unknown Object]' : typeof _getClassPropertyAnno2 === 'undefined' ? 'undefined' : _typeof(_getClassPropertyAnno2)));
            }
          }

        default:
          {
            _path$getTypeAnnotati2 = path.getTypeAnnotation();

            if (_path$getTypeAnnotati2 == null || TypeAnnotation(_path$getTypeAnnotati2)) {
              return _path$getTypeAnnotati2;
            } else {
              throw new TypeError('Function "getAnnotationShallow" return value violates contract, expected ?TypeAnnotation got ' + (_path$getTypeAnnotati2 === null ? 'null' : (typeof _path$getTypeAnnotati2 === 'undefined' ? 'undefined' : _typeof(_path$getTypeAnnotati2)) === 'object' && _path$getTypeAnnotati2.constructor ? _path$getTypeAnnotati2.constructor.name || '[Unknown Object]' : typeof _path$getTypeAnnotati2 === 'undefined' ? 'undefined' : _typeof(_path$getTypeAnnotati2)));
            }
          }

      }
    }
    _ref6 = node.savedTypeAnnotation || node.returnType || node.typeAnnotation || path.getTypeAnnotation();

    if (_ref6 == null || TypeAnnotation(_ref6)) {
      return _ref6;
    } else {
      throw new TypeError('Function "getAnnotationShallow" return value violates contract, expected ?TypeAnnotation got ' + (_ref6 === null ? 'null' : (typeof _ref6 === 'undefined' ? 'undefined' : _typeof(_ref6)) === 'object' && _ref6.constructor ? _ref6.constructor.name || '[Unknown Object]' : typeof _ref6 === 'undefined' ? 'undefined' : _typeof(_ref6)));
    }
  }

  function createLiteralTypeAnnotation(path) {
    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var annotation = undefined;
    if (path.isStringLiteral()) {
      annotation = t.stringLiteralTypeAnnotation();
    } else if (path.isNumericLiteral()) {
      annotation = t.numericLiteralTypeAnnotation();
    } else if (path.isBooleanLiteral()) {
      annotation = t.booleanLiteralTypeAnnotation();
    } else {
      var _path$getTypeAnnotati3;

      _path$getTypeAnnotati3 = path.getTypeAnnotation();

      if (_path$getTypeAnnotati3 == null || TypeAnnotation(_path$getTypeAnnotati3)) {
        return _path$getTypeAnnotati3;
      } else {
        throw new TypeError('Function "createLiteralTypeAnnotation" return value violates contract, expected ?TypeAnnotation got ' + (_path$getTypeAnnotati3 === null ? 'null' : (typeof _path$getTypeAnnotati3 === 'undefined' ? 'undefined' : _typeof(_path$getTypeAnnotati3)) === 'object' && _path$getTypeAnnotati3.constructor ? _path$getTypeAnnotati3.constructor.name || '[Unknown Object]' : typeof _path$getTypeAnnotati3 === 'undefined' ? 'undefined' : _typeof(_path$getTypeAnnotati3)));
      }
    }
    annotation.value = path.node.value;

    if (annotation == null || TypeAnnotation(annotation)) {
      return annotation;
    } else {
      throw new TypeError('Function "createLiteralTypeAnnotation" return value violates contract, expected ?TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
    }
  }

  function getObjectPropertyAnnotation(path) {
    var _t$objectTypeProperty;

    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var node = path.node;

    var annotation = node.typeAnnotation || (node.value ? node.value.savedTypeAnnotation || node.value.typeAnnotation : t.anyTypeAnnotation());
    _t$objectTypeProperty = t.objectTypeProperty(t.identifier(node.key.name), annotation || t.anyTypeAnnotation());

    if (_t$objectTypeProperty == null || TypeAnnotation(_t$objectTypeProperty)) {
      return _t$objectTypeProperty;
    } else {
      throw new TypeError('Function "getObjectPropertyAnnotation" return value violates contract, expected ?TypeAnnotation got ' + (_t$objectTypeProperty === null ? 'null' : (typeof _t$objectTypeProperty === 'undefined' ? 'undefined' : _typeof(_t$objectTypeProperty)) === 'object' && _t$objectTypeProperty.constructor ? _t$objectTypeProperty.constructor.name || '[Unknown Object]' : typeof _t$objectTypeProperty === 'undefined' ? 'undefined' : _typeof(_t$objectTypeProperty)));
    }
  }

  function getObjectMethodAnnotation(path) {
    var _t$objectTypeProperty2;

    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var node = path.node;
    _t$objectTypeProperty2 = t.objectTypeProperty(t.identifier(node.key.name), t.functionTypeAnnotation(null, node.params.map(function (param) {
      return param.savedTypeAnnotation || param.typeAnnotation;
    }), null, node.savedTypeAnnotation || node.returnType || node.typeAnnotation || t.anyTypeAnnotation()));

    if (_t$objectTypeProperty2 == null || TypeAnnotation(_t$objectTypeProperty2)) {
      return _t$objectTypeProperty2;
    } else {
      throw new TypeError('Function "getObjectMethodAnnotation" return value violates contract, expected ?TypeAnnotation got ' + (_t$objectTypeProperty2 === null ? 'null' : (typeof _t$objectTypeProperty2 === 'undefined' ? 'undefined' : _typeof(_t$objectTypeProperty2)) === 'object' && _t$objectTypeProperty2.constructor ? _t$objectTypeProperty2.constructor.name || '[Unknown Object]' : typeof _t$objectTypeProperty2 === 'undefined' ? 'undefined' : _typeof(_t$objectTypeProperty2)));
    }
  }

  function getThisExpressionAnnotation(path) {
    var _t$objectTypeAnnotati;

    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var parent = path.parentPath;
    loop: while (parent) {
      switch (parent.type) {
        case 'ClassDeclaration':
          return getAnnotation(parent);
        case 'ClassBody':
          return getAnnotation(parent.parentPath);
        case 'ClassMethod':
        case 'ClassProperty':
          return getAnnotation(parent.parentPath.parentPath);
        case 'ObjectProperty':
          return getAnnotation(parent.parentPath);
        case 'ObjectMethod':
          return getAnnotation(parent.parentPath);
        case 'FunctionExpression':
          if (parent.parentPath.type === 'ObjectProperty') {
            return getAnnotation(parent.parentPath.parentPath);
          }
          break loop;
        case 'ArrowFunctionExpression':
          parent = parent.parentPath;
          continue;
      }
      if (parent.isFunction()) {
        break;
      }
      parent = parent.parentPath;
    }
    _t$objectTypeAnnotati = t.objectTypeAnnotation([]);

    if (_t$objectTypeAnnotati == null || TypeAnnotation(_t$objectTypeAnnotati)) {
      return _t$objectTypeAnnotati;
    } else {
      throw new TypeError('Function "getThisExpressionAnnotation" return value violates contract, expected ?TypeAnnotation got ' + (_t$objectTypeAnnotati === null ? 'null' : (typeof _t$objectTypeAnnotati === 'undefined' ? 'undefined' : _typeof(_t$objectTypeAnnotati)) === 'object' && _t$objectTypeAnnotati.constructor ? _t$objectTypeAnnotati.constructor.name || '[Unknown Object]' : typeof _t$objectTypeAnnotati === 'undefined' ? 'undefined' : _typeof(_t$objectTypeAnnotati)));
    }
  }

  function getClassDeclarationAnnotation(path) {
    var _t$objectTypeAnnotati2;

    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var body = path.get('body').get('body').map(getAnnotation);
    _t$objectTypeAnnotati2 = t.objectTypeAnnotation(body);

    if (_t$objectTypeAnnotati2 == null || TypeAnnotation(_t$objectTypeAnnotati2)) {
      return _t$objectTypeAnnotati2;
    } else {
      throw new TypeError('Function "getClassDeclarationAnnotation" return value violates contract, expected ?TypeAnnotation got ' + (_t$objectTypeAnnotati2 === null ? 'null' : (typeof _t$objectTypeAnnotati2 === 'undefined' ? 'undefined' : _typeof(_t$objectTypeAnnotati2)) === 'object' && _t$objectTypeAnnotati2.constructor ? _t$objectTypeAnnotati2.constructor.name || '[Unknown Object]' : typeof _t$objectTypeAnnotati2 === 'undefined' ? 'undefined' : _typeof(_t$objectTypeAnnotati2)));
    }
  }

  function getAssignmentExpressionAnnotation(path) {
    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    if (path.node.operator === '=') {
      return getAnnotation(path.get('right'));
    }
  }

  function getClassPropertyAnnotation(path) {
    var _t$objectTypeProperty3;

    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var node = path.node;

    var annotation = node.typeAnnotation || (node.value ? node.value.savedTypeAnnotation || node.value.typeAnnotation : t.anyTypeAnnotation());
    _t$objectTypeProperty3 = t.objectTypeProperty(t.identifier(node.key.name), annotation || t.anyTypeAnnotation());

    if (_t$objectTypeProperty3 == null || TypeAnnotation(_t$objectTypeProperty3)) {
      return _t$objectTypeProperty3;
    } else {
      throw new TypeError('Function "getClassPropertyAnnotation" return value violates contract, expected ?TypeAnnotation got ' + (_t$objectTypeProperty3 === null ? 'null' : (typeof _t$objectTypeProperty3 === 'undefined' ? 'undefined' : _typeof(_t$objectTypeProperty3)) === 'object' && _t$objectTypeProperty3.constructor ? _t$objectTypeProperty3.constructor.name || '[Unknown Object]' : typeof _t$objectTypeProperty3 === 'undefined' ? 'undefined' : _typeof(_t$objectTypeProperty3)));
    }
  }

  function getClassMethodAnnotation(path) {
    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var node = path.node;

    if (node.kind === 'get') {
      var _t$objectTypeProperty4;

      _t$objectTypeProperty4 = t.objectTypeProperty(t.identifier(node.key.name), node.savedTypeAnnotation || node.returnType || node.typeAnnotation || t.anyTypeAnnotation());

      if (_t$objectTypeProperty4 == null || TypeAnnotation(_t$objectTypeProperty4)) {
        return _t$objectTypeProperty4;
      } else {
        throw new TypeError('Function "getClassMethodAnnotation" return value violates contract, expected ?TypeAnnotation got ' + (_t$objectTypeProperty4 === null ? 'null' : (typeof _t$objectTypeProperty4 === 'undefined' ? 'undefined' : _typeof(_t$objectTypeProperty4)) === 'object' && _t$objectTypeProperty4.constructor ? _t$objectTypeProperty4.constructor.name || '[Unknown Object]' : typeof _t$objectTypeProperty4 === 'undefined' ? 'undefined' : _typeof(_t$objectTypeProperty4)));
      }
    } else if (node.kind === 'set') {
      var _t$objectTypeProperty5;

      _t$objectTypeProperty5 = t.objectTypeProperty(t.identifier(node.key.name), node.params.map(function (param) {
        return param.savedTypeAnnotation || param.typeAnnotation;
      }).shift() || t.anyTypeAnnotation());

      if (_t$objectTypeProperty5 == null || TypeAnnotation(_t$objectTypeProperty5)) {
        return _t$objectTypeProperty5;
      } else {
        throw new TypeError('Function "getClassMethodAnnotation" return value violates contract, expected ?TypeAnnotation got ' + (_t$objectTypeProperty5 === null ? 'null' : (typeof _t$objectTypeProperty5 === 'undefined' ? 'undefined' : _typeof(_t$objectTypeProperty5)) === 'object' && _t$objectTypeProperty5.constructor ? _t$objectTypeProperty5.constructor.name || '[Unknown Object]' : typeof _t$objectTypeProperty5 === 'undefined' ? 'undefined' : _typeof(_t$objectTypeProperty5)));
      }
    } else {
      var _t$objectTypeProperty6;

      _t$objectTypeProperty6 = t.objectTypeProperty(t.identifier(node.key.name), t.functionTypeAnnotation(null, node.params.map(function (param) {
        return param.savedTypeAnnotation || param.typeAnnotation;
      }), null, node.savedTypeAnnotation || node.returnType || node.typeAnnotation || t.anyTypeAnnotation()));

      if (_t$objectTypeProperty6 == null || TypeAnnotation(_t$objectTypeProperty6)) {
        return _t$objectTypeProperty6;
      } else {
        throw new TypeError('Function "getClassMethodAnnotation" return value violates contract, expected ?TypeAnnotation got ' + (_t$objectTypeProperty6 === null ? 'null' : (typeof _t$objectTypeProperty6 === 'undefined' ? 'undefined' : _typeof(_t$objectTypeProperty6)) === 'object' && _t$objectTypeProperty6.constructor ? _t$objectTypeProperty6.constructor.name || '[Unknown Object]' : typeof _t$objectTypeProperty6 === 'undefined' ? 'undefined' : _typeof(_t$objectTypeProperty6)));
      }
    }
  }

  function getBinaryExpressionAnnotation(path) {
    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var node = path.node;

    if (isBooleanExpression(node)) {
      var _t$booleanTypeAnnotat;

      _t$booleanTypeAnnotat = t.booleanTypeAnnotation();

      if (TypeAnnotation(_t$booleanTypeAnnotat)) {
        return _t$booleanTypeAnnotat;
      } else {
        throw new TypeError('Function "getBinaryExpressionAnnotation" return value violates contract, expected TypeAnnotation got ' + (_t$booleanTypeAnnotat === null ? 'null' : (typeof _t$booleanTypeAnnotat === 'undefined' ? 'undefined' : _typeof(_t$booleanTypeAnnotat)) === 'object' && _t$booleanTypeAnnotat.constructor ? _t$booleanTypeAnnotat.constructor.name || '[Unknown Object]' : typeof _t$booleanTypeAnnotat === 'undefined' ? 'undefined' : _typeof(_t$booleanTypeAnnotat)));
      }
    } else {
      var _t$anyTypeAnnotation2;

      _t$anyTypeAnnotation2 = t.anyTypeAnnotation();

      if (TypeAnnotation(_t$anyTypeAnnotation2)) {
        return _t$anyTypeAnnotation2;
      } else {
        throw new TypeError('Function "getBinaryExpressionAnnotation" return value violates contract, expected TypeAnnotation got ' + (_t$anyTypeAnnotation2 === null ? 'null' : (typeof _t$anyTypeAnnotation2 === 'undefined' ? 'undefined' : _typeof(_t$anyTypeAnnotation2)) === 'object' && _t$anyTypeAnnotation2.constructor ? _t$anyTypeAnnotation2.constructor.name || '[Unknown Object]' : typeof _t$anyTypeAnnotation2 === 'undefined' ? 'undefined' : _typeof(_t$anyTypeAnnotation2)));
      }
    }
  }

  function getLogicalExpressionAnnotation(path) {
    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var node = path.node;

    if (isBooleanExpression(node)) {
      var _t$booleanTypeAnnotat2;

      _t$booleanTypeAnnotat2 = t.booleanTypeAnnotation();

      if (TypeAnnotation(_t$booleanTypeAnnotat2)) {
        return _t$booleanTypeAnnotat2;
      } else {
        throw new TypeError('Function "getLogicalExpressionAnnotation" return value violates contract, expected TypeAnnotation got ' + (_t$booleanTypeAnnotat2 === null ? 'null' : (typeof _t$booleanTypeAnnotat2 === 'undefined' ? 'undefined' : _typeof(_t$booleanTypeAnnotat2)) === 'object' && _t$booleanTypeAnnotat2.constructor ? _t$booleanTypeAnnotat2.constructor.name || '[Unknown Object]' : typeof _t$booleanTypeAnnotat2 === 'undefined' ? 'undefined' : _typeof(_t$booleanTypeAnnotat2)));
      }
    } else {
      var _t$anyTypeAnnotation3;

      var left = path.get('left');
      var right = path.get('right');
      switch (node.operator) {
        case '&&':
        case '||':
          var _ref33 = [getAnnotation(left), getAnnotation(right)];
          left = _ref33[0];
          right = _ref33[1];

          if (t.isUnionTypeAnnotation(left)) {
            if (t.isUnionTypeAnnotation(right)) {
              var _t$unionTypeAnnotatio;

              _t$unionTypeAnnotatio = t.unionTypeAnnotation(left.types.concat(right.types));

              if (TypeAnnotation(_t$unionTypeAnnotatio)) {
                return _t$unionTypeAnnotatio;
              } else {
                throw new TypeError('Function "getLogicalExpressionAnnotation" return value violates contract, expected TypeAnnotation got ' + (_t$unionTypeAnnotatio === null ? 'null' : (typeof _t$unionTypeAnnotatio === 'undefined' ? 'undefined' : _typeof(_t$unionTypeAnnotatio)) === 'object' && _t$unionTypeAnnotatio.constructor ? _t$unionTypeAnnotatio.constructor.name || '[Unknown Object]' : typeof _t$unionTypeAnnotatio === 'undefined' ? 'undefined' : _typeof(_t$unionTypeAnnotatio)));
              }
            } else {
              var _t$unionTypeAnnotatio2;

              _t$unionTypeAnnotatio2 = t.unionTypeAnnotation(left.types.concat(right));

              if (TypeAnnotation(_t$unionTypeAnnotatio2)) {
                return _t$unionTypeAnnotatio2;
              } else {
                throw new TypeError('Function "getLogicalExpressionAnnotation" return value violates contract, expected TypeAnnotation got ' + (_t$unionTypeAnnotatio2 === null ? 'null' : (typeof _t$unionTypeAnnotatio2 === 'undefined' ? 'undefined' : _typeof(_t$unionTypeAnnotatio2)) === 'object' && _t$unionTypeAnnotatio2.constructor ? _t$unionTypeAnnotatio2.constructor.name || '[Unknown Object]' : typeof _t$unionTypeAnnotatio2 === 'undefined' ? 'undefined' : _typeof(_t$unionTypeAnnotatio2)));
              }
            }
          } else {
            var _t$unionTypeAnnotatio3;

            _t$unionTypeAnnotatio3 = t.unionTypeAnnotation([left, right]);

            if (TypeAnnotation(_t$unionTypeAnnotatio3)) {
              return _t$unionTypeAnnotatio3;
            } else {
              throw new TypeError('Function "getLogicalExpressionAnnotation" return value violates contract, expected TypeAnnotation got ' + (_t$unionTypeAnnotatio3 === null ? 'null' : (typeof _t$unionTypeAnnotatio3 === 'undefined' ? 'undefined' : _typeof(_t$unionTypeAnnotatio3)) === 'object' && _t$unionTypeAnnotatio3.constructor ? _t$unionTypeAnnotatio3.constructor.name || '[Unknown Object]' : typeof _t$unionTypeAnnotatio3 === 'undefined' ? 'undefined' : _typeof(_t$unionTypeAnnotatio3)));
            }
          }
      }
      _t$anyTypeAnnotation3 = t.anyTypeAnnotation();

      if (TypeAnnotation(_t$anyTypeAnnotation3)) {
        return _t$anyTypeAnnotation3;
      } else {
        throw new TypeError('Function "getLogicalExpressionAnnotation" return value violates contract, expected TypeAnnotation got ' + (_t$anyTypeAnnotation3 === null ? 'null' : (typeof _t$anyTypeAnnotation3 === 'undefined' ? 'undefined' : _typeof(_t$anyTypeAnnotation3)) === 'object' && _t$anyTypeAnnotation3.constructor ? _t$anyTypeAnnotation3.constructor.name || '[Unknown Object]' : typeof _t$anyTypeAnnotation3 === 'undefined' ? 'undefined' : _typeof(_t$anyTypeAnnotation3)));
      }
    }
  }

  function getConditionalExpressionAnnotation(path) {
    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var node = path.node;

    var consequent = getAnnotation(path.get('consequent'));
    var alternate = getAnnotation(path.get('alternate'));
    if (t.isUnionTypeAnnotation(consequent)) {
      if (t.isUnionTypeAnnotation(alternate)) {
        var _t$unionTypeAnnotatio4;

        _t$unionTypeAnnotatio4 = t.unionTypeAnnotation(consequent.types.concat(alternate.types));

        if (TypeAnnotation(_t$unionTypeAnnotatio4)) {
          return _t$unionTypeAnnotatio4;
        } else {
          throw new TypeError('Function "getConditionalExpressionAnnotation" return value violates contract, expected TypeAnnotation got ' + (_t$unionTypeAnnotatio4 === null ? 'null' : (typeof _t$unionTypeAnnotatio4 === 'undefined' ? 'undefined' : _typeof(_t$unionTypeAnnotatio4)) === 'object' && _t$unionTypeAnnotatio4.constructor ? _t$unionTypeAnnotatio4.constructor.name || '[Unknown Object]' : typeof _t$unionTypeAnnotatio4 === 'undefined' ? 'undefined' : _typeof(_t$unionTypeAnnotatio4)));
        }
      } else {
        var _t$unionTypeAnnotatio5;

        _t$unionTypeAnnotatio5 = t.unionTypeAnnotation(consequent.types.concat(alternate));

        if (TypeAnnotation(_t$unionTypeAnnotatio5)) {
          return _t$unionTypeAnnotatio5;
        } else {
          throw new TypeError('Function "getConditionalExpressionAnnotation" return value violates contract, expected TypeAnnotation got ' + (_t$unionTypeAnnotatio5 === null ? 'null' : (typeof _t$unionTypeAnnotatio5 === 'undefined' ? 'undefined' : _typeof(_t$unionTypeAnnotatio5)) === 'object' && _t$unionTypeAnnotatio5.constructor ? _t$unionTypeAnnotatio5.constructor.name || '[Unknown Object]' : typeof _t$unionTypeAnnotatio5 === 'undefined' ? 'undefined' : _typeof(_t$unionTypeAnnotatio5)));
        }
      }
    } else {
      var _t$unionTypeAnnotatio6;

      _t$unionTypeAnnotatio6 = t.unionTypeAnnotation([consequent, alternate]);

      if (TypeAnnotation(_t$unionTypeAnnotatio6)) {
        return _t$unionTypeAnnotatio6;
      } else {
        throw new TypeError('Function "getConditionalExpressionAnnotation" return value violates contract, expected TypeAnnotation got ' + (_t$unionTypeAnnotatio6 === null ? 'null' : (typeof _t$unionTypeAnnotatio6 === 'undefined' ? 'undefined' : _typeof(_t$unionTypeAnnotatio6)) === 'object' && _t$unionTypeAnnotatio6.constructor ? _t$unionTypeAnnotatio6.constructor.name || '[Unknown Object]' : typeof _t$unionTypeAnnotatio6 === 'undefined' ? 'undefined' : _typeof(_t$unionTypeAnnotatio6)));
      }
    }
  }

  function getArrayExpressionAnnotation(path) {
    var _t$genericTypeAnnotat2;

    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    _t$genericTypeAnnotat2 = t.genericTypeAnnotation(t.identifier('Array'), t.typeParameterDeclaration(path.get('elements').map(getAnnotation)));

    if (TypeAnnotation(_t$genericTypeAnnotat2)) {
      return _t$genericTypeAnnotat2;
    } else {
      throw new TypeError('Function "getArrayExpressionAnnotation" return value violates contract, expected TypeAnnotation got ' + (_t$genericTypeAnnotat2 === null ? 'null' : (typeof _t$genericTypeAnnotat2 === 'undefined' ? 'undefined' : _typeof(_t$genericTypeAnnotat2)) === 'object' && _t$genericTypeAnnotat2.constructor ? _t$genericTypeAnnotat2.constructor.name || '[Unknown Object]' : typeof _t$genericTypeAnnotat2 === 'undefined' ? 'undefined' : _typeof(_t$genericTypeAnnotat2)));
    }
  }

  function getObjectExpressionAnnotation(path) {
    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var annotation = t.objectTypeAnnotation(path.get('properties').map(function (property) {
      if (property.computed) {
        return;
      } else {
        return getAnnotation(property);
      }
    }).filter(identity));

    if (TypeAnnotation(annotation)) {
      return annotation;
    } else {
      throw new TypeError('Function "getObjectExpressionAnnotation" return value violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
    }
  }

  function getMemberExpressionAnnotation(path) {
    var _ref7;

    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    if (path.node.computed) {
      var _getComputedMemberExp;

      _getComputedMemberExp = getComputedMemberExpressionAnnotation(path);

      if (!TypeAnnotation(_getComputedMemberExp)) {
        throw new TypeError('Value of variable "_getComputedMemberExp" violates contract, expected TypeAnnotation got ' + (_getComputedMemberExp === null ? 'null' : (typeof _getComputedMemberExp === 'undefined' ? 'undefined' : _typeof(_getComputedMemberExp)) === 'object' && _getComputedMemberExp.constructor ? _getComputedMemberExp.constructor.name || '[Unknown Object]' : typeof _getComputedMemberExp === 'undefined' ? 'undefined' : _typeof(_getComputedMemberExp)));
      }

      if (TypeAnnotation(_getComputedMemberExp)) {
        return _getComputedMemberExp;
      } else {
        throw new TypeError('Function "getMemberExpressionAnnotation" return value violates contract, expected TypeAnnotation got ' + (_getComputedMemberExp === null ? 'null' : (typeof _getComputedMemberExp === 'undefined' ? 'undefined' : _typeof(_getComputedMemberExp)) === 'object' && _getComputedMemberExp.constructor ? _getComputedMemberExp.constructor.name || '[Unknown Object]' : typeof _getComputedMemberExp === 'undefined' ? 'undefined' : _typeof(_getComputedMemberExp)));
      }
    }
    var stack = [];
    var target = path;
    while (target.isMemberExpression()) {
      stack.push(target);
      if (target.node.computed) {
        break;
      }
      target = target.get('object');
    }
    var objectAnnotation = stack.reduceRight(function (last, target) {
      var annotation = last;
      if (annotation == null) {
        if (stack.length === 1) {
          annotation = getAnnotation(target.get('object'));

          if (!TypeAnnotation(annotation)) {
            throw new TypeError('Value of variable "annotation" violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
          }
        } else {
          return getAnnotation(target);
        }
      }

      switch (annotation.type) {
        case 'AnyTypeAnnotation':
          return annotation;
        case 'NullableTypeAnnotation':
        case 'TypeAnnotation':
          annotation = annotation.typeAnnotation;
      }

      if (annotation.type === 'GenericTypeAnnotation') {
        var typeChecker = getTypeChecker(annotation.id, path.scope);
        if (typeChecker) {
          annotation = getAnnotation(typeChecker);

          if (!TypeAnnotation(annotation)) {
            throw new TypeError('Value of variable "annotation" violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
          }
        } else {
          var binding = path.scope.getBinding(annotation.id.name);
          if (binding) {
            annotation = getAnnotation(binding.path);

            if (!TypeAnnotation(annotation)) {
              throw new TypeError('Value of variable "annotation" violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
            }
          }
        }
      }
      switch (annotation.type) {
        case 'AnyTypeAnnotation':
          return annotation;
        case 'ObjectTypeAnnotation':
          var id = target.get('property').node;
          var _iteratorNormalCompletion6 = true;
          var _didIteratorError6 = false;
          var _iteratorError6 = undefined;

          try {
            for (var _iterator6 = (annotation.properties || [])[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
              var _step6$value = _step6.value;
              var key = _step6$value.key;
              var value = _step6$value.value;

              if (key.name === id.name) {
                return value;
              }
            }
          } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion6 && _iterator6.return) {
                _iterator6.return();
              }
            } finally {
              if (_didIteratorError6) {
                throw _iteratorError6;
              }
            }
          }

      }
      return t.anyTypeAnnotation();
    }, null);

    _ref7 = objectAnnotation || path.getTypeAnnotation();

    if (TypeAnnotation(_ref7)) {
      return _ref7;
    } else {
      throw new TypeError('Function "getMemberExpressionAnnotation" return value violates contract, expected TypeAnnotation got ' + (_ref7 === null ? 'null' : (typeof _ref7 === 'undefined' ? 'undefined' : _typeof(_ref7)) === 'object' && _ref7.constructor ? _ref7.constructor.name || '[Unknown Object]' : typeof _ref7 === 'undefined' ? 'undefined' : _typeof(_ref7)));
    }
  }

  function getComputedMemberExpressionAnnotation(path) {
    var _path$getTypeAnnotati5;

    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var object = path.get('object');
    var property = path.get('property');
    var objectAnnotation = getAnnotation(object);
    if (objectAnnotation.type === 'TypeAnnotation' || objectAnnotation.type === 'NullableTypeAnnotation') {
      objectAnnotation = objectAnnotation.typeAnnotation;
    }
    var propertyAnnotation = getAnnotation(property);
    if (propertyAnnotation.type === 'TypeAnnotation' || propertyAnnotation.type === 'NullableTypeAnnotation') {
      propertyAnnotation = propertyAnnotation.typeAnnotation;
    }

    var _property$evaluate = property.evaluate();

    var confident = _property$evaluate.confident;
    var value = _property$evaluate.value;

    if (!confident) {
      var _path$getTypeAnnotati4;

      _path$getTypeAnnotati4 = path.getTypeAnnotation();

      if (TypeAnnotation(_path$getTypeAnnotati4)) {
        return _path$getTypeAnnotati4;
      } else {
        throw new TypeError('Function "getComputedMemberExpressionAnnotation" return value violates contract, expected TypeAnnotation got ' + (_path$getTypeAnnotati4 === null ? 'null' : (typeof _path$getTypeAnnotati4 === 'undefined' ? 'undefined' : _typeof(_path$getTypeAnnotati4)) === 'object' && _path$getTypeAnnotati4.constructor ? _path$getTypeAnnotati4.constructor.name || '[Unknown Object]' : typeof _path$getTypeAnnotati4 === 'undefined' ? 'undefined' : _typeof(_path$getTypeAnnotati4)));
      }
    }
    switch (objectAnnotation.type) {
      case 'TupleTypeAnnotation':
        if (objectAnnotation.types.length === 0) {
          break;
        } else if (typeof value === 'number') {
          var _objectAnnotation$typ;

          if (!objectAnnotation.types[value]) {
            throw path.buildCodeFrameError('Invalid computed member expression for tuple: ' + humanReadableType(objectAnnotation));
          }
          _objectAnnotation$typ = objectAnnotation.types[value];

          if (TypeAnnotation(_objectAnnotation$typ)) {
            return _objectAnnotation$typ;
          } else {
            throw new TypeError('Function "getComputedMemberExpressionAnnotation" return value violates contract, expected TypeAnnotation got ' + (_objectAnnotation$typ === null ? 'null' : (typeof _objectAnnotation$typ === 'undefined' ? 'undefined' : _typeof(_objectAnnotation$typ)) === 'object' && _objectAnnotation$typ.constructor ? _objectAnnotation$typ.constructor.name || '[Unknown Object]' : typeof _objectAnnotation$typ === 'undefined' ? 'undefined' : _typeof(_objectAnnotation$typ)));
          }
        } else {
          throw path.buildCodeFrameError('Invalid computed member expression for tuple: ' + humanReadableType(objectAnnotation));
        }
        break;
    }
    _path$getTypeAnnotati5 = path.getTypeAnnotation();

    if (TypeAnnotation(_path$getTypeAnnotati5)) {
      return _path$getTypeAnnotati5;
    } else {
      throw new TypeError('Function "getComputedMemberExpressionAnnotation" return value violates contract, expected TypeAnnotation got ' + (_path$getTypeAnnotati5 === null ? 'null' : (typeof _path$getTypeAnnotati5 === 'undefined' ? 'undefined' : _typeof(_path$getTypeAnnotati5)) === 'object' && _path$getTypeAnnotati5.constructor ? _path$getTypeAnnotati5.constructor.name || '[Unknown Object]' : typeof _path$getTypeAnnotati5 === 'undefined' ? 'undefined' : _typeof(_path$getTypeAnnotati5)));
    }
  }

  function getFunctionForIdentifier(path) {
    var _ref8;

    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    if (path.type !== 'Identifier') {
      return false;
    }
    var ref = path.scope.getBinding(path.node.name);
    if (!ref) {
      return false;
    }
    _ref8 = t.isFunction(ref.path.parent) && ref.path.parentPath;

    if (typeof _ref8 === 'boolean' || Node(_ref8)) {
      return _ref8;
    } else {
      throw new TypeError('Function "getFunctionForIdentifier" return value violates contract, expected bool | Node got ' + (_ref8 === null ? 'null' : (typeof _ref8 === 'undefined' ? 'undefined' : _typeof(_ref8)) === 'object' && _ref8.constructor ? _ref8.constructor.name || '[Unknown Object]' : typeof _ref8 === 'undefined' ? 'undefined' : _typeof(_ref8)));
    }
  }

  /**
   * Returns `true` if the annotation is definitely for an array,
   * otherwise `false`.
   */
  function isStrictlyArrayAnnotation(annotation) {
    var _annotation$types$eve;

    if (!TypeAnnotation(annotation)) {
      throw new TypeError('Value of argument "annotation" violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
    }

    switch (annotation.type) {
      case 'TypeAnnotation':
      case 'FunctonTypeParam':
        return isStrictlyArrayAnnotation(annotation.typeAnnotation);
      case 'GenericTypeAnnotation':
        return annotation.id.name === 'Array';
      case 'UnionTypeAnnotation':
        {
          _annotation$types$eve = annotation.types.every(isStrictlyArrayAnnotation);

          if (typeof _annotation$types$eve === 'boolean') {
            return _annotation$types$eve;
          } else {
            throw new TypeError('Function "isStrictlyArrayAnnotation" return value violates contract, expected bool got ' + (_annotation$types$eve === null ? 'null' : (typeof _annotation$types$eve === 'undefined' ? 'undefined' : _typeof(_annotation$types$eve)) === 'object' && _annotation$types$eve.constructor ? _annotation$types$eve.constructor.name || '[Unknown Object]' : typeof _annotation$types$eve === 'undefined' ? 'undefined' : _typeof(_annotation$types$eve)));
          }
        }

      default:
        return false;
    }
  }

  function compareMaybeUnion(annotation, comparator) {
    if (!TypeAnnotation(annotation)) {
      throw new TypeError('Value of argument "annotation" violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
    }

    if (!(typeof comparator === 'function')) {
      throw new TypeError('Value of argument "comparator" violates contract, expected (node: TypeAnnotation) => ?bool got ' + (comparator === null ? 'null' : (typeof comparator === 'undefined' ? 'undefined' : _typeof(comparator)) === 'object' && comparator.constructor ? comparator.constructor.name || '[Unknown Object]' : typeof comparator === 'undefined' ? 'undefined' : _typeof(comparator)));
    }

    var falseCount = 0;
    var _iteratorNormalCompletion7 = true;
    var _didIteratorError7 = false;
    var _iteratorError7 = undefined;

    try {
      for (var _iterator7 = annotation.types[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
        var _type5 = _step7.value;

        var result = comparator(_type5);
        if (result === true) {
          return true;
        } else if (result === false) {
          falseCount++;
        }
      }
    } catch (err) {
      _didIteratorError7 = true;
      _iteratorError7 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion7 && _iterator7.return) {
          _iterator7.return();
        }
      } finally {
        if (_didIteratorError7) {
          throw _iteratorError7;
        }
      }
    }

    if (falseCount === annotation.types.length) {
      return false;
    } else {
      if (null == null || typeof null === 'boolean') {
        return null;
      } else {
        throw new TypeError('Function "compareMaybeUnion" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
      }
    }
  }

  /**
   * Returns `true` if the annotation is compatible with a number,
   * `false` if it definitely isn't, or `null` if we're not sure.
   */
  function maybeNumberAnnotation(annotation) {
    var _maybeNumberAnnotatio3, _compareMaybeUnion;

    if (!TypeAnnotation(annotation)) {
      throw new TypeError('Value of argument "annotation" violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
    }

    switch (annotation.type) {
      case 'TypeAnnotation':
      case 'FunctonTypeParam':
      case 'NullableTypeAnnotation':
        {
          _maybeNumberAnnotatio3 = maybeNumberAnnotation(annotation.typeAnnotation);

          if (!(_maybeNumberAnnotatio3 == null || typeof _maybeNumberAnnotatio3 === 'boolean')) {
            throw new TypeError('Value of variable "_maybeNumberAnnotatio3" violates contract, expected ?bool got ' + (_maybeNumberAnnotatio3 === null ? 'null' : (typeof _maybeNumberAnnotatio3 === 'undefined' ? 'undefined' : _typeof(_maybeNumberAnnotatio3)) === 'object' && _maybeNumberAnnotatio3.constructor ? _maybeNumberAnnotatio3.constructor.name || '[Unknown Object]' : typeof _maybeNumberAnnotatio3 === 'undefined' ? 'undefined' : _typeof(_maybeNumberAnnotatio3)));
          }

          if (_maybeNumberAnnotatio3 == null || typeof _maybeNumberAnnotatio3 === 'boolean') {
            return _maybeNumberAnnotatio3;
          } else {
            throw new TypeError('Function "maybeNumberAnnotation" return value violates contract, expected ?bool got ' + (_maybeNumberAnnotatio3 === null ? 'null' : (typeof _maybeNumberAnnotatio3 === 'undefined' ? 'undefined' : _typeof(_maybeNumberAnnotatio3)) === 'object' && _maybeNumberAnnotatio3.constructor ? _maybeNumberAnnotatio3.constructor.name || '[Unknown Object]' : typeof _maybeNumberAnnotatio3 === 'undefined' ? 'undefined' : _typeof(_maybeNumberAnnotatio3)));
          }
        }

      case 'NumberTypeAnnotation':
      case 'NumericLiteralTypeAnnotation':
        return true;
      case 'GenericTypeAnnotation':
        switch (annotation.id.name) {
          case 'Array':
          case 'Function':
          case 'Object':
          case 'String':
          case 'Boolean':
          case 'Date':
          case 'RegExp':
            return false;
          default:
            {
              if (null == null || typeof null === 'boolean') {
                return null;
              } else {
                throw new TypeError('Function "maybeNumberAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
              }
            }

        }
      case 'UnionTypeAnnotation':
        {
          _compareMaybeUnion = compareMaybeUnion(annotation, maybeNumberAnnotation);

          if (!(_compareMaybeUnion == null || typeof _compareMaybeUnion === 'boolean')) {
            throw new TypeError('Value of variable "_compareMaybeUnion" violates contract, expected ?bool got ' + (_compareMaybeUnion === null ? 'null' : (typeof _compareMaybeUnion === 'undefined' ? 'undefined' : _typeof(_compareMaybeUnion)) === 'object' && _compareMaybeUnion.constructor ? _compareMaybeUnion.constructor.name || '[Unknown Object]' : typeof _compareMaybeUnion === 'undefined' ? 'undefined' : _typeof(_compareMaybeUnion)));
          }

          if (_compareMaybeUnion == null || typeof _compareMaybeUnion === 'boolean') {
            return _compareMaybeUnion;
          } else {
            throw new TypeError('Function "maybeNumberAnnotation" return value violates contract, expected ?bool got ' + (_compareMaybeUnion === null ? 'null' : (typeof _compareMaybeUnion === 'undefined' ? 'undefined' : _typeof(_compareMaybeUnion)) === 'object' && _compareMaybeUnion.constructor ? _compareMaybeUnion.constructor.name || '[Unknown Object]' : typeof _compareMaybeUnion === 'undefined' ? 'undefined' : _typeof(_compareMaybeUnion)));
          }
        }

      case 'AnyTypeAnnotation':
      case 'MixedTypeAnnotation':
      case 'IntersectionTypeAnnotation':
        {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "maybeNumberAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }

      default:
        return false;
    }
  }

  /**
   * Returns `true` if the annotation is compatible with a string,
   * `false` if it definitely isn't, or `null` if we're not sure.
   */
  function maybeStringAnnotation(annotation) {
    var _maybeStringAnnotatio3;

    if (!TypeAnnotation(annotation)) {
      throw new TypeError('Value of argument "annotation" violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
    }

    switch (annotation.type) {
      case 'TypeAnnotation':
      case 'FunctonTypeParam':
      case 'NullableTypeAnnotation':
        {
          _maybeStringAnnotatio3 = maybeStringAnnotation(annotation.typeAnnotation);

          if (!(_maybeStringAnnotatio3 == null || typeof _maybeStringAnnotatio3 === 'boolean')) {
            throw new TypeError('Value of variable "_maybeStringAnnotatio3" violates contract, expected ?bool got ' + (_maybeStringAnnotatio3 === null ? 'null' : (typeof _maybeStringAnnotatio3 === 'undefined' ? 'undefined' : _typeof(_maybeStringAnnotatio3)) === 'object' && _maybeStringAnnotatio3.constructor ? _maybeStringAnnotatio3.constructor.name || '[Unknown Object]' : typeof _maybeStringAnnotatio3 === 'undefined' ? 'undefined' : _typeof(_maybeStringAnnotatio3)));
          }

          if (_maybeStringAnnotatio3 == null || typeof _maybeStringAnnotatio3 === 'boolean') {
            return _maybeStringAnnotatio3;
          } else {
            throw new TypeError('Function "maybeStringAnnotation" return value violates contract, expected ?bool got ' + (_maybeStringAnnotatio3 === null ? 'null' : (typeof _maybeStringAnnotatio3 === 'undefined' ? 'undefined' : _typeof(_maybeStringAnnotatio3)) === 'object' && _maybeStringAnnotatio3.constructor ? _maybeStringAnnotatio3.constructor.name || '[Unknown Object]' : typeof _maybeStringAnnotatio3 === 'undefined' ? 'undefined' : _typeof(_maybeStringAnnotatio3)));
          }
        }

      case 'StringTypeAnnotation':
        return true;
      case 'StringLiteralTypeAnnotation':
        {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "maybeStringAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }

      case 'GenericTypeAnnotation':
        switch (annotation.id.name) {
          case 'Array':
          case 'Function':
          case 'Object':
          case 'Number':
          case 'Boolean':
          case 'Date':
          case 'RegExp':
            return false;
          default:
            {
              if (null == null || typeof null === 'boolean') {
                return null;
              } else {
                throw new TypeError('Function "maybeStringAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
              }
            }

        }
      case 'UnionTypeAnnotation':
        var falseCount = 0;
        var _iteratorNormalCompletion8 = true;
        var _didIteratorError8 = false;
        var _iteratorError8 = undefined;

        try {
          for (var _iterator8 = annotation.types[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
            var _type6 = _step8.value;

            var result = maybeStringAnnotation(_type6);
            if (result === true) {
              return true;
            } else if (result === false) {
              falseCount++;
            }
          }
        } catch (err) {
          _didIteratorError8 = true;
          _iteratorError8 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion8 && _iterator8.return) {
              _iterator8.return();
            }
          } finally {
            if (_didIteratorError8) {
              throw _iteratorError8;
            }
          }
        }

        if (falseCount === annotation.types.length) {
          return false;
        } else {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "maybeStringAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }
      case 'AnyTypeAnnotation':
      case 'MixedTypeAnnotation':
      case 'IntersectionTypeAnnotation':
        {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "maybeStringAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }

      default:
        return false;
    }
  }

  /**
     * Returns `true` if the annotation is compatible with a symbol,
     * `false` if it definitely isn't, or `null` if we're not sure.
     */
  function maybeSymbolAnnotation(annotation) {
    var _maybeSymbolAnnotatio2;

    if (!TypeAnnotation(annotation)) {
      throw new TypeError('Value of argument "annotation" violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
    }

    switch (annotation.type) {
      case 'TypeAnnotation':
      case 'FunctonTypeParam':
      case 'NullableTypeAnnotation':
        {
          _maybeSymbolAnnotatio2 = maybeSymbolAnnotation(annotation.typeAnnotation);

          if (!(_maybeSymbolAnnotatio2 == null || typeof _maybeSymbolAnnotatio2 === 'boolean')) {
            throw new TypeError('Value of variable "_maybeSymbolAnnotatio2" violates contract, expected ?bool got ' + (_maybeSymbolAnnotatio2 === null ? 'null' : (typeof _maybeSymbolAnnotatio2 === 'undefined' ? 'undefined' : _typeof(_maybeSymbolAnnotatio2)) === 'object' && _maybeSymbolAnnotatio2.constructor ? _maybeSymbolAnnotatio2.constructor.name || '[Unknown Object]' : typeof _maybeSymbolAnnotatio2 === 'undefined' ? 'undefined' : _typeof(_maybeSymbolAnnotatio2)));
          }

          if (_maybeSymbolAnnotatio2 == null || typeof _maybeSymbolAnnotatio2 === 'boolean') {
            return _maybeSymbolAnnotatio2;
          } else {
            throw new TypeError('Function "maybeSymbolAnnotation" return value violates contract, expected ?bool got ' + (_maybeSymbolAnnotatio2 === null ? 'null' : (typeof _maybeSymbolAnnotatio2 === 'undefined' ? 'undefined' : _typeof(_maybeSymbolAnnotatio2)) === 'object' && _maybeSymbolAnnotatio2.constructor ? _maybeSymbolAnnotatio2.constructor.name || '[Unknown Object]' : typeof _maybeSymbolAnnotatio2 === 'undefined' ? 'undefined' : _typeof(_maybeSymbolAnnotatio2)));
          }
        }

      case 'GenericTypeAnnotation':
        switch (annotation.id.name) {
          case 'Array':
          case 'Function':
          case 'Object':
          case 'Number':
          case 'Boolean':
          case 'Date':
          case 'RegExp':
            return false;
          case 'Symbol':
            return true;
          default:
            {
              if (null == null || typeof null === 'boolean') {
                return null;
              } else {
                throw new TypeError('Function "maybeSymbolAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
              }
            }

        }
      case 'UnionTypeAnnotation':
        var falseCount = 0;
        var _iteratorNormalCompletion9 = true;
        var _didIteratorError9 = false;
        var _iteratorError9 = undefined;

        try {
          for (var _iterator9 = annotation.types[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
            var _type7 = _step9.value;

            var result = maybeSymbolAnnotation(_type7);
            if (result === true) {
              return true;
            } else if (result === false) {
              falseCount++;
            }
          }
        } catch (err) {
          _didIteratorError9 = true;
          _iteratorError9 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion9 && _iterator9.return) {
              _iterator9.return();
            }
          } finally {
            if (_didIteratorError9) {
              throw _iteratorError9;
            }
          }
        }

        if (falseCount === annotation.types.length) {
          return false;
        } else {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "maybeSymbolAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }
      case 'AnyTypeAnnotation':
      case 'MixedTypeAnnotation':
      case 'IntersectionTypeAnnotation':
        {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "maybeSymbolAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }

      default:
        return false;
    }
  }

  /**
   * Returns `true` if the annotation is compatible with a boolean,
   * `false` if it definitely isn't, or `null` if we're not sure.
   */
  function maybeBooleanAnnotation(annotation) {
    var _maybeBooleanAnnotati3;

    if (!TypeAnnotation(annotation)) {
      throw new TypeError('Value of argument "annotation" violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
    }

    switch (annotation.type) {
      case 'TypeAnnotation':
      case 'FunctonTypeParam':
      case 'NullableTypeAnnotation':
        {
          _maybeBooleanAnnotati3 = maybeBooleanAnnotation(annotation.typeAnnotation);

          if (!(_maybeBooleanAnnotati3 == null || typeof _maybeBooleanAnnotati3 === 'boolean')) {
            throw new TypeError('Value of variable "_maybeBooleanAnnotati3" violates contract, expected ?bool got ' + (_maybeBooleanAnnotati3 === null ? 'null' : (typeof _maybeBooleanAnnotati3 === 'undefined' ? 'undefined' : _typeof(_maybeBooleanAnnotati3)) === 'object' && _maybeBooleanAnnotati3.constructor ? _maybeBooleanAnnotati3.constructor.name || '[Unknown Object]' : typeof _maybeBooleanAnnotati3 === 'undefined' ? 'undefined' : _typeof(_maybeBooleanAnnotati3)));
          }

          if (_maybeBooleanAnnotati3 == null || typeof _maybeBooleanAnnotati3 === 'boolean') {
            return _maybeBooleanAnnotati3;
          } else {
            throw new TypeError('Function "maybeBooleanAnnotation" return value violates contract, expected ?bool got ' + (_maybeBooleanAnnotati3 === null ? 'null' : (typeof _maybeBooleanAnnotati3 === 'undefined' ? 'undefined' : _typeof(_maybeBooleanAnnotati3)) === 'object' && _maybeBooleanAnnotati3.constructor ? _maybeBooleanAnnotati3.constructor.name || '[Unknown Object]' : typeof _maybeBooleanAnnotati3 === 'undefined' ? 'undefined' : _typeof(_maybeBooleanAnnotati3)));
          }
        }

      case 'BooleanTypeAnnotation':
      case 'BooleanLiteralTypeAnnotation':
        return true;
      case 'GenericTypeAnnotation':
        switch (annotation.id.name) {
          case 'Array':
          case 'Function':
          case 'Object':
          case 'String':
          case 'Number':
          case 'Date':
          case 'RegExp':
            return false;
          default:
            {
              if (null == null || typeof null === 'boolean') {
                return null;
              } else {
                throw new TypeError('Function "maybeBooleanAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
              }
            }

        }
      case 'UnionTypeAnnotation':
        var falseCount = 0;
        var _iteratorNormalCompletion10 = true;
        var _didIteratorError10 = false;
        var _iteratorError10 = undefined;

        try {
          for (var _iterator10 = annotation.types[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
            var _type8 = _step10.value;

            var result = maybeBooleanAnnotation(_type8);
            if (result === true) {
              return true;
            } else if (result === false) {
              falseCount++;
            }
          }
        } catch (err) {
          _didIteratorError10 = true;
          _iteratorError10 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion10 && _iterator10.return) {
              _iterator10.return();
            }
          } finally {
            if (_didIteratorError10) {
              throw _iteratorError10;
            }
          }
        }

        if (falseCount === annotation.types.length) {
          return false;
        } else {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "maybeBooleanAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }
      case 'AnyTypeAnnotation':
      case 'MixedTypeAnnotation':
      case 'IntersectionTypeAnnotation':
        {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "maybeBooleanAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }

      default:
        return false;
    }
  }

  /**
   * Returns `true` if the annotation is compatible with a function,
   * `false` if it definitely isn't, or `null` if we're not sure.
   */
  function maybeFunctionAnnotation(annotation) {
    var _maybeFunctionAnnotat2;

    if (!TypeAnnotation(annotation)) {
      throw new TypeError('Value of argument "annotation" violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
    }

    switch (annotation.type) {
      case 'TypeAnnotation':
      case 'FunctonTypeParam':
      case 'NullableTypeAnnotation':
        {
          _maybeFunctionAnnotat2 = maybeFunctionAnnotation(annotation.typeAnnotation);

          if (!(_maybeFunctionAnnotat2 == null || typeof _maybeFunctionAnnotat2 === 'boolean')) {
            throw new TypeError('Value of variable "_maybeFunctionAnnotat2" violates contract, expected ?bool got ' + (_maybeFunctionAnnotat2 === null ? 'null' : (typeof _maybeFunctionAnnotat2 === 'undefined' ? 'undefined' : _typeof(_maybeFunctionAnnotat2)) === 'object' && _maybeFunctionAnnotat2.constructor ? _maybeFunctionAnnotat2.constructor.name || '[Unknown Object]' : typeof _maybeFunctionAnnotat2 === 'undefined' ? 'undefined' : _typeof(_maybeFunctionAnnotat2)));
          }

          if (_maybeFunctionAnnotat2 == null || typeof _maybeFunctionAnnotat2 === 'boolean') {
            return _maybeFunctionAnnotat2;
          } else {
            throw new TypeError('Function "maybeFunctionAnnotation" return value violates contract, expected ?bool got ' + (_maybeFunctionAnnotat2 === null ? 'null' : (typeof _maybeFunctionAnnotat2 === 'undefined' ? 'undefined' : _typeof(_maybeFunctionAnnotat2)) === 'object' && _maybeFunctionAnnotat2.constructor ? _maybeFunctionAnnotat2.constructor.name || '[Unknown Object]' : typeof _maybeFunctionAnnotat2 === 'undefined' ? 'undefined' : _typeof(_maybeFunctionAnnotat2)));
          }
        }

      case 'FunctionTypeAnnotation':
        return true;
      case 'GenericTypeAnnotation':
        switch (annotation.id.name) {
          case 'Array':
          case 'Number':
          case 'Object':
          case 'String':
          case 'Boolean':
          case 'Date':
          case 'RegExp':
            return false;
          default:
            {
              if (null == null || typeof null === 'boolean') {
                return null;
              } else {
                throw new TypeError('Function "maybeFunctionAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
              }
            }

        }
      case 'UnionTypeAnnotation':
        var falseCount = 0;
        var _iteratorNormalCompletion11 = true;
        var _didIteratorError11 = false;
        var _iteratorError11 = undefined;

        try {
          for (var _iterator11 = annotation.types[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
            var _type9 = _step11.value;

            var result = maybeFunctionAnnotation(_type9);
            if (result === true) {
              return true;
            } else if (result === false) {
              falseCount++;
            }
          }
        } catch (err) {
          _didIteratorError11 = true;
          _iteratorError11 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion11 && _iterator11.return) {
              _iterator11.return();
            }
          } finally {
            if (_didIteratorError11) {
              throw _iteratorError11;
            }
          }
        }

        if (falseCount === annotation.types.length) {
          return false;
        } else {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "maybeFunctionAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }
      case 'AnyTypeAnnotation':
      case 'MixedTypeAnnotation':
      case 'IntersectionTypeAnnotation':
        {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "maybeFunctionAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }

      default:
        return false;
    }
  }

  /**
   * Returns `true` if the annotation is compatible with an undefined or null type,
   * `false` if it definitely isn't, or `null` if we're not sure.
   */
  function maybeNullableAnnotation(annotation) {
    var _maybeNullableAnnotat;

    if (!TypeAnnotation(annotation)) {
      throw new TypeError('Value of argument "annotation" violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
    }

    switch (annotation.type) {
      case 'NullableTypeAnnotation':
      case 'VoidTypeAnnotation':
      case 'MixedTypeAnnotation':
        return true;
      case 'TypeAnnotation':
      case 'FunctonTypeParam':
        {
          _maybeNullableAnnotat = maybeNullableAnnotation(annotation.typeAnnotation);

          if (!(_maybeNullableAnnotat == null || typeof _maybeNullableAnnotat === 'boolean')) {
            throw new TypeError('Value of variable "_maybeNullableAnnotat" violates contract, expected ?bool got ' + (_maybeNullableAnnotat === null ? 'null' : (typeof _maybeNullableAnnotat === 'undefined' ? 'undefined' : _typeof(_maybeNullableAnnotat)) === 'object' && _maybeNullableAnnotat.constructor ? _maybeNullableAnnotat.constructor.name || '[Unknown Object]' : typeof _maybeNullableAnnotat === 'undefined' ? 'undefined' : _typeof(_maybeNullableAnnotat)));
          }

          if (_maybeNullableAnnotat == null || typeof _maybeNullableAnnotat === 'boolean') {
            return _maybeNullableAnnotat;
          } else {
            throw new TypeError('Function "maybeNullableAnnotation" return value violates contract, expected ?bool got ' + (_maybeNullableAnnotat === null ? 'null' : (typeof _maybeNullableAnnotat === 'undefined' ? 'undefined' : _typeof(_maybeNullableAnnotat)) === 'object' && _maybeNullableAnnotat.constructor ? _maybeNullableAnnotat.constructor.name || '[Unknown Object]' : typeof _maybeNullableAnnotat === 'undefined' ? 'undefined' : _typeof(_maybeNullableAnnotat)));
          }
        }

      case 'GenericTypeAnnotation':
        switch (annotation.id.name) {
          case 'Array':
          case 'Number':
          case 'Object':
          case 'String':
          case 'Boolean':
          case 'Date':
          case 'RegExp':
            return false;
          default:
            {
              if (null == null || typeof null === 'boolean') {
                return null;
              } else {
                throw new TypeError('Function "maybeNullableAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
              }
            }

        }
      case 'UnionTypeAnnotation':
        var falseCount = 0;
        var _iteratorNormalCompletion12 = true;
        var _didIteratorError12 = false;
        var _iteratorError12 = undefined;

        try {
          for (var _iterator12 = annotation.types[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
            var _type10 = _step12.value;

            var result = maybeNullableAnnotation(_type10);
            if (result === true) {
              return true;
            } else if (result === false) {
              falseCount++;
            }
          }
        } catch (err) {
          _didIteratorError12 = true;
          _iteratorError12 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion12 && _iterator12.return) {
              _iterator12.return();
            }
          } finally {
            if (_didIteratorError12) {
              throw _iteratorError12;
            }
          }
        }

        if (falseCount === annotation.types.length) {
          return false;
        } else {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "maybeNullableAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }
      default:
        return false;
    }
  }

  /**
   * Returns `true` if the annotation is compatible with an object type,
   * `false` if it definitely isn't, or `null` if we're not sure.
   */
  function maybeInstanceOfAnnotation(annotation, expected) {
    var _maybeInstanceOfAnnot2;

    if (!TypeAnnotation(annotation)) {
      throw new TypeError('Value of argument "annotation" violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
    }

    if (!Identifier(expected)) {
      throw new TypeError('Value of argument "expected" violates contract, expected Identifier got ' + (expected === null ? 'null' : (typeof expected === 'undefined' ? 'undefined' : _typeof(expected)) === 'object' && expected.constructor ? expected.constructor.name || '[Unknown Object]' : typeof expected === 'undefined' ? 'undefined' : _typeof(expected)));
    }

    switch (annotation.type) {
      case 'TypeAnnotation':
      case 'FunctonTypeParam':
      case 'NullableTypeAnnotation':
        {
          _maybeInstanceOfAnnot2 = maybeInstanceOfAnnotation(annotation.typeAnnotation);

          if (!(_maybeInstanceOfAnnot2 == null || typeof _maybeInstanceOfAnnot2 === 'boolean')) {
            throw new TypeError('Value of variable "_maybeInstanceOfAnnot2" violates contract, expected ?bool got ' + (_maybeInstanceOfAnnot2 === null ? 'null' : (typeof _maybeInstanceOfAnnot2 === 'undefined' ? 'undefined' : _typeof(_maybeInstanceOfAnnot2)) === 'object' && _maybeInstanceOfAnnot2.constructor ? _maybeInstanceOfAnnot2.constructor.name || '[Unknown Object]' : typeof _maybeInstanceOfAnnot2 === 'undefined' ? 'undefined' : _typeof(_maybeInstanceOfAnnot2)));
          }

          if (_maybeInstanceOfAnnot2 == null || typeof _maybeInstanceOfAnnot2 === 'boolean') {
            return _maybeInstanceOfAnnot2;
          } else {
            throw new TypeError('Function "maybeInstanceOfAnnotation" return value violates contract, expected ?bool got ' + (_maybeInstanceOfAnnot2 === null ? 'null' : (typeof _maybeInstanceOfAnnot2 === 'undefined' ? 'undefined' : _typeof(_maybeInstanceOfAnnot2)) === 'object' && _maybeInstanceOfAnnot2.constructor ? _maybeInstanceOfAnnot2.constructor.name || '[Unknown Object]' : typeof _maybeInstanceOfAnnot2 === 'undefined' ? 'undefined' : _typeof(_maybeInstanceOfAnnot2)));
          }
        }

      case 'GenericTypeAnnotation':
        if (annotation.id.name === expected.name) {
          return true;
        } else {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "maybeInstanceOfAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }
      case 'UnionTypeAnnotation':
        var falseCount = 0;
        var _iteratorNormalCompletion13 = true;
        var _didIteratorError13 = false;
        var _iteratorError13 = undefined;

        try {
          for (var _iterator13 = annotation.types[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
            var _type11 = _step13.value;

            var result = maybeInstanceOfAnnotation(_type11, expected);
            if (result === true) {
              return true;
            } else if (result === false) {
              falseCount++;
            }
          }
        } catch (err) {
          _didIteratorError13 = true;
          _iteratorError13 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion13 && _iterator13.return) {
              _iterator13.return();
            }
          } finally {
            if (_didIteratorError13) {
              throw _iteratorError13;
            }
          }
        }

        if (falseCount === annotation.types.length) {
          return false;
        } else {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "maybeInstanceOfAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }
      case 'VoidTypeAnnotation':
      case 'BooleanTypeAnnotation':
      case 'BooleanLiteralTypeAnnotation':
      case 'StringTypeAnnotation':
      case 'StringLiteralTypeAnnotation':
      case 'NumberTypeAnnotation':
      case 'NumericLiteralTypeAnnotation':
      case 'FunctionTypeAnnotation':
        return false;
      default:
        {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "maybeInstanceOfAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }

    }
  }

  /**
   * Returns `true` if the annotation is compatible with an array,
   * `false` if it definitely isn't, or `null` if we're not sure.
   */
  function maybeArrayAnnotation(annotation) {
    var _maybeArrayAnnotation;

    if (!TypeAnnotation(annotation)) {
      throw new TypeError('Value of argument "annotation" violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
    }

    switch (annotation.type) {
      case 'TypeAnnotation':
      case 'FunctonTypeParam':
      case 'NullableTypeAnnotation':
        {
          _maybeArrayAnnotation = maybeArrayAnnotation(annotation.typeAnnotation);

          if (!(_maybeArrayAnnotation == null || typeof _maybeArrayAnnotation === 'boolean')) {
            throw new TypeError('Value of variable "_maybeArrayAnnotation" violates contract, expected ?bool got ' + (_maybeArrayAnnotation === null ? 'null' : (typeof _maybeArrayAnnotation === 'undefined' ? 'undefined' : _typeof(_maybeArrayAnnotation)) === 'object' && _maybeArrayAnnotation.constructor ? _maybeArrayAnnotation.constructor.name || '[Unknown Object]' : typeof _maybeArrayAnnotation === 'undefined' ? 'undefined' : _typeof(_maybeArrayAnnotation)));
          }

          if (_maybeArrayAnnotation == null || typeof _maybeArrayAnnotation === 'boolean') {
            return _maybeArrayAnnotation;
          } else {
            throw new TypeError('Function "maybeArrayAnnotation" return value violates contract, expected ?bool got ' + (_maybeArrayAnnotation === null ? 'null' : (typeof _maybeArrayAnnotation === 'undefined' ? 'undefined' : _typeof(_maybeArrayAnnotation)) === 'object' && _maybeArrayAnnotation.constructor ? _maybeArrayAnnotation.constructor.name || '[Unknown Object]' : typeof _maybeArrayAnnotation === 'undefined' ? 'undefined' : _typeof(_maybeArrayAnnotation)));
          }
        }

      case 'TupleTypeAnnotation':
      case 'ArrayTypeAnnotation':
        return true;
      case 'GenericTypeAnnotation':
        return annotation.id.name === 'Array' ? true : null;
      case 'UnionTypeAnnotation':
        var falseCount = 0;
        var _iteratorNormalCompletion14 = true;
        var _didIteratorError14 = false;
        var _iteratorError14 = undefined;

        try {
          for (var _iterator14 = annotation.types[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
            var _type12 = _step14.value;

            var result = maybeArrayAnnotation(_type12);
            if (result === true) {
              return true;
            } else if (result === false) {
              falseCount++;
            }
          }
        } catch (err) {
          _didIteratorError14 = true;
          _iteratorError14 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion14 && _iterator14.return) {
              _iterator14.return();
            }
          } finally {
            if (_didIteratorError14) {
              throw _iteratorError14;
            }
          }
        }

        if (falseCount === annotation.types.length) {
          return false;
        } else {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "maybeArrayAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }
      case 'AnyTypeAnnotation':
      case 'MixedTypeAnnotation':
      case 'IntersectionTypeAnnotation':
        {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "maybeArrayAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }

      default:
        return false;
    }
  }

  /**
   * Returns `true` if the annotation is compatible with a tuple,
   * `false` if it definitely isn't, or `null` if we're not sure.
   */
  function maybeTupleAnnotation(annotation) {
    var _maybeTupleAnnotation;

    if (!TypeAnnotation(annotation)) {
      throw new TypeError('Value of argument "annotation" violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
    }

    switch (annotation.type) {
      case 'TypeAnnotation':
      case 'FunctonTypeParam':
      case 'NullableTypeAnnotation':
        {
          _maybeTupleAnnotation = maybeTupleAnnotation(annotation.typeAnnotation);

          if (!(_maybeTupleAnnotation == null || typeof _maybeTupleAnnotation === 'boolean')) {
            throw new TypeError('Value of variable "_maybeTupleAnnotation" violates contract, expected ?bool got ' + (_maybeTupleAnnotation === null ? 'null' : (typeof _maybeTupleAnnotation === 'undefined' ? 'undefined' : _typeof(_maybeTupleAnnotation)) === 'object' && _maybeTupleAnnotation.constructor ? _maybeTupleAnnotation.constructor.name || '[Unknown Object]' : typeof _maybeTupleAnnotation === 'undefined' ? 'undefined' : _typeof(_maybeTupleAnnotation)));
          }

          if (_maybeTupleAnnotation == null || typeof _maybeTupleAnnotation === 'boolean') {
            return _maybeTupleAnnotation;
          } else {
            throw new TypeError('Function "maybeTupleAnnotation" return value violates contract, expected ?bool got ' + (_maybeTupleAnnotation === null ? 'null' : (typeof _maybeTupleAnnotation === 'undefined' ? 'undefined' : _typeof(_maybeTupleAnnotation)) === 'object' && _maybeTupleAnnotation.constructor ? _maybeTupleAnnotation.constructor.name || '[Unknown Object]' : typeof _maybeTupleAnnotation === 'undefined' ? 'undefined' : _typeof(_maybeTupleAnnotation)));
          }
        }

      case 'TupleTypeAnnotation':
        return true;
      case 'UnionTypeAnnotation':
        var falseCount = 0;
        var _iteratorNormalCompletion15 = true;
        var _didIteratorError15 = false;
        var _iteratorError15 = undefined;

        try {
          for (var _iterator15 = annotation.types[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
            var _type13 = _step15.value;

            var result = maybeTupleAnnotation(_type13);
            if (result === true) {
              return true;
            } else if (result === false) {
              falseCount++;
            }
          }
        } catch (err) {
          _didIteratorError15 = true;
          _iteratorError15 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion15 && _iterator15.return) {
              _iterator15.return();
            }
          } finally {
            if (_didIteratorError15) {
              throw _iteratorError15;
            }
          }
        }

        if (falseCount === annotation.types.length) {
          return false;
        } else {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "maybeTupleAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }
      case 'GenericTypeAnnotation':
      case 'AnyTypeAnnotation':
      case 'ArrayTypeAnnotation':
      case 'MixedTypeAnnotation':
      case 'IntersectionTypeAnnotation':
        {
          if (null == null || typeof null === 'boolean') {
            return null;
          } else {
            throw new TypeError('Function "maybeTupleAnnotation" return value violates contract, expected ?bool got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
          }
        }

      default:
        return false;
    }
  }

  function humanReadableType(annotation) {
    var _generate$code;

    if (!TypeAnnotation(annotation)) {
      throw new TypeError('Value of argument "annotation" violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
    }

    switch (annotation.type) {
      case 'TypeAnnotation':
      case 'FunctonTypeParam':
        return humanReadableType(annotation.typeAnnotation);

      case 'FunctionTypeAnnotation':
        // @fixme babel doesn't seem to like generating FunctionTypeAnnotations yet
        return '(' + annotation.params.map(humanReadableType).join(', ') + ') => ' + humanReadableType(annotation.returnType);
      default:
        {
          _generate$code = (0, _babelGenerator2.default)(annotation).code;

          if (typeof _generate$code === 'string') {
            return _generate$code;
          } else {
            throw new TypeError('Function "humanReadableType" return value violates contract, expected string got ' + (_generate$code === null ? 'null' : (typeof _generate$code === 'undefined' ? 'undefined' : _typeof(_generate$code)) === 'object' && _generate$code.constructor ? _generate$code.constructor.name || '[Unknown Object]' : typeof _generate$code === 'undefined' ? 'undefined' : _typeof(_generate$code)));
          }
        }

    }
  }

  function getTypeChecker(id, scope) {
    if (!(Identifier(id) || QualifiedTypeIdentifier(id))) {
      throw new TypeError('Value of argument "id" violates contract, expected Identifier | QualifiedTypeIdentifier got ' + (id === null ? 'null' : (typeof id === 'undefined' ? 'undefined' : _typeof(id)) === 'object' && id.constructor ? id.constructor.name || '[Unknown Object]' : typeof id === 'undefined' ? 'undefined' : _typeof(id)));
    }

    if (!Scope(scope)) {
      throw new TypeError('Value of argument "scope" violates contract, expected Scope got ' + (scope === null ? 'null' : (typeof scope === 'undefined' ? 'undefined' : _typeof(scope)) === 'object' && scope.constructor ? scope.constructor.name || '[Unknown Object]' : typeof scope === 'undefined' ? 'undefined' : _typeof(scope)));
    }

    var binding = scope.getBinding(id.name);
    if (binding === undefined) {
      return false;
    }
    var path = binding.path;

    if (path == null) {
      return false;
    } else if (path.type === 'TypeAlias') {
      if (NodePath(path) || path === false) {
        return path;
      } else {
        throw new TypeError('Function "getTypeChecker" return value violates contract, expected NodePath | false got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
      }
    } else if (path.type === 'VariableDeclaration' && path.node.isTypeChecker) {
      var _path$get$;

      _path$get$ = path.get('declarations')[0];

      if (NodePath(_path$get$) || _path$get$ === false) {
        return _path$get$;
      } else {
        throw new TypeError('Function "getTypeChecker" return value violates contract, expected NodePath | false got ' + (_path$get$ === null ? 'null' : (typeof _path$get$ === 'undefined' ? 'undefined' : _typeof(_path$get$)) === 'object' && _path$get$.constructor ? _path$get$.constructor.name || '[Unknown Object]' : typeof _path$get$ === 'undefined' ? 'undefined' : _typeof(_path$get$)));
      }
    } else if (path.isImportSpecifier() && path.parent.importKind === 'type') {
      if (NodePath(path) || path === false) {
        return path;
      } else {
        throw new TypeError('Function "getTypeChecker" return value violates contract, expected NodePath | false got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
      }
    }
    return false;
  }

  function isTypeChecker(id, scope) {
    if (!(Identifier(id) || QualifiedTypeIdentifier(id))) {
      throw new TypeError('Value of argument "id" violates contract, expected Identifier | QualifiedTypeIdentifier got ' + (id === null ? 'null' : (typeof id === 'undefined' ? 'undefined' : _typeof(id)) === 'object' && id.constructor ? id.constructor.name || '[Unknown Object]' : typeof id === 'undefined' ? 'undefined' : _typeof(id)));
    }

    if (!Scope(scope)) {
      throw new TypeError('Value of argument "scope" violates contract, expected Scope got ' + (scope === null ? 'null' : (typeof scope === 'undefined' ? 'undefined' : _typeof(scope)) === 'object' && scope.constructor ? scope.constructor.name || '[Unknown Object]' : typeof scope === 'undefined' ? 'undefined' : _typeof(scope)));
    }

    var binding = scope.getBinding(id.name);
    if (binding === undefined) {
      return false;
    }
    var path = binding.path;

    if (path == null) {
      return false;
    } else if (path.type === 'TypeAlias' || path.type === 'VariableDeclaration' && path.node.isTypeChecker) {
      return true;
    } else if (path.isImportSpecifier() && path.parent.importKind === 'type') {
      return true;
    }
    return false;
  }

  function isPolymorphicType(id, scope) {
    if (!(Identifier(id) || QualifiedTypeIdentifier(id))) {
      throw new TypeError('Value of argument "id" violates contract, expected Identifier | QualifiedTypeIdentifier got ' + (id === null ? 'null' : (typeof id === 'undefined' ? 'undefined' : _typeof(id)) === 'object' && id.constructor ? id.constructor.name || '[Unknown Object]' : typeof id === 'undefined' ? 'undefined' : _typeof(id)));
    }

    if (!Scope(scope)) {
      throw new TypeError('Value of argument "scope" violates contract, expected Scope got ' + (scope === null ? 'null' : (typeof scope === 'undefined' ? 'undefined' : _typeof(scope)) === 'object' && scope.constructor ? scope.constructor.name || '[Unknown Object]' : typeof scope === 'undefined' ? 'undefined' : _typeof(scope)));
    }

    var binding = scope.getBinding(id.name);
    if (binding !== undefined) {
      return false;
    }
    var path = scope.path;

    while (path && path.type !== 'Program') {
      var _path = path;
      var _node = _path.node;

      if ((t.isFunction(_node) || t.isClass(_node)) && _node.typeParameters) {
        var _iteratorNormalCompletion16 = true;
        var _didIteratorError16 = false;
        var _iteratorError16 = undefined;

        try {
          for (var _iterator16 = _node.typeParameters.params[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
            var param = _step16.value;

            param.isPolymorphicType = true;
            if (param.name === id.name) {
              return true;
            }
          }
        } catch (err) {
          _didIteratorError16 = true;
          _iteratorError16 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion16 && _iterator16.return) {
              _iterator16.return();
            }
          } finally {
            if (_didIteratorError16) {
              throw _iteratorError16;
            }
          }
        }
      }
      path = path.parentPath;
    }
    return false;
  }

  function getPolymorphicType(id, scope) {
    if (!(Identifier(id) || QualifiedTypeIdentifier(id))) {
      throw new TypeError('Value of argument "id" violates contract, expected Identifier | QualifiedTypeIdentifier got ' + (id === null ? 'null' : (typeof id === 'undefined' ? 'undefined' : _typeof(id)) === 'object' && id.constructor ? id.constructor.name || '[Unknown Object]' : typeof id === 'undefined' ? 'undefined' : _typeof(id)));
    }

    if (!Scope(scope)) {
      throw new TypeError('Value of argument "scope" violates contract, expected Scope got ' + (scope === null ? 'null' : (typeof scope === 'undefined' ? 'undefined' : _typeof(scope)) === 'object' && scope.constructor ? scope.constructor.name || '[Unknown Object]' : typeof scope === 'undefined' ? 'undefined' : _typeof(scope)));
    }

    var binding = scope.getBinding(id.name);
    if (binding !== undefined) {
      if (false == null || Node(false)) {
        return false;
      } else {
        throw new TypeError('Function "getPolymorphicType" return value violates contract, expected ?Node got ' + (false === null ? 'null' : _typeof(false) === 'object' && false.constructor ? false.constructor.name || '[Unknown Object]' : _typeof(false)));
      }
    }
    var path = scope.path;

    while (path && path.type !== 'Program') {
      var _path2 = path;
      var _node2 = _path2.node;

      if (t.isFunction(_node2) && _node2.typeParameters) {
        var _iteratorNormalCompletion17 = true;
        var _didIteratorError17 = false;
        var _iteratorError17 = undefined;

        try {
          for (var _iterator17 = _node2.typeParameters.params[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
            var param = _step17.value;

            param.isPolymorphicType = true;
            if (param.name === id.name) {
              if (param == null || Node(param)) {
                return param;
              } else {
                throw new TypeError('Function "getPolymorphicType" return value violates contract, expected ?Node got ' + (param === null ? 'null' : (typeof param === 'undefined' ? 'undefined' : _typeof(param)) === 'object' && param.constructor ? param.constructor.name || '[Unknown Object]' : typeof param === 'undefined' ? 'undefined' : _typeof(param)));
              }
            }
          }
        } catch (err) {
          _didIteratorError17 = true;
          _iteratorError17 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion17 && _iterator17.return) {
              _iterator17.return();
            }
          } finally {
            if (_didIteratorError17) {
              throw _iteratorError17;
            }
          }
        }
      }
      path = path.parent;
    }

    if (null == null || Node(null)) {
      return null;
    } else {
      throw new TypeError('Function "getPolymorphicType" return value violates contract, expected ?Node got ' + (null === null ? 'null' : _typeof(null) === 'object' && null.constructor ? null.constructor.name || '[Unknown Object]' : _typeof(null)));
    }
  }

  function collectParamChecks(path) {
    var _path$get$map$filter;

    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    _path$get$map$filter = path.get('params').map(function (param) {
      var node = param.node;

      if (node.type === 'AssignmentPattern') {
        if (node.left.typeAnnotation) {
          return createDefaultParamGuard(param);
        }
      } else if (node.type === 'RestElement') {
        if (node.typeAnnotation) {
          return createRestParamGuard(param);
        }
      } else if (node.typeAnnotation) {
        return createParamGuard(param);
      }
    }).filter(identity);

    if (Array.isArray(_path$get$map$filter) && _path$get$map$filter.every(function (item) {
      return Node(item);
    })) {
      return _path$get$map$filter;
    } else {
      throw new TypeError('Function "collectParamChecks" return value violates contract, expected Node[] got ' + (_path$get$map$filter === null ? 'null' : (typeof _path$get$map$filter === 'undefined' ? 'undefined' : _typeof(_path$get$map$filter)) === 'object' && _path$get$map$filter.constructor ? _path$get$map$filter.constructor.name || '[Unknown Object]' : typeof _path$get$map$filter === 'undefined' ? 'undefined' : _typeof(_path$get$map$filter)));
    }
  }

  function createParamGuard(path) {
    var _guard;

    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var node = path.node;
    var scope = path.scope;

    node.hasBeenTypeChecked = true;
    node.savedTypeAnnotation = node.typeAnnotation;
    var check = checkAnnotation(node, node.typeAnnotation, scope);
    if (!check) {
      return;
    }
    if (node.optional) {
      check = t.logicalExpression('||', checks.undefined({ input: node }), check);
    }
    var message = paramTypeErrorMessage(node, scope);
    _guard = guard({
      check: check,
      message: message
    });

    if (_guard == null || Node(_guard)) {
      return _guard;
    } else {
      throw new TypeError('Function "createParamGuard" return value violates contract, expected ?Node got ' + (_guard === null ? 'null' : (typeof _guard === 'undefined' ? 'undefined' : _typeof(_guard)) === 'object' && _guard.constructor ? _guard.constructor.name || '[Unknown Object]' : typeof _guard === 'undefined' ? 'undefined' : _typeof(_guard)));
    }
  }

  function createDefaultParamGuard(path) {
    var _createParamGuard;

    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var node = path.node;
    var scope = path.scope;
    var id = node.left;
    var value = node.right;

    var ok = staticCheckAnnotation(path.get('right'), id.typeAnnotation);
    if (ok === false) {
      throw path.buildCodeFrameError('Invalid default value for argument "' + id.name + '", expected ' + humanReadableType(id.typeAnnotation) + '.');
    }
    _createParamGuard = createParamGuard(path.get('left'));

    if (!(_createParamGuard == null || Node(_createParamGuard))) {
      throw new TypeError('Value of variable "_createParamGuard" violates contract, expected ?Node got ' + (_createParamGuard === null ? 'null' : (typeof _createParamGuard === 'undefined' ? 'undefined' : _typeof(_createParamGuard)) === 'object' && _createParamGuard.constructor ? _createParamGuard.constructor.name || '[Unknown Object]' : typeof _createParamGuard === 'undefined' ? 'undefined' : _typeof(_createParamGuard)));
    }

    if (_createParamGuard == null || Node(_createParamGuard)) {
      return _createParamGuard;
    } else {
      throw new TypeError('Function "createDefaultParamGuard" return value violates contract, expected ?Node got ' + (_createParamGuard === null ? 'null' : (typeof _createParamGuard === 'undefined' ? 'undefined' : _typeof(_createParamGuard)) === 'object' && _createParamGuard.constructor ? _createParamGuard.constructor.name || '[Unknown Object]' : typeof _createParamGuard === 'undefined' ? 'undefined' : _typeof(_createParamGuard)));
    }
  }

  function createRestParamGuard(path) {
    var _guard2;

    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var node = path.node;
    var scope = path.scope;
    var id = node.argument;

    id.hasBeenTypeChecked = true;
    node.savedTypeAnnotation = node.typeAnnotation;
    if (!isStrictlyArrayAnnotation(node.typeAnnotation)) {
      throw path.buildCodeFrameError('Invalid type annotation for rest argument "' + id.name + '", expected an Array, got: ' + humanReadableType(node.typeAnnotation) + '.');
    }
    var check = checkAnnotation(id, node.typeAnnotation, scope);
    if (!check) {
      return;
    }
    if (node.optional) {
      check = t.logicalExpression('||', checks.undefined({ input: id }), check);
    }
    var message = paramTypeErrorMessage(id, scope, node.typeAnnotation);
    _guard2 = guard({
      check: check,
      message: message
    });

    if (_guard2 == null || Node(_guard2)) {
      return _guard2;
    } else {
      throw new TypeError('Function "createRestParamGuard" return value violates contract, expected ?Node got ' + (_guard2 === null ? 'null' : (typeof _guard2 === 'undefined' ? 'undefined' : _typeof(_guard2)) === 'object' && _guard2.constructor ? _guard2.constructor.name || '[Unknown Object]' : typeof _guard2 === 'undefined' ? 'undefined' : _typeof(_guard2)));
    }
  }

  function returnTypeErrorMessage(path, fn, id) {
    var _t$binaryExpression;

    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    if (!Node(fn)) {
      throw new TypeError('Value of argument "fn" violates contract, expected Node got ' + (fn === null ? 'null' : (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)) === 'object' && fn.constructor ? fn.constructor.name || '[Unknown Object]' : typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
    }

    if (!(id == null || Identifier(id) || Literal(id))) {
      throw new TypeError('Value of argument "id" violates contract, expected ?Identifier | Literal got ' + (id === null ? 'null' : (typeof id === 'undefined' ? 'undefined' : _typeof(id)) === 'object' && id.constructor ? id.constructor.name || '[Unknown Object]' : typeof id === 'undefined' ? 'undefined' : _typeof(id)));
    }

    var node = path.node;
    var scope = path.scope;

    var name = fn.id ? fn.id.name : '';
    var message = 'Function ' + (name ? '"' + name + '" ' : '') + 'return value violates contract, expected ' + humanReadableType(fn.returnType) + ' got ';

    _t$binaryExpression = t.binaryExpression('+', t.stringLiteral(message), node.argument ? readableName({ input: id || node.argument }) : t.stringLiteral('undefined'));

    if (Node(_t$binaryExpression)) {
      return _t$binaryExpression;
    } else {
      throw new TypeError('Function "returnTypeErrorMessage" return value violates contract, expected Node got ' + (_t$binaryExpression === null ? 'null' : (typeof _t$binaryExpression === 'undefined' ? 'undefined' : _typeof(_t$binaryExpression)) === 'object' && _t$binaryExpression.constructor ? _t$binaryExpression.constructor.name || '[Unknown Object]' : typeof _t$binaryExpression === 'undefined' ? 'undefined' : _typeof(_t$binaryExpression)));
    }
  }

  function paramTypeErrorMessage(node, scope) {
    var _t$binaryExpression2;

    var typeAnnotation = arguments.length <= 2 || arguments[2] === undefined ? node.typeAnnotation : arguments[2];

    if (!Node(node)) {
      throw new TypeError('Value of argument "node" violates contract, expected Node got ' + (node === null ? 'null' : (typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object' && node.constructor ? node.constructor.name || '[Unknown Object]' : typeof node === 'undefined' ? 'undefined' : _typeof(node)));
    }

    if (!Scope(scope)) {
      throw new TypeError('Value of argument "scope" violates contract, expected Scope got ' + (scope === null ? 'null' : (typeof scope === 'undefined' ? 'undefined' : _typeof(scope)) === 'object' && scope.constructor ? scope.constructor.name || '[Unknown Object]' : typeof scope === 'undefined' ? 'undefined' : _typeof(scope)));
    }

    if (!TypeAnnotation(typeAnnotation)) {
      throw new TypeError('Value of argument "typeAnnotation" violates contract, expected TypeAnnotation got ' + (typeAnnotation === null ? 'null' : (typeof typeAnnotation === 'undefined' ? 'undefined' : _typeof(typeAnnotation)) === 'object' && typeAnnotation.constructor ? typeAnnotation.constructor.name || '[Unknown Object]' : typeof typeAnnotation === 'undefined' ? 'undefined' : _typeof(typeAnnotation)));
    }

    var name = node.name;
    var message = 'Value of ' + (node.optional ? 'optional ' : '') + 'argument "' + name + '" violates contract, expected ' + humanReadableType(typeAnnotation) + ' got ';

    _t$binaryExpression2 = t.binaryExpression('+', t.stringLiteral(message), readableName({ input: node }));

    if (Node(_t$binaryExpression2)) {
      return _t$binaryExpression2;
    } else {
      throw new TypeError('Function "paramTypeErrorMessage" return value violates contract, expected Node got ' + (_t$binaryExpression2 === null ? 'null' : (typeof _t$binaryExpression2 === 'undefined' ? 'undefined' : _typeof(_t$binaryExpression2)) === 'object' && _t$binaryExpression2.constructor ? _t$binaryExpression2.constructor.name || '[Unknown Object]' : typeof _t$binaryExpression2 === 'undefined' ? 'undefined' : _typeof(_t$binaryExpression2)));
    }
  }

  function varTypeErrorMessage(node, scope, annotation) {
    if (!Node(node)) {
      throw new TypeError('Value of argument "node" violates contract, expected Node got ' + (node === null ? 'null' : (typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object' && node.constructor ? node.constructor.name || '[Unknown Object]' : typeof node === 'undefined' ? 'undefined' : _typeof(node)));
    }

    if (!Scope(scope)) {
      throw new TypeError('Value of argument "scope" violates contract, expected Scope got ' + (scope === null ? 'null' : (typeof scope === 'undefined' ? 'undefined' : _typeof(scope)) === 'object' && scope.constructor ? scope.constructor.name || '[Unknown Object]' : typeof scope === 'undefined' ? 'undefined' : _typeof(scope)));
    }

    if (!(annotation === undefined || TypeAnnotation(annotation))) {
      throw new TypeError('Value of optional argument "annotation" violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
    }

    if (node.type === 'Identifier') {
      var _t$binaryExpression3;

      var _name = node.name;
      var message = 'Value of variable "' + _name + '" violates contract, expected ' + humanReadableType(annotation || node.typeAnnotation) + ' got ';
      _t$binaryExpression3 = t.binaryExpression('+', t.stringLiteral(message), readableName({ input: node }));

      if (Node(_t$binaryExpression3)) {
        return _t$binaryExpression3;
      } else {
        throw new TypeError('Function "varTypeErrorMessage" return value violates contract, expected Node got ' + (_t$binaryExpression3 === null ? 'null' : (typeof _t$binaryExpression3 === 'undefined' ? 'undefined' : _typeof(_t$binaryExpression3)) === 'object' && _t$binaryExpression3.constructor ? _t$binaryExpression3.constructor.name || '[Unknown Object]' : typeof _t$binaryExpression3 === 'undefined' ? 'undefined' : _typeof(_t$binaryExpression3)));
      }
    } else {
      var _t$binaryExpression4;

      var message = 'Value of "' + (0, _babelGenerator2.default)(node).code + '" violates contract, expected ' + humanReadableType(annotation || node.typeAnnotation) + ' got ';
      _t$binaryExpression4 = t.binaryExpression('+', t.stringLiteral(message), readableName({ input: node }));

      if (Node(_t$binaryExpression4)) {
        return _t$binaryExpression4;
      } else {
        throw new TypeError('Function "varTypeErrorMessage" return value violates contract, expected Node got ' + (_t$binaryExpression4 === null ? 'null' : (typeof _t$binaryExpression4 === 'undefined' ? 'undefined' : _typeof(_t$binaryExpression4)) === 'object' && _t$binaryExpression4.constructor ? _t$binaryExpression4.constructor.name || '[Unknown Object]' : typeof _t$binaryExpression4 === 'undefined' ? 'undefined' : _typeof(_t$binaryExpression4)));
      }
    }
  }

  /**
   * Determine whether the given node can produce purely boolean results.
   */
  function isBooleanExpression(node) {
    if (!Node(node)) {
      throw new TypeError('Value of argument "node" violates contract, expected Node got ' + (node === null ? 'null' : (typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object' && node.constructor ? node.constructor.name || '[Unknown Object]' : typeof node === 'undefined' ? 'undefined' : _typeof(node)));
    }

    if (node.type === 'BinaryExpression' && BOOLEAN_BINARY_OPERATORS.indexOf(node.operator) > -1) {
      return true;
    } else if (node.type === 'LogicalExpression') {
      return isBooleanExpression(node.left) && isBooleanExpression(node.right);
    } else {
      return false;
    }
  }

  /**
   * Convert type specifier to expression.
   */
  function createTypeExpression(node) {
    if (!Node(node)) {
      throw new TypeError('Value of argument "node" violates contract, expected Node got ' + (node === null ? 'null' : (typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object' && node.constructor ? node.constructor.name || '[Unknown Object]' : typeof node === 'undefined' ? 'undefined' : _typeof(node)));
    }

    if (node.type == 'Identifier') {
      if (node instanceof Object) {
        return node;
      } else {
        throw new TypeError('Function "createTypeExpression" return value violates contract, expected Object got ' + (node === null ? 'null' : (typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object' && node.constructor ? node.constructor.name || '[Unknown Object]' : typeof node === 'undefined' ? 'undefined' : _typeof(node)));
      }
    } else if (node.type == 'QualifiedTypeIdentifier') {
      var _t$memberExpression;

      _t$memberExpression = t.memberExpression(createTypeExpression(node.qualification), createTypeExpression(node.id));

      if (_t$memberExpression instanceof Object) {
        return _t$memberExpression;
      } else {
        throw new TypeError('Function "createTypeExpression" return value violates contract, expected Object got ' + (_t$memberExpression === null ? 'null' : (typeof _t$memberExpression === 'undefined' ? 'undefined' : _typeof(_t$memberExpression)) === 'object' && _t$memberExpression.constructor ? _t$memberExpression.constructor.name || '[Unknown Object]' : typeof _t$memberExpression === 'undefined' ? 'undefined' : _typeof(_t$memberExpression)));
      }
    }

    throw this.errorWithNode('Unsupported type: ' + node.type);
  }

  /**
   * Get name of a type as a string.
   */
  function getTypeName(node) {
    if (!Node(node)) {
      throw new TypeError('Value of argument "node" violates contract, expected Node got ' + (node === null ? 'null' : (typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object' && node.constructor ? node.constructor.name || '[Unknown Object]' : typeof node === 'undefined' ? 'undefined' : _typeof(node)));
    }

    if (node.type == 'Identifier') {
      var _node$name;

      _node$name = node.name;

      if (typeof _node$name === 'string') {
        return _node$name;
      } else {
        throw new TypeError('Function "getTypeName" return value violates contract, expected string got ' + (_node$name === null ? 'null' : (typeof _node$name === 'undefined' ? 'undefined' : _typeof(_node$name)) === 'object' && _node$name.constructor ? _node$name.constructor.name || '[Unknown Object]' : typeof _node$name === 'undefined' ? 'undefined' : _typeof(_node$name)));
      }
    } else if (node.type == 'QualifiedTypeIdentifier') {
      var _ref11;

      _ref11 = getTypeName(node.qualification) + '.' + getTypeName(node.id);

      if (typeof _ref11 === 'string') {
        return _ref11;
      } else {
        throw new TypeError('Function "getTypeName" return value violates contract, expected string got ' + (_ref11 === null ? 'null' : (typeof _ref11 === 'undefined' ? 'undefined' : _typeof(_ref11)) === 'object' && _ref11.constructor ? _ref11.constructor.name || '[Unknown Object]' : typeof _ref11 === 'undefined' ? 'undefined' : _typeof(_ref11)));
      }
    }

    throw this.errorWithNode('Unsupported type: ' + node.type);
  }

  /**
   * Union two arrays.
   */
  function union(arr1, arr2) {
    if (!Array.isArray(arr1)) {
      throw new TypeError('Value of argument "arr1" violates contract, expected Array got ' + (arr1 === null ? 'null' : (typeof arr1 === 'undefined' ? 'undefined' : _typeof(arr1)) === 'object' && arr1.constructor ? arr1.constructor.name || '[Unknown Object]' : typeof arr1 === 'undefined' ? 'undefined' : _typeof(arr1)));
    }

    if (!Array.isArray(arr2)) {
      throw new TypeError('Value of argument "arr2" violates contract, expected Array got ' + (arr2 === null ? 'null' : (typeof arr2 === 'undefined' ? 'undefined' : _typeof(arr2)) === 'object' && arr2.constructor ? arr2.constructor.name || '[Unknown Object]' : typeof arr2 === 'undefined' ? 'undefined' : _typeof(arr2)));
    }

    for (var i = 0; i < arr2.length; i++) {
      var item = arr2[i];
      if (arr1.indexOf(item) === -1) {
        arr1.push(item);
      }
    }
    return arr1;
  }

  /**
   * Determine whether the given annotation allows any value.
   */
  function allowsAny(annotation) {
    if (!TypeAnnotation(annotation)) {
      throw new TypeError('Value of argument "annotation" violates contract, expected TypeAnnotation got ' + (annotation === null ? 'null' : (typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)) === 'object' && annotation.constructor ? annotation.constructor.name || '[Unknown Object]' : typeof annotation === 'undefined' ? 'undefined' : _typeof(annotation)));
    }

    if (annotation.type === 'TypeAnnotation' || annotation.type === 'NullableTypeAnnotation') {
      return allowsAny(annotation.typeAnnotation);
    } else if (annotation.type === 'AnyTypeAnnotation' || annotation.type === 'MixedTypeAnnotation') {
      return true;
    } else if (annotation.type === 'UnionTypeAnnotation') {
      var _annotation$types$som;

      _annotation$types$som = annotation.types.some(allowsAny);

      if (typeof _annotation$types$som === 'boolean') {
        return _annotation$types$som;
      } else {
        throw new TypeError('Function "allowsAny" return value violates contract, expected bool got ' + (_annotation$types$som === null ? 'null' : (typeof _annotation$types$som === 'undefined' ? 'undefined' : _typeof(_annotation$types$som)) === 'object' && _annotation$types$som.constructor ? _annotation$types$som.constructor.name || '[Unknown Object]' : typeof _annotation$types$som === 'undefined' ? 'undefined' : _typeof(_annotation$types$som)));
      }
    } else {
      return false;
    }
  }

  /**
   * Determine whether a given node is nully (null or undefined).
   */
  function isNodeNully(node) {
    if (!(node == null || Node(node))) {
      throw new TypeError('Value of argument "node" violates contract, expected ?Node got ' + (node === null ? 'null' : (typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object' && node.constructor ? node.constructor.name || '[Unknown Object]' : typeof node === 'undefined' ? 'undefined' : _typeof(node)));
    }

    if (node == null) {
      return true;
    } else if (node.type === 'Identifier' && node.name === 'undefined') {
      return true;
    } else if (node.type === 'Literal' && node.value === null) {
      return true;
    } else if (node.type === 'UnaryExpression' && node.operator === 'void') {
      return true;
    } else {
      return false;
    }
  }

  /**
   * Determine whether the file should be skipped, based on the comments attached to the given node.
   */
  function maybeSkipFile(path) {
    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    if (path.node.leadingComments && path.node.leadingComments.length) {
      var _path$node$leadingCom;

      _path$node$leadingCom = path.node.leadingComments.some(function (comment) {
        return PRAGMA_IGNORE_FILE.test(comment.value);
      });

      if (typeof _path$node$leadingCom === 'boolean') {
        return _path$node$leadingCom;
      } else {
        throw new TypeError('Function "maybeSkipFile" return value violates contract, expected bool got ' + (_path$node$leadingCom === null ? 'null' : (typeof _path$node$leadingCom === 'undefined' ? 'undefined' : _typeof(_path$node$leadingCom)) === 'object' && _path$node$leadingCom.constructor ? _path$node$leadingCom.constructor.name || '[Unknown Object]' : typeof _path$node$leadingCom === 'undefined' ? 'undefined' : _typeof(_path$node$leadingCom)));
      }
    }
    return false;
  }

  /**
   * Maybe skip the given path if it has a relevant pragma.
   */
  function maybeSkip(path) {
    if (!NodePath(path)) {
      throw new TypeError('Value of argument "path" violates contract, expected NodePath got ' + (path === null ? 'null' : (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.constructor ? path.constructor.name || '[Unknown Object]' : typeof path === 'undefined' ? 'undefined' : _typeof(path)));
    }

    var node = path.node;

    if (node.leadingComments && node.leadingComments.length) {
      var comment = node.leadingComments[node.leadingComments.length - 1];
      if (PRAGMA_IGNORE_STATEMENT.test(comment.value)) {
        path.skip();
        return true;
      }
    }
    return false;
  }

  /**
   * A function that returns its first argument, useful when filtering.
   */
  function identity(input) {
    return input;
  }

  function getExpression(node) {
    var _ref12;

    if (!Node(node)) {
      throw new TypeError('Value of argument "node" violates contract, expected Node got ' + (node === null ? 'null' : (typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object' && node.constructor ? node.constructor.name || '[Unknown Object]' : typeof node === 'undefined' ? 'undefined' : _typeof(node)));
    }

    _ref12 = t.isExpressionStatement(node) ? node.expression : node;

    if (Node(_ref12)) {
      return _ref12;
    } else {
      throw new TypeError('Function "getExpression" return value violates contract, expected Node got ' + (_ref12 === null ? 'null' : (typeof _ref12 === 'undefined' ? 'undefined' : _typeof(_ref12)) === 'object' && _ref12.constructor ? _ref12.constructor.name || '[Unknown Object]' : typeof _ref12 === 'undefined' ? 'undefined' : _typeof(_ref12)));
    }
  }

  function expression(input) {
    var _ref13;

    if (!(typeof input === 'string')) {
      throw new TypeError('Value of argument "input" violates contract, expected string got ' + (input === null ? 'null' : (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && input.constructor ? input.constructor.name || '[Unknown Object]' : typeof input === 'undefined' ? 'undefined' : _typeof(input)));
    }

    var fn = template(input);

    if (!(typeof fn === 'function')) {
      throw new TypeError('Value of variable "fn" violates contract, expected Function got ' + (fn === null ? 'null' : (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)) === 'object' && fn.constructor ? fn.constructor.name || '[Unknown Object]' : typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
    }

    _ref13 = function () {
      var node = fn.apply(undefined, arguments);

      if (!Node(node)) {
        throw new TypeError('Value of variable "node" violates contract, expected Node got ' + (node === null ? 'null' : (typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object' && node.constructor ? node.constructor.name || '[Unknown Object]' : typeof node === 'undefined' ? 'undefined' : _typeof(node)));
      }

      return getExpression(node);
    };

    if (typeof _ref13 === 'function') {
      return _ref13;
    } else {
      throw new TypeError('Function "expression" return value violates contract, expected Function got ' + (_ref13 === null ? 'null' : (typeof _ref13 === 'undefined' ? 'undefined' : _typeof(_ref13)) === 'object' && _ref13.constructor ? _ref13.constructor.name || '[Unknown Object]' : typeof _ref13 === 'undefined' ? 'undefined' : _typeof(_ref13)));
    }
  }
};

var _babelGenerator = require('babel-generator');

var _babelGenerator2 = _interopRequireDefault(_babelGenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

var Node = function Node(input) {
  return input != null && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && typeof input.type === 'string';
};

var Literal = function Literal(input) {
  return input != null && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && (input.type === 'StringLiteral' || input.type === 'BooleanLiteral' || input.type === 'NumericLiteral' || input.type === 'NullLiteral' || input.type === 'RegExpLiteral');
};

var Identifier = function Identifier(input) {
  return input != null && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && typeof input.type === 'string' && typeof input.name === 'string';
};

var QualifiedTypeIdentifier = function QualifiedTypeIdentifier(input) {
  return input != null && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && Identifier(input.id) && (Identifier(input.qualification) || QualifiedTypeIdentifier(input.qualification));
};

var TypeAnnotation = function TypeAnnotation(input) {
  return input != null && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && typeof input.type === 'string';
};

var StringLiteralTypeAnnotation = function StringLiteralTypeAnnotation(input) {
  return input != null && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && input.type === 'StringLiteralTypeAnnotation' && TypeAnnotation(input);
};

var NumericLiteralTypeAnnotation = function NumericLiteralTypeAnnotation(input) {
  return input != null && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && input.type === 'NumericLiteralTypeAnnotation' && TypeAnnotation(input);
};

var BooleanLiteralTypeAnnotation = function BooleanLiteralTypeAnnotation(input) {
  return input != null && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && input.type === 'BooleanLiteralTypeAnnotation' && TypeAnnotation(input);
};

var Scope = function Scope(input) {
  return input != null && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object';
};

var NodePath = function NodePath(input) {
  return input != null && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && typeof input.type === 'string' && Node(input.node) && Scope(input.scope);
};

/**
 * # Typecheck Transformer
 */