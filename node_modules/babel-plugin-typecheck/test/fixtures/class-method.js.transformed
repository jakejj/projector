"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = wat;

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Foo = (function () {
  function Foo() {
    _classCallCheck(this, Foo);
  }

  _createClass(Foo, [{
    key: "method",
    value: function method() {
      var _ref;

      _ref = this;

      if (_ref instanceof Foo) {
        return _ref;
      } else {
        throw new TypeError("Function return value violates contract, expected Foo got " + (_ref === null ? 'null' : (typeof _ref === "undefined" ? "undefined" : _typeof(_ref)) === 'object' && _ref.constructor ? _ref.constructor.name || '[Unknown Object]' : typeof _ref === "undefined" ? "undefined" : _typeof(_ref)));
      }
    }
  }]);

  return Foo;
})();

function wat() {
  var _foo$method;

  var foo = new Foo();

  _foo$method = foo.method();

  if (_foo$method instanceof Foo) {
    return _foo$method;
  } else {
    throw new TypeError("Function \"wat\" return value violates contract, expected Foo got " + (_foo$method === null ? 'null' : (typeof _foo$method === "undefined" ? "undefined" : _typeof(_foo$method)) === 'object' && _foo$method.constructor ? _foo$method.constructor.name || '[Unknown Object]' : typeof _foo$method === "undefined" ? "undefined" : _typeof(_foo$method)));
  }
}