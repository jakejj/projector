"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = demo;

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Thing = exports.Thing = (function () {
  function Thing(input) {
    _classCallCheck(this, Thing);

    this.input = input;
  }

  _createClass(Thing, [{
    key: "get",
    value: function get() {
      return this.input;
    }
  }, {
    key: "foo",
    value: function foo() {
      if (typeof "123" === 'string') {
        return "123";
      } else {
        throw new TypeError("Function return value violates contract, expected string got " + ("123" === null ? 'null' : _typeof("123") === 'object' && "123".constructor ? "123".constructor.name || '[Unknown Object]' : _typeof("123")));
      }
    }
  }]);

  return Thing;
})();

function demo(input) {
  var _ref;

  var instance = new Thing(input);
  _ref = [instance.get(), instance.foo()];

  if (Array.isArray(_ref) && _ref.length >= 2 && typeof _ref[1] === 'string') {
    return _ref;
  } else {
    throw new TypeError("Function \"demo\" return value violates contract, expected [Z, string] got " + (_ref === null ? 'null' : (typeof _ref === "undefined" ? "undefined" : _typeof(_ref)) === 'object' && _ref.constructor ? _ref.constructor.name || '[Unknown Object]' : typeof _ref === "undefined" ? "undefined" : _typeof(_ref)));
  }
}