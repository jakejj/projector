// Generated by CoffeeScript 1.3.1
var admin, app, cluster, cpu, express, listening, os, spawn_worker, stopping, util, workers;

cluster = require("cluster");

express = require("express");

os = require("os");

util = require("util");

app = null;

listening = false;

stopping = false;

workers = [];

spawn_worker = function(dir, cb) {
  var worker;
  console.log("spawning worker: " + dir);
  worker = cluster.fork();
  worker.dir = dir;
  console.log("forked worker " + worker.pid);
  workers.push(worker);
  return worker.on("message", function(msg) {
    var worker, _i, _len, _results;
    switch (msg.cmd) {
      case "ready":
        this.send({
          cmd: "start",
          dir: dir
        });
        if (cb) {
          return cb(worker);
        }
        break;
      case "release":
        console.log("releasing: " + msg.dir);
        _results = [];
        for (_i = 0, _len = workers.length; _i < _len; _i++) {
          worker = workers[_i];
          console.log("worker: " + worker);
          _results.push(worker.send({
            cmd: "stop"
          }));
        }
        return _results;
    }
  });
};

if (cluster.isMaster) {
  for (cpu in os.cpus()) {
    spawn_worker("/Users/david/Code/vulcan/server");
  }
  cluster.on("death", function(worker) {
    console.log("worker " + worker.pid + " died");
    workers.splice(workers.indexOf(worker), 1);
    return spawn_worker(worker.dir);
  });
} else {
  admin = require("express").createServer(express.bodyParser());
  admin.post("/release", function(req, res) {
    process.send({
      cmd: "release",
      dir: req.body.url
    });
    return res.send("ok");
  });
  process.on("message", function(msg) {
    var dir;
    console.log("msg:" + (util.inspect(msg)));
    switch (msg.cmd) {
      case "start":
        listening = false;
        dir = msg.dir;
        process.env.NODE_PATH = dir;
        app = require(dir + "/index");
        app.on("close", function() {
          console.log("http connections are done: " + process.pid);
          return process.exit(0);
        });
        app.use("/bogon", admin);
        return app.listen(8000, function() {
          return listening = true;
        });
      case "stop":
        if (!stopping) {
          stopping = true;
          console.log("stopping: " + process.pid);
          if (listening) {
            return app.close();
          }
        }
    }
  });
  process.send({
    cmd: "ready"
  });
}
