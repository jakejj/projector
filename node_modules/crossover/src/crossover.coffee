cluster = require("cluster")
express = require("express")
os      = require("os")
util    = require("util")

app = null
listening = false
stopping = false
workers = []

spawn_worker = (dir, cb) ->
  console.log "spawning worker: #{dir}"
  worker = cluster.fork()
  worker.dir = dir
  console.log("forked worker #{worker.pid}")
  workers.push(worker)
  worker.on "message", (msg) ->
    switch msg.cmd
      when "ready"
        this.send { cmd:"start", dir:dir }
        cb(worker) if cb
      when "release"
        console.log "releasing: #{msg.dir}"
        for worker in workers
          console.log "worker: #{worker}"
          worker.send { cmd:"stop" }

if cluster.isMaster
  #setInterval (-> workers[0].send("stop")), 500

  for cpu of os.cpus()
    spawn_worker("/Users/david/Code/vulcan/server")

  cluster.on "death", (worker) ->
    console.log("worker #{worker.pid} died")
    workers.splice(workers.indexOf(worker), 1)
    spawn_worker(worker.dir)
else
  admin = require("express").createServer(
    express.bodyParser())

  admin.post "/release", (req, res) ->
    process.send { cmd:"release", dir:req.body.url }
    res.send("ok")

  process.on "message", (msg) ->
    console.log "msg:#{util.inspect(msg)}"
    switch msg.cmd
      when "start"
        listening = false
        dir = msg.dir
        process.env.NODE_PATH = dir
        app = require(dir + "/index")
        app.on "close", ->
          console.log "http connections are done: #{process.pid}"
          process.exit(0)
        app.use("/bogon", admin)
        app.listen 8000, ->
          listening = true
      when "stop"
        unless stopping
          stopping = true
          console.log "stopping: #{process.pid}"
          app.close() if listening

  process.send { cmd:"ready" }
